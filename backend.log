
> bingo-backend@1.0.0 dev
> nodemon src/server.ts

[33m[nodemon] 3.1.10[39m
[33m[nodemon] to restart at any time, enter `rs`[39m
[33m[nodemon] watching path(s): src/**/*[39m
[33m[nodemon] watching extensions: ts,json[39m
[32m[nodemon] starting `ts-node -r tsconfig-paths/register src/server.ts src/server.ts`[39m
14:41:45 [[36minfo[39m]: [36mSystem metrics collection started[39m
{
  "module": "performance",
  "interval": 30000
}
14:41:47 [[36minfo[39m]: [36mOpenpay configuration validated successfully (MOCK MODE)[39m
{
  "merchantId": "mock_merchant_12345",
  "production": false,
  "mockMode": true,
  "mockDelayMs": 1000,
  "mockSuccessRate": 0.95,
  "country": "PE"
}
14:41:47 [[36minfo[39m]: [36mOpenpay configuration validated successfully (MOCK MODE)[39m
{
  "merchantId": "mock_merchant_12345",
  "production": false,
  "mockMode": true,
  "mockDelayMs": 1000,
  "mockSuccessRate": 0.95,
  "country": "PE"
}
14:41:47 [[36minfo[39m]: [36mConnecting to databases...[39m
14:41:47 [[36minfo[39m]: ‚úÖ Conexi√≥n a PostgreSQL establecida exitosamente
prisma:query SELECT 1
14:41:47 [[36minfo[39m]: ‚úÖ Base de datos PostgreSQL funcionando correctamente
14:41:47 [[31merror[39m]: AggregateError
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1714:7)
14:41:47 [[31merror[39m]: AggregateError
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1714:7)
14:41:47 [[33mwarn[39m]: ‚ö†Ô∏è Continuando sin Redis para desarrollo
14:41:47 [[36minfo[39m]: [36mInitializing report scheduler...[39m
14:41:47 [[36minfo[39m]: [36mInitializing scheduler service[39m
{
  "module": "analytics"
}
14:41:47 [[36minfo[39m]: [36mTask scheduled successfully[39m
{
  "module": "analytics",
  "taskId": "kpi-alerts-hourly",
  "type": "kpi-alerts",
  "frequency": "daily",
  "nextRun": "2025-08-12T20:00:00.000Z",
  "timeUntilRun": 1092798
}
14:41:47 [[36minfo[39m]: [36mTask scheduled successfully[39m
{
  "module": "analytics",
  "taskId": "daily-report-auto",
  "type": "daily",
  "frequency": "daily",
  "nextRun": "2025-08-13T13:00:00.000Z",
  "timeUntilRun": 62292798
}
14:41:47 [[36minfo[39m]: [36mTask scheduled successfully[39m
{
  "module": "analytics",
  "taskId": "weekly-report-auto",
  "type": "weekly",
  "frequency": "weekly",
  "nextRun": "2025-08-18T14:00:00.000Z",
  "timeUntilRun": 497892797
}
14:41:47 [[36minfo[39m]: [36mTask scheduled successfully[39m
{
  "module": "analytics",
  "taskId": "monthly-report-auto",
  "type": "monthly",
  "frequency": "monthly",
  "nextRun": "2025-09-01T15:00:00.000Z",
  "timeUntilRun": 1711092797
}
14:41:47 [[36minfo[39m]: [36mScheduler service initialized successfully[39m
{
  "module": "analytics",
  "tasksCount": 4
}
14:41:47 [[36minfo[39m]: [36mServer started successfully[39m
{
  "port": 3001,
  "environment": "development",
  "frontendUrl": "http://localhost:5173",
  "features": [
    "HTTP",
    "Socket.IO",
    "CORS",
    "Analytics",
    "Reports",
    "Scheduler"
  ]
}
14:42:15 [[36minfo[39m]: Realtime metrics recorded
14:42:45 [[36minfo[39m]: Realtime metrics recorded
prisma:query SELECT 1
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
14:42:46 [[36minfo[39m]: [36mHTTP GET / 200 35ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 35
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:42:46 [[36minfo[39m]: [36mHTTP GET /me 200 40ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 40
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:42:46 [[36minfo[39m]: [36mHTTP GET /me 200 5ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 5
  },
  "type": "http"
}
14:43:15 [[36minfo[39m]: Realtime metrics recorded
14:43:45 [[36minfo[39m]: Realtime metrics recorded
prisma:query SELECT 1
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
14:43:47 [[36minfo[39m]: [36mHTTP GET / 200 15ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 15
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`email` = ? OR `main`.`users`.`username` = ?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:43:50 [[36minfo[39m]: Tokens generados para usuario: jugador@test.com
14:43:50 [[35maudit[39m]: [35mAUDIT: login_attempt on user_session[39m
{
  "module": "auth",
  "ip": "::1",
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "auditEvent": {
    "action": "login_attempt",
    "resource": "user_session",
    "userId": "jugador@test.com",
    "success": true,
    "reason": "valid_credentials"
  }
}
14:43:50 [[33mwarn[39m]: [33mSlow request detected[39m
{
  "module": "performance",
  "method": "POST",
  "route": "/login",
  "responseTime": 1067,
  "memoryIncrease": 1090552,
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1"
}
14:43:50 [[36minfo[39m]: [36mHTTP POST /login 200 1067ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "POST",
    "url": "/login",
    "statusCode": 200,
    "responseTime": 1067
  },
  "type": "http"
}
14:43:52 [[36minfo[39m]: [36mHTTP GET /balance 200 43ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 43
  },
  "type": "http"
}
14:43:52 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 69
}
14:43:52 [[36minfo[39m]: [36mHTTP GET /transactions 200 30ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/transactions",
    "statusCode": 200,
    "responseTime": 30
  },
  "type": "http"
}
14:43:52 [[36minfo[39m]: [36mHistorial de transacciones consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "limit": 15,
  "offset": 0,
  "resultCount": 9
}
14:43:52 [[36minfo[39m]: [36mHTTP GET /balance 200 14ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 14
  },
  "type": "http"
}
14:43:52 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 69
}
14:43:52 [[36minfo[39m]: [36mHTTP GET /transactions 200 11ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/transactions",
    "statusCode": 200,
    "responseTime": 11
  },
  "type": "http"
}
14:43:52 [[36minfo[39m]: [36mHistorial de transacciones consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "limit": 15,
  "offset": 0,
  "resultCount": 9
}
14:43:52 [[36minfo[39m]: [36mHTTP GET /balance 200 4ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 4
  },
  "type": "http"
}
14:43:52 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 69
}
14:43:52 [[36minfo[39m]: [36mHTTP GET /balance 200 5ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 5
  },
  "type": "http"
}
14:43:52 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 69
}
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt` FROM `main`.`games` WHERE (`main`.`games`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:43:55 [[36minfo[39m]: [36mHTTP GET /balance 200 4ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 4
  },
  "type": "http"
}
14:43:55 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 69
}
prisma:query SELECT `main`.`wallets`.`id`, `main`.`wallets`.`userId`, `main`.`wallets`.`balance`, `main`.`wallets`.`dailyLimit`, `main`.`wallets`.`monthlyLimit`, `main`.`wallets`.`isActive`, `main`.`wallets`.`isFrozen`, `main`.`wallets`.`createdAt`, `main`.`wallets`.`updatedAt` FROM `main`.`wallets` WHERE (`main`.`wallets`.`userId` = ? AND 1=1) LIMIT ? OFFSET ?
14:43:55 [[36minfo[39m]: [36mHTTP GET /validate/:gameId/:cardCount? 200 33ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/validate/:gameId/:cardCount?",
    "statusCode": 200,
    "responseTime": 33
  },
  "type": "http"
}
prisma:query BEGIN IMMEDIATE
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE (`main`.`games`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`wallets`.`id`, `main`.`wallets`.`userId`, `main`.`wallets`.`balance`, `main`.`wallets`.`dailyLimit`, `main`.`wallets`.`monthlyLimit`, `main`.`wallets`.`isActive`, `main`.`wallets`.`isFrozen`, `main`.`wallets`.`createdAt`, `main`.`wallets`.`updatedAt` FROM `main`.`wallets` WHERE (`main`.`wallets`.`userId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`game_participants`.`id`, `main`.`game_participants`.`userId`, `main`.`game_participants`.`gameId`, `main`.`game_participants`.`joinedAt`, `main`.`game_participants`.`cardsCount`, `main`.`game_participants`.`totalSpent`, `main`.`game_participants`.`hasWon`, `main`.`game_participants`.`prizeWon` FROM `main`.`game_participants` WHERE ((`main`.`game_participants`.`userId` = ? AND `main`.`game_participants`.`gameId` = ?) AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT COUNT(*) FROM (SELECT `main`.`bingo_cards`.`id` FROM `main`.`bingo_cards` WHERE (`main`.`bingo_cards`.`userId` = ? AND `main`.`bingo_cards`.`gameId` = ?) LIMIT ? OFFSET ?) AS `sub`
prisma:query UPDATE `main`.`wallets` SET `balance` = ?, `updatedAt` = ? WHERE (`main`.`wallets`.`userId` = ? AND 1=1) RETURNING `id` AS `id`, `userId` AS `userId`, `balance` AS `balance`, `dailyLimit` AS `dailyLimit`, `monthlyLimit` AS `monthlyLimit`, `isActive` AS `isActive`, `isFrozen` AS `isFrozen`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`transactions` (`id`, `userId`, `type`, `amount`, `description`, `status`, `paymentMethod`, `pearlsAmount`, `commissionAmount`, `referenceId`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `userId` AS `userId`, `gameId` AS `gameId`, `type` AS `type`, `amount` AS `amount`, `description` AS `description`, `status` AS `status`, `paymentMethod` AS `paymentMethod`, `paymentId` AS `paymentId`, `pearlsAmount` AS `pearlsAmount`, `fromUserId` AS `fromUserId`, `toUserId` AS `toUserId`, `commissionAmount` AS `commissionAmount`, `referenceId` AS `referenceId`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query UPDATE `main`.`game_participants` SET `cardsCount` = ?, `totalSpent` = ? WHERE (`main`.`game_participants`.`id` = ? AND 1=1) RETURNING `id` AS `id`, `userId` AS `userId`, `gameId` AS `gameId`, `joinedAt` AS `joinedAt`, `cardsCount` AS `cardsCount`, `totalSpent` AS `totalSpent`, `hasWon` AS `hasWon`, `prizeWon` AS `prizeWon`
prisma:query SELECT MAX(`cardNumber`) FROM (SELECT `main`.`bingo_cards`.`cardNumber` FROM `main`.`bingo_cards` WHERE `main`.`bingo_cards`.`gameId` = ? LIMIT ? OFFSET ?) AS `sub`
prisma:query INSERT INTO `main`.`bingo_cards` (`id`, `userId`, `gameId`, `cardNumber`, `isActive`, `markedNumbers`, `isWinner`, `createdAt`, `updatedAt`) VALUES (?,?,?,?,?,?,?,?,?) RETURNING `id` AS `id`, `userId` AS `userId`, `gameId` AS `gameId`, `cardNumber` AS `cardNumber`, `isActive` AS `isActive`, `markedNumbers` AS `markedNumbers`, `isWinner` AS `isWinner`, `winningPattern` AS `winningPattern`, `createdAt` AS `createdAt`, `updatedAt` AS `updatedAt`
prisma:query INSERT INTO `main`.`card_numbers` (`id`, `cardId`, `position`, `column`, `number`, `isMarked`, `isFree`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `cardId` AS `cardId`, `position` AS `position`, `column` AS `column`, `number` AS `number`, `isMarked` AS `isMarked`, `isFree` AS `isFree`
prisma:query INSERT INTO `main`.`card_numbers` (`id`, `cardId`, `position`, `column`, `number`, `isMarked`, `isFree`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `cardId` AS `cardId`, `position` AS `position`, `column` AS `column`, `number` AS `number`, `isMarked` AS `isMarked`, `isFree` AS `isFree`
prisma:query INSERT INTO `main`.`card_numbers` (`id`, `cardId`, `position`, `column`, `number`, `isMarked`, `isFree`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `cardId` AS `cardId`, `position` AS `position`, `column` AS `column`, `number` AS `number`, `isMarked` AS `isMarked`, `isFree` AS `isFree`
prisma:query INSERT INTO `main`.`card_numbers` (`id`, `cardId`, `position`, `column`, `number`, `isMarked`, `isFree`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `cardId` AS `cardId`, `position` AS `position`, `column` AS `column`, `number` AS `number`, `isMarked` AS `isMarked`, `isFree` AS `isFree`
prisma:query INSERT INTO `main`.`card_numbers` (`id`, `cardId`, `position`, `column`, `number`, `isMarked`, `isFree`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `cardId` AS `cardId`, `position` AS `position`, `column` AS `column`, `number` AS `number`, `isMarked` AS `isMarked`, `isFree` AS `isFree`
prisma:query INSERT INTO `main`.`card_numbers` (`id`, `cardId`, `position`, `column`, `number`, `isMarked`, `isFree`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `cardId` AS `cardId`, `position` AS `position`, `column` AS `column`, `number` AS `number`, `isMarked` AS `isMarked`, `isFree` AS `isFree`
prisma:query INSERT INTO `main`.`card_numbers` (`id`, `cardId`, `position`, `column`, `number`, `isMarked`, `isFree`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `cardId` AS `cardId`, `position` AS `position`, `column` AS `column`, `number` AS `number`, `isMarked` AS `isMarked`, `isFree` AS `isFree`
prisma:query INSERT INTO `main`.`card_numbers` (`id`, `cardId`, `position`, `column`, `number`, `isMarked`, `isFree`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `cardId` AS `cardId`, `position` AS `position`, `column` AS `column`, `number` AS `number`, `isMarked` AS `isMarked`, `isFree` AS `isFree`
prisma:query INSERT INTO `main`.`card_numbers` (`id`, `cardId`, `position`, `column`, `number`, `isMarked`, `isFree`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `cardId` AS `cardId`, `position` AS `position`, `column` AS `column`, `number` AS `number`, `isMarked` AS `isMarked`, `isFree` AS `isFree`
prisma:query INSERT INTO `main`.`card_numbers` (`id`, `cardId`, `position`, `column`, `number`, `isMarked`, `isFree`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `cardId` AS `cardId`, `position` AS `position`, `column` AS `column`, `number` AS `number`, `isMarked` AS `isMarked`, `isFree` AS `isFree`
prisma:query INSERT INTO `main`.`card_numbers` (`id`, `cardId`, `position`, `column`, `number`, `isMarked`, `isFree`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `cardId` AS `cardId`, `position` AS `position`, `column` AS `column`, `number` AS `number`, `isMarked` AS `isMarked`, `isFree` AS `isFree`
prisma:query INSERT INTO `main`.`card_numbers` (`id`, `cardId`, `position`, `column`, `number`, `isMarked`, `isFree`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `cardId` AS `cardId`, `position` AS `position`, `column` AS `column`, `number` AS `number`, `isMarked` AS `isMarked`, `isFree` AS `isFree`
prisma:query INSERT INTO `main`.`card_numbers` (`id`, `cardId`, `position`, `column`, `number`, `isMarked`, `isFree`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `cardId` AS `cardId`, `position` AS `position`, `column` AS `column`, `number` AS `number`, `isMarked` AS `isMarked`, `isFree` AS `isFree`
prisma:query INSERT INTO `main`.`card_numbers` (`id`, `cardId`, `position`, `column`, `number`, `isMarked`, `isFree`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `cardId` AS `cardId`, `position` AS `position`, `column` AS `column`, `number` AS `number`, `isMarked` AS `isMarked`, `isFree` AS `isFree`
prisma:query INSERT INTO `main`.`card_numbers` (`id`, `cardId`, `position`, `column`, `number`, `isMarked`, `isFree`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `cardId` AS `cardId`, `position` AS `position`, `column` AS `column`, `number` AS `number`, `isMarked` AS `isMarked`, `isFree` AS `isFree`
prisma:query INSERT INTO `main`.`card_numbers` (`id`, `cardId`, `position`, `column`, `number`, `isMarked`, `isFree`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `cardId` AS `cardId`, `position` AS `position`, `column` AS `column`, `number` AS `number`, `isMarked` AS `isMarked`, `isFree` AS `isFree`
prisma:query INSERT INTO `main`.`card_numbers` (`id`, `cardId`, `position`, `column`, `number`, `isMarked`, `isFree`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `cardId` AS `cardId`, `position` AS `position`, `column` AS `column`, `number` AS `number`, `isMarked` AS `isMarked`, `isFree` AS `isFree`
prisma:query INSERT INTO `main`.`card_numbers` (`id`, `cardId`, `position`, `column`, `number`, `isMarked`, `isFree`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `cardId` AS `cardId`, `position` AS `position`, `column` AS `column`, `number` AS `number`, `isMarked` AS `isMarked`, `isFree` AS `isFree`
prisma:query INSERT INTO `main`.`card_numbers` (`id`, `cardId`, `position`, `column`, `number`, `isMarked`, `isFree`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `cardId` AS `cardId`, `position` AS `position`, `column` AS `column`, `number` AS `number`, `isMarked` AS `isMarked`, `isFree` AS `isFree`
prisma:query INSERT INTO `main`.`card_numbers` (`id`, `cardId`, `position`, `column`, `number`, `isMarked`, `isFree`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `cardId` AS `cardId`, `position` AS `position`, `column` AS `column`, `number` AS `number`, `isMarked` AS `isMarked`, `isFree` AS `isFree`
prisma:query INSERT INTO `main`.`card_numbers` (`id`, `cardId`, `position`, `column`, `number`, `isMarked`, `isFree`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `cardId` AS `cardId`, `position` AS `position`, `column` AS `column`, `number` AS `number`, `isMarked` AS `isMarked`, `isFree` AS `isFree`
prisma:query INSERT INTO `main`.`card_numbers` (`id`, `cardId`, `position`, `column`, `number`, `isMarked`, `isFree`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `cardId` AS `cardId`, `position` AS `position`, `column` AS `column`, `number` AS `number`, `isMarked` AS `isMarked`, `isFree` AS `isFree`
prisma:query INSERT INTO `main`.`card_numbers` (`id`, `cardId`, `position`, `column`, `number`, `isMarked`, `isFree`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `cardId` AS `cardId`, `position` AS `position`, `column` AS `column`, `number` AS `number`, `isMarked` AS `isMarked`, `isFree` AS `isFree`
prisma:query INSERT INTO `main`.`card_numbers` (`id`, `cardId`, `position`, `column`, `number`, `isMarked`, `isFree`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `cardId` AS `cardId`, `position` AS `position`, `column` AS `column`, `number` AS `number`, `isMarked` AS `isMarked`, `isFree` AS `isFree`
prisma:query INSERT INTO `main`.`card_numbers` (`id`, `cardId`, `position`, `column`, `number`, `isMarked`, `isFree`) VALUES (?,?,?,?,?,?,?) RETURNING `id` AS `id`, `cardId` AS `cardId`, `position` AS `position`, `column` AS `column`, `number` AS `number`, `isMarked` AS `isMarked`, `isFree` AS `isFree`
prisma:query COMMIT
14:43:59 [[36minfo[39m]: [36mCartones comprados con Perlas exitosamente[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "gameId": "cme3boc9t000e131on2iaxg19",
  "cardCount": 1,
  "totalCost": 5,
  "newBalance": 64,
  "transactionId": "cme8y9g3y0002vfpr5kvmd257"
}
14:43:59 [[36minfo[39m]: [36mCompra de cartones exitosa[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "gameId": "cme3boc9t000e131on2iaxg19",
  "cardCount": 1,
  "totalAmount": 5,
  "newBalance": 64,
  "transactionId": "cme8y9g3y0002vfpr5kvmd257"
}
14:43:59 [[36minfo[39m]: [36mHTTP POST /cards 200 68ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "POST",
    "url": "/cards",
    "statusCode": 200,
    "responseTime": 68
  },
  "type": "http"
}
14:44:00 [[36minfo[39m]: [36mHTTP GET /balance 200 7ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 7
  },
  "type": "http"
}
14:44:00 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 64
}
14:44:00 [[36minfo[39m]: [36mHTTP GET /transactions 200 15ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/transactions",
    "statusCode": 200,
    "responseTime": 15
  },
  "type": "http"
}
14:44:00 [[36minfo[39m]: [36mHistorial de transacciones consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "limit": 15,
  "offset": 0,
  "resultCount": 10
}
14:44:00 [[36minfo[39m]: [36mHTTP GET /balance 200 8ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 8
  },
  "type": "http"
}
14:44:00 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 64
}
14:44:00 [[36minfo[39m]: [36mHTTP GET /transactions 200 7ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/transactions",
    "statusCode": 200,
    "responseTime": 7
  },
  "type": "http"
}
14:44:00 [[36minfo[39m]: [36mHistorial de transacciones consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "limit": 15,
  "offset": 0,
  "resultCount": 10
}
prisma:query SELECT 1
prisma:query SELECT `main`.`bingo_cards`.`id`, `main`.`bingo_cards`.`userId`, `main`.`bingo_cards`.`gameId`, `main`.`bingo_cards`.`cardNumber`, `main`.`bingo_cards`.`isActive`, `main`.`bingo_cards`.`markedNumbers`, `main`.`bingo_cards`.`isWinner`, `main`.`bingo_cards`.`winningPattern`, `main`.`bingo_cards`.`createdAt`, `main`.`bingo_cards`.`updatedAt` FROM `main`.`bingo_cards` WHERE (`main`.`bingo_cards`.`userId` = ? AND `main`.`bingo_cards`.`isActive` = ?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`cardPrice`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`totalPrize`, `main`.`games`.`maxPlayers`, `main`.`games`.`description`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE `main`.`games`.`id` IN (?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`card_numbers`.`id`, `main`.`card_numbers`.`cardId`, `main`.`card_numbers`.`position`, `main`.`card_numbers`.`column`, `main`.`card_numbers`.`number`, `main`.`card_numbers`.`isMarked`, `main`.`card_numbers`.`isFree` FROM `main`.`card_numbers` WHERE `main`.`card_numbers`.`cardId` IN (?,?,?,?) ORDER BY `main`.`card_numbers`.`position` ASC LIMIT ? OFFSET ?
14:44:03 [[36minfo[39m]: [36mHTTP GET /balance 200 10ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 10
  },
  "type": "http"
}
14:44:03 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 64
}
14:44:03 [[36minfo[39m]: [36mHTTP GET /my-all 200 47ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/my-all",
    "statusCode": 200,
    "responseTime": 47
  },
  "type": "http"
}
14:44:03 [[36minfo[39m]: [36mHTTP GET /balance 200 3ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 3
  },
  "type": "http"
}
14:44:03 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 64
}
14:44:15 [[36minfo[39m]: Realtime metrics recorded
14:44:45 [[36minfo[39m]: Realtime metrics recorded
prisma:query SELECT 1
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
14:44:48 [[36minfo[39m]: [36mHTTP GET / 200 6ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 6
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`email` = ? OR `main`.`users`.`username` = ?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:44:51 [[36minfo[39m]: Tokens generados para usuario: jugador@test.com
14:44:51 [[35maudit[39m]: [35mAUDIT: login_attempt on user_session[39m
{
  "module": "auth",
  "ip": "::1",
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "auditEvent": {
    "action": "login_attempt",
    "resource": "user_session",
    "userId": "jugador@test.com",
    "success": true,
    "reason": "valid_credentials"
  }
}
14:44:51 [[36minfo[39m]: [36mHTTP POST /login 200 373ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "POST",
    "url": "/login",
    "statusCode": 200,
    "responseTime": 373
  },
  "type": "http"
}
prisma:query SELECT `main`.`bingo_cards`.`id`, `main`.`bingo_cards`.`userId`, `main`.`bingo_cards`.`gameId`, `main`.`bingo_cards`.`cardNumber`, `main`.`bingo_cards`.`isActive`, `main`.`bingo_cards`.`markedNumbers`, `main`.`bingo_cards`.`isWinner`, `main`.`bingo_cards`.`winningPattern`, `main`.`bingo_cards`.`createdAt`, `main`.`bingo_cards`.`updatedAt` FROM `main`.`bingo_cards` WHERE (`main`.`bingo_cards`.`userId` = ? AND `main`.`bingo_cards`.`isActive` = ?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`cardPrice`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`totalPrize`, `main`.`games`.`maxPlayers`, `main`.`games`.`description`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE `main`.`games`.`id` IN (?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`card_numbers`.`id`, `main`.`card_numbers`.`cardId`, `main`.`card_numbers`.`position`, `main`.`card_numbers`.`column`, `main`.`card_numbers`.`number`, `main`.`card_numbers`.`isMarked`, `main`.`card_numbers`.`isFree` FROM `main`.`card_numbers` WHERE `main`.`card_numbers`.`cardId` IN (?,?,?,?) ORDER BY `main`.`card_numbers`.`position` ASC LIMIT ? OFFSET ?
14:44:53 [[36minfo[39m]: [36mHTTP GET /my-all 200 18ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/my-all",
    "statusCode": 200,
    "responseTime": 18
  },
  "type": "http"
}
14:44:53 [[36minfo[39m]: [36mHTTP GET /balance 200 13ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 13
  },
  "type": "http"
}
14:44:53 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 64
}
14:44:53 [[36minfo[39m]: [36mHTTP GET /balance 200 3ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 3
  },
  "type": "http"
}
14:44:53 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 64
}
14:44:59 [[36minfo[39m]: [36mSOCKET: client_connected[39m
{
  "socketEvent": "client_connected",
  "socketData": {
    "socketId": "GNBGCvd8FRvVSSkiAAAB"
  },
  "type": "socket"
}
14:44:59 [[36minfo[39m]: [36mBUSINESS: player_joined[39m
{
  "module": "game",
  "userId": "GNBGCvd8FRvVSSkiAAAB",
  "businessEvent": "player_joined",
  "businessData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "playerCount": 1
  },
  "type": "business"
}
14:45:07 [[36minfo[39m]: [36mSOCKET: client_disconnected[39m
{
  "socketEvent": "client_disconnected",
  "socketData": {
    "socketId": "GNBGCvd8FRvVSSkiAAAB",
    "reason": "transport close"
  },
  "type": "socket"
}
14:45:15 [[36minfo[39m]: Realtime metrics recorded
14:45:45 [[36minfo[39m]: Realtime metrics recorded
prisma:query SELECT 1
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`email` = ? OR `main`.`users`.`username` = ?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:45:53 [[36minfo[39m]: Tokens generados para usuario: jugador@test.com
14:45:53 [[35maudit[39m]: [35mAUDIT: login_attempt on user_session[39m
{
  "module": "auth",
  "ip": "::1",
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "auditEvent": {
    "action": "login_attempt",
    "resource": "user_session",
    "userId": "jugador@test.com",
    "success": true,
    "reason": "valid_credentials"
  }
}
14:45:53 [[36minfo[39m]: [36mHTTP POST /login 200 332ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "POST",
    "url": "/login",
    "statusCode": 200,
    "responseTime": 332
  },
  "type": "http"
}
prisma:query SELECT `main`.`bingo_cards`.`id`, `main`.`bingo_cards`.`userId`, `main`.`bingo_cards`.`gameId`, `main`.`bingo_cards`.`cardNumber`, `main`.`bingo_cards`.`isActive`, `main`.`bingo_cards`.`markedNumbers`, `main`.`bingo_cards`.`isWinner`, `main`.`bingo_cards`.`winningPattern`, `main`.`bingo_cards`.`createdAt`, `main`.`bingo_cards`.`updatedAt` FROM `main`.`bingo_cards` WHERE (`main`.`bingo_cards`.`userId` = ? AND `main`.`bingo_cards`.`isActive` = ?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`cardPrice`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`totalPrize`, `main`.`games`.`maxPlayers`, `main`.`games`.`description`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE `main`.`games`.`id` IN (?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`card_numbers`.`id`, `main`.`card_numbers`.`cardId`, `main`.`card_numbers`.`position`, `main`.`card_numbers`.`column`, `main`.`card_numbers`.`number`, `main`.`card_numbers`.`isMarked`, `main`.`card_numbers`.`isFree` FROM `main`.`card_numbers` WHERE `main`.`card_numbers`.`cardId` IN (?,?,?,?) ORDER BY `main`.`card_numbers`.`position` ASC LIMIT ? OFFSET ?
14:45:56 [[36minfo[39m]: [36mHTTP GET /my-all 200 12ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/my-all",
    "statusCode": 200,
    "responseTime": 12
  },
  "type": "http"
}
14:45:56 [[36minfo[39m]: [36mHTTP GET /balance 200 6ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 6
  },
  "type": "http"
}
14:45:56 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 64
}
14:45:56 [[36minfo[39m]: [36mHTTP GET /balance 200 5ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 5
  },
  "type": "http"
}
14:45:56 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 64
}
14:46:03 [[36minfo[39m]: [36mSOCKET: client_connected[39m
{
  "socketEvent": "client_connected",
  "socketData": {
    "socketId": "6x8knZC-gp8Bq5P5AAAD"
  },
  "type": "socket"
}
14:46:03 [[36minfo[39m]: [36mBUSINESS: player_joined[39m
{
  "module": "game",
  "userId": "6x8knZC-gp8Bq5P5AAAD",
  "businessEvent": "player_joined",
  "businessData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "playerCount": 1
  },
  "type": "business"
}
14:46:15 [[36minfo[39m]: Realtime metrics recorded
prisma:query SELECT 1
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
14:46:38 [[36minfo[39m]: [36mHTTP GET / 200 27ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 27
  },
  "type": "http"
}
14:46:40 [[36minfo[39m]: Tokens invalidados para usuario: cme3boc9d0001131ojj801ouw
14:46:40 [[35maudit[39m]: [35mAUDIT: user_logout on user_session[39m
{
  "module": "auth",
  "ip": "::1",
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "auditEvent": {
    "action": "user_logout",
    "resource": "user_session",
    "userId": "jugador@test.com",
    "success": true
  }
}
14:46:40 [[36minfo[39m]: [36mHTTP POST /logout 200 13ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "POST",
    "url": "/logout",
    "statusCode": 200,
    "responseTime": 13
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`email` = ? OR `main`.`users`.`username` = ?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:46:43 [[36minfo[39m]: Tokens generados para usuario: admin@bingo-la-perla.com
14:46:43 [[35maudit[39m]: [35mAUDIT: login_attempt on user_session[39m
{
  "module": "auth",
  "ip": "::1",
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "auditEvent": {
    "action": "login_attempt",
    "resource": "user_session",
    "userId": "admin@bingo-la-perla.com",
    "success": true,
    "reason": "valid_credentials"
  }
}
14:46:43 [[36minfo[39m]: [36mHTTP POST /login 200 331ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "POST",
    "url": "/login",
    "statusCode": 200,
    "responseTime": 331
  },
  "type": "http"
}
14:46:45 [[36minfo[39m]: Realtime metrics recorded
14:46:46 [[36minfo[39m]: [36mSOCKET: client_connected[39m
{
  "socketEvent": "client_connected",
  "socketData": {
    "socketId": "ytWJL_Gw5UV_BimCAAAG"
  },
  "type": "socket"
}
14:46:46 [[36minfo[39m]: [36mBUSINESS: player_joined[39m
{
  "module": "game",
  "userId": "ytWJL_Gw5UV_BimCAAAG",
  "businessEvent": "player_joined",
  "businessData": {
    "gameId": "game-1",
    "playerCount": 1
  },
  "type": "business"
}
14:46:46 [[36minfo[39m]: [36mSOCKET: admin_joined[39m
{
  "socketEvent": "admin_joined",
  "socketData": {
    "gameId": "game-1",
    "socketId": "ytWJL_Gw5UV_BimCAAAG"
  },
  "type": "socket"
}
14:46:53 [[36minfo[39m]: [36mBUSINESS: admin_set_pattern[39m
{
  "gameId": "game-1",
  "businessEvent": "admin_set_pattern",
  "businessData": {
    "pattern": "full"
  },
  "type": "business"
}
14:46:55 [[36minfo[39m]: [36mBUSINESS: admin_reset_game[39m
{
  "gameId": "game-1",
  "businessEvent": "admin_reset_game",
  "businessData": {},
  "type": "business"
}
14:47:05 [[36minfo[39m]: [36mBUSINESS: admin_toggle_game[39m
{
  "gameId": "game-1",
  "businessEvent": "admin_toggle_game",
  "businessData": {
    "status": "paused"
  },
  "type": "business"
}
14:47:08 [[36minfo[39m]: [36mBUSINESS: admin_reset_game[39m
{
  "gameId": "game-1",
  "businessEvent": "admin_reset_game",
  "businessData": {},
  "type": "business"
}
14:47:11 [[36minfo[39m]: [36mBUSINESS: admin_set_pattern[39m
{
  "gameId": "game-1",
  "businessEvent": "admin_set_pattern",
  "businessData": {
    "pattern": "full"
  },
  "type": "business"
}
14:47:15 [[36minfo[39m]: Realtime metrics recorded
14:47:45 [[36minfo[39m]: Realtime metrics recorded
14:48:15 [[36minfo[39m]: Realtime metrics recorded
14:48:45 [[36minfo[39m]: Realtime metrics recorded
14:49:15 [[36minfo[39m]: Realtime metrics recorded
14:49:45 [[36minfo[39m]: Realtime metrics recorded
14:50:15 [[36minfo[39m]: Realtime metrics recorded
14:50:45 [[36minfo[39m]: Realtime metrics recorded
14:51:15 [[36minfo[39m]: Realtime metrics recorded
14:51:45 [[36minfo[39m]: Realtime metrics recorded
14:52:15 [[36minfo[39m]: [36mSOCKET: client_disconnected[39m
{
  "socketEvent": "client_disconnected",
  "socketData": {
    "socketId": "ytWJL_Gw5UV_BimCAAAG",
    "reason": "client namespace disconnect"
  },
  "type": "socket"
}
14:52:15 [[36minfo[39m]: [36mSOCKET: client_connected[39m
{
  "socketEvent": "client_connected",
  "socketData": {
    "socketId": "kk-e_v6VNuZaqnzYAAAI"
  },
  "type": "socket"
}
14:52:15 [[36minfo[39m]: [36mBUSINESS: player_joined[39m
{
  "module": "game",
  "userId": "kk-e_v6VNuZaqnzYAAAI",
  "businessEvent": "player_joined",
  "businessData": {
    "gameId": "game-1",
    "playerCount": 1
  },
  "type": "business"
}
14:52:15 [[36minfo[39m]: [36mSOCKET: admin_joined[39m
{
  "socketEvent": "admin_joined",
  "socketData": {
    "gameId": "game-1",
    "socketId": "kk-e_v6VNuZaqnzYAAAI"
  },
  "type": "socket"
}
14:52:15 [[36minfo[39m]: Realtime metrics recorded
14:52:44 [[36minfo[39m]: [36mSOCKET: client_disconnected[39m
{
  "socketEvent": "client_disconnected",
  "socketData": {
    "socketId": "kk-e_v6VNuZaqnzYAAAI",
    "reason": "client namespace disconnect"
  },
  "type": "socket"
}
14:52:44 [[36minfo[39m]: [36mSOCKET: client_connected[39m
{
  "socketEvent": "client_connected",
  "socketData": {
    "socketId": "LjgMIWu8ubt5fld8AAAM"
  },
  "type": "socket"
}
14:52:44 [[36minfo[39m]: [36mBUSINESS: player_joined[39m
{
  "module": "game",
  "userId": "LjgMIWu8ubt5fld8AAAM",
  "businessEvent": "player_joined",
  "businessData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "playerCount": 2
  },
  "type": "business"
}
14:52:44 [[36minfo[39m]: [36mSOCKET: admin_joined[39m
{
  "socketEvent": "admin_joined",
  "socketData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "socketId": "LjgMIWu8ubt5fld8AAAM"
  },
  "type": "socket"
}
14:52:45 [[36minfo[39m]: Realtime metrics recorded
14:53:15 [[36minfo[39m]: Realtime metrics recorded
14:53:23 [[36minfo[39m]: [36mSOCKET: client_disconnected[39m
{
  "socketEvent": "client_disconnected",
  "socketData": {
    "socketId": "LjgMIWu8ubt5fld8AAAM",
    "reason": "client namespace disconnect"
  },
  "type": "socket"
}
14:53:23 [[36minfo[39m]: [36mSOCKET: client_connected[39m
{
  "socketEvent": "client_connected",
  "socketData": {
    "socketId": "zxFmIRKFLfKjZCRlAAAO"
  },
  "type": "socket"
}
14:53:23 [[36minfo[39m]: [36mBUSINESS: player_joined[39m
{
  "module": "game",
  "userId": "zxFmIRKFLfKjZCRlAAAO",
  "businessEvent": "player_joined",
  "businessData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "playerCount": 2
  },
  "type": "business"
}
14:53:23 [[36minfo[39m]: [36mSOCKET: admin_joined[39m
{
  "socketEvent": "admin_joined",
  "socketData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "socketId": "zxFmIRKFLfKjZCRlAAAO"
  },
  "type": "socket"
}
14:53:44 [[36minfo[39m]: [36mSOCKET: client_disconnected[39m
{
  "socketEvent": "client_disconnected",
  "socketData": {
    "socketId": "zxFmIRKFLfKjZCRlAAAO",
    "reason": "client namespace disconnect"
  },
  "type": "socket"
}
14:53:44 [[36minfo[39m]: [36mSOCKET: client_connected[39m
{
  "socketEvent": "client_connected",
  "socketData": {
    "socketId": "1BbdSrlHvP2uiUDUAAAQ"
  },
  "type": "socket"
}
14:53:44 [[36minfo[39m]: [36mBUSINESS: player_joined[39m
{
  "module": "game",
  "userId": "1BbdSrlHvP2uiUDUAAAQ",
  "businessEvent": "player_joined",
  "businessData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "playerCount": 2
  },
  "type": "business"
}
14:53:44 [[36minfo[39m]: [36mSOCKET: admin_joined[39m
{
  "socketEvent": "admin_joined",
  "socketData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "socketId": "1BbdSrlHvP2uiUDUAAAQ"
  },
  "type": "socket"
}
14:53:45 [[36minfo[39m]: Realtime metrics recorded
14:54:05 [[36minfo[39m]: [36mSOCKET: client_disconnected[39m
{
  "socketEvent": "client_disconnected",
  "socketData": {
    "socketId": "1BbdSrlHvP2uiUDUAAAQ",
    "reason": "client namespace disconnect"
  },
  "type": "socket"
}
14:54:05 [[36minfo[39m]: [36mSOCKET: client_connected[39m
{
  "socketEvent": "client_connected",
  "socketData": {
    "socketId": "qUI55w468ECHpdecAAAS"
  },
  "type": "socket"
}
14:54:05 [[36minfo[39m]: [36mBUSINESS: player_joined[39m
{
  "module": "game",
  "userId": "qUI55w468ECHpdecAAAS",
  "businessEvent": "player_joined",
  "businessData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "playerCount": 2
  },
  "type": "business"
}
14:54:05 [[36minfo[39m]: [36mSOCKET: admin_joined[39m
{
  "socketEvent": "admin_joined",
  "socketData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "socketId": "qUI55w468ECHpdecAAAS"
  },
  "type": "socket"
}
14:54:15 [[36minfo[39m]: Realtime metrics recorded
14:54:22 [[36minfo[39m]: [36mSOCKET: client_disconnected[39m
{
  "socketEvent": "client_disconnected",
  "socketData": {
    "socketId": "qUI55w468ECHpdecAAAS",
    "reason": "client namespace disconnect"
  },
  "type": "socket"
}
14:54:22 [[36minfo[39m]: [36mSOCKET: client_connected[39m
{
  "socketEvent": "client_connected",
  "socketData": {
    "socketId": "e9XbLlFiOEWn8SywAAAU"
  },
  "type": "socket"
}
14:54:22 [[36minfo[39m]: [36mBUSINESS: player_joined[39m
{
  "module": "game",
  "userId": "e9XbLlFiOEWn8SywAAAU",
  "businessEvent": "player_joined",
  "businessData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "playerCount": 2
  },
  "type": "business"
}
14:54:22 [[36minfo[39m]: [36mSOCKET: admin_joined[39m
{
  "socketEvent": "admin_joined",
  "socketData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "socketId": "e9XbLlFiOEWn8SywAAAU"
  },
  "type": "socket"
}
14:54:37 [[36minfo[39m]: [36mSOCKET: client_disconnected[39m
{
  "socketEvent": "client_disconnected",
  "socketData": {
    "socketId": "e9XbLlFiOEWn8SywAAAU",
    "reason": "client namespace disconnect"
  },
  "type": "socket"
}
14:54:37 [[36minfo[39m]: [36mSOCKET: client_connected[39m
{
  "socketEvent": "client_connected",
  "socketData": {
    "socketId": "8TV1ARzIIHZFf75MAAAW"
  },
  "type": "socket"
}
14:54:37 [[36minfo[39m]: [36mBUSINESS: player_joined[39m
{
  "module": "game",
  "userId": "8TV1ARzIIHZFf75MAAAW",
  "businessEvent": "player_joined",
  "businessData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "playerCount": 2
  },
  "type": "business"
}
14:54:37 [[36minfo[39m]: [36mSOCKET: admin_joined[39m
{
  "socketEvent": "admin_joined",
  "socketData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "socketId": "8TV1ARzIIHZFf75MAAAW"
  },
  "type": "socket"
}
14:54:45 [[36minfo[39m]: Realtime metrics recorded
14:54:52 [[36minfo[39m]: [36mSOCKET: client_disconnected[39m
{
  "socketEvent": "client_disconnected",
  "socketData": {
    "socketId": "8TV1ARzIIHZFf75MAAAW",
    "reason": "client namespace disconnect"
  },
  "type": "socket"
}
14:54:52 [[36minfo[39m]: [36mSOCKET: client_connected[39m
{
  "socketEvent": "client_connected",
  "socketData": {
    "socketId": "S7AilbQEiQra1mXcAAAY"
  },
  "type": "socket"
}
14:54:52 [[36minfo[39m]: [36mBUSINESS: player_joined[39m
{
  "module": "game",
  "userId": "S7AilbQEiQra1mXcAAAY",
  "businessEvent": "player_joined",
  "businessData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "playerCount": 2
  },
  "type": "business"
}
14:54:52 [[36minfo[39m]: [36mSOCKET: admin_joined[39m
{
  "socketEvent": "admin_joined",
  "socketData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "socketId": "S7AilbQEiQra1mXcAAAY"
  },
  "type": "socket"
}
14:55:08 [[36minfo[39m]: [36mSOCKET: client_disconnected[39m
{
  "socketEvent": "client_disconnected",
  "socketData": {
    "socketId": "S7AilbQEiQra1mXcAAAY",
    "reason": "client namespace disconnect"
  },
  "type": "socket"
}
14:55:08 [[36minfo[39m]: [36mSOCKET: client_connected[39m
{
  "socketEvent": "client_connected",
  "socketData": {
    "socketId": "HI37G3U8x1lUn9p2AAAa"
  },
  "type": "socket"
}
14:55:08 [[36minfo[39m]: [36mBUSINESS: player_joined[39m
{
  "module": "game",
  "userId": "HI37G3U8x1lUn9p2AAAa",
  "businessEvent": "player_joined",
  "businessData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "playerCount": 2
  },
  "type": "business"
}
14:55:08 [[36minfo[39m]: [36mSOCKET: admin_joined[39m
{
  "socketEvent": "admin_joined",
  "socketData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "socketId": "HI37G3U8x1lUn9p2AAAa"
  },
  "type": "socket"
}
14:55:15 [[36minfo[39m]: Realtime metrics recorded
14:55:26 [[36minfo[39m]: [36mSOCKET: client_disconnected[39m
{
  "socketEvent": "client_disconnected",
  "socketData": {
    "socketId": "HI37G3U8x1lUn9p2AAAa",
    "reason": "client namespace disconnect"
  },
  "type": "socket"
}
14:55:26 [[36minfo[39m]: [36mSOCKET: client_connected[39m
{
  "socketEvent": "client_connected",
  "socketData": {
    "socketId": "IXlkc-hts1XhUaQ2AAAc"
  },
  "type": "socket"
}
14:55:26 [[36minfo[39m]: [36mBUSINESS: player_joined[39m
{
  "module": "game",
  "userId": "IXlkc-hts1XhUaQ2AAAc",
  "businessEvent": "player_joined",
  "businessData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "playerCount": 2
  },
  "type": "business"
}
14:55:26 [[36minfo[39m]: [36mSOCKET: admin_joined[39m
{
  "socketEvent": "admin_joined",
  "socketData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "socketId": "IXlkc-hts1XhUaQ2AAAc"
  },
  "type": "socket"
}
14:55:45 [[36minfo[39m]: Realtime metrics recorded
14:55:47 [[36minfo[39m]: [36mSOCKET: client_disconnected[39m
{
  "socketEvent": "client_disconnected",
  "socketData": {
    "socketId": "IXlkc-hts1XhUaQ2AAAc",
    "reason": "client namespace disconnect"
  },
  "type": "socket"
}
14:55:47 [[36minfo[39m]: [36mSOCKET: client_connected[39m
{
  "socketEvent": "client_connected",
  "socketData": {
    "socketId": "OeK3QXzKi3RMgZlCAAAe"
  },
  "type": "socket"
}
14:55:47 [[36minfo[39m]: [36mBUSINESS: player_joined[39m
{
  "module": "game",
  "userId": "OeK3QXzKi3RMgZlCAAAe",
  "businessEvent": "player_joined",
  "businessData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "playerCount": 2
  },
  "type": "business"
}
14:55:47 [[36minfo[39m]: [36mSOCKET: admin_joined[39m
{
  "socketEvent": "admin_joined",
  "socketData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "socketId": "OeK3QXzKi3RMgZlCAAAe"
  },
  "type": "socket"
}
14:56:15 [[36minfo[39m]: Realtime metrics recorded
14:56:22 [[36minfo[39m]: [36mSOCKET: client_disconnected[39m
{
  "socketEvent": "client_disconnected",
  "socketData": {
    "socketId": "OeK3QXzKi3RMgZlCAAAe",
    "reason": "transport close"
  },
  "type": "socket"
}
14:56:22 [[36minfo[39m]: [36mSOCKET: client_disconnected[39m
{
  "socketEvent": "client_disconnected",
  "socketData": {
    "socketId": "6x8knZC-gp8Bq5P5AAAD",
    "reason": "transport close"
  },
  "type": "socket"
}
prisma:query SELECT 1
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:56:25 [[36minfo[39m]: [36mHTTP GET / 200 20ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 20
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:56:25 [[36minfo[39m]: [36mHTTP GET /me 200 18ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 18
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:56:25 [[36minfo[39m]: [36mHTTP GET /me 200 6ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 6
  },
  "type": "http"
}
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
prisma:query SELECT 1
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:56:26 [[36minfo[39m]: [36mHTTP GET / 200 23ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 23
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:56:26 [[36minfo[39m]: [36mHTTP GET /me 200 27ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 27
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:56:26 [[36minfo[39m]: [36mHTTP GET /me 200 67ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 67
  },
  "type": "http"
}
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:56:37 [[36minfo[39m]: [36mHTTP GET / 200 11ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 11
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:56:37 [[36minfo[39m]: [36mHTTP GET /me 200 13ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 13
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:56:37 [[36minfo[39m]: [36mHTTP GET /me 200 6ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 6
  },
  "type": "http"
}
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
14:56:37 [[36minfo[39m]: [36mHTTP GET / 200 57ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 57
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:56:37 [[36minfo[39m]: [36mHTTP GET /me 200 11ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 11
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:56:37 [[36minfo[39m]: [36mHTTP GET /me 200 14ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 14
  },
  "type": "http"
}
14:56:45 [[36minfo[39m]: Realtime metrics recorded
prisma:query SELECT 1
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:56:59 [[36minfo[39m]: [36mHTTP GET / 200 8ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 8
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:56:59 [[36minfo[39m]: [36mHTTP GET /me 200 14ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 14
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:56:59 [[36minfo[39m]: [36mHTTP GET /me 200 7ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 7
  },
  "type": "http"
}
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
14:57:00 [[36minfo[39m]: [36mHTTP GET / 200 5ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 5
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:57:00 [[36minfo[39m]: [36mHTTP GET /me 200 42ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 42
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:57:00 [[36minfo[39m]: [36mHTTP GET /me 200 11ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 11
  },
  "type": "http"
}
14:57:15 [[36minfo[39m]: Realtime metrics recorded
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:57:17 [[36minfo[39m]: [36mHTTP GET / 200 7ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 7
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:57:17 [[36minfo[39m]: [36mHTTP GET /me 200 8ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 8
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:57:17 [[36minfo[39m]: [36mHTTP GET /me 200 28ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 28
  },
  "type": "http"
}
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
14:57:17 [[36minfo[39m]: [36mHTTP GET / 200 17ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 17
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:57:17 [[36minfo[39m]: [36mHTTP GET /me 200 4ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 4
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:57:17 [[36minfo[39m]: [36mHTTP GET /me 200 19ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 19
  },
  "type": "http"
}
14:57:45 [[36minfo[39m]: Realtime metrics recorded
prisma:query SELECT 1
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
prisma:query SELECT 1
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:57:50 [[36minfo[39m]: [36mHTTP GET / 200 31ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 31
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:57:50 [[36minfo[39m]: [36mHTTP GET /me 200 33ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 33
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:57:50 [[36minfo[39m]: [36mHTTP GET /me 200 4ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 4
  },
  "type": "http"
}
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
14:57:50 [[36minfo[39m]: [36mHTTP GET / 200 3ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 3
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:57:50 [[36minfo[39m]: [36mHTTP GET /me 200 4ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 4
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:57:50 [[36minfo[39m]: [36mHTTP GET /me 200 14ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 14
  },
  "type": "http"
}
prisma:query SELECT 1
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
14:58:11 [[36minfo[39m]: [36mHTTP GET / 200 1ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 1
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:58:11 [[36minfo[39m]: [36mHTTP GET /me 200 3ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 3
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:58:11 [[36minfo[39m]: [36mHTTP GET /me 200 4ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 4
  },
  "type": "http"
}
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
14:58:11 [[36minfo[39m]: [36mHTTP GET / 200 22ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 22
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:58:11 [[36minfo[39m]: [36mHTTP GET /me 200 40ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 40
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:58:11 [[36minfo[39m]: [36mHTTP GET /me 200 4ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 4
  },
  "type": "http"
}
14:58:15 [[36minfo[39m]: Realtime metrics recorded
prisma:query SELECT 1
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
14:58:27 [[36minfo[39m]: [36mHTTP GET / 200 10ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 10
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:58:27 [[36minfo[39m]: [36mHTTP GET /me 200 120ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 120
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:58:27 [[36minfo[39m]: [36mHTTP GET /me 200 4ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 4
  },
  "type": "http"
}
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
14:58:28 [[36minfo[39m]: [36mHTTP GET / 200 8ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 8
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:58:28 [[36minfo[39m]: [36mHTTP GET /me 200 11ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 11
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:58:28 [[36minfo[39m]: [36mHTTP GET /me 200 4ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 4
  },
  "type": "http"
}
14:58:45 [[36minfo[39m]: Realtime metrics recorded
14:59:15 [[36minfo[39m]: Realtime metrics recorded
prisma:query SELECT 1
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
14:59:37 [[36minfo[39m]: [36mHTTP GET / 200 22ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 22
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`email` = ? OR `main`.`users`.`username` = ?) LIMIT ? OFFSET ?
14:59:40 [[35maudit[39m]: [35mAUDIT: login_attempt on user_session[39m
{
  "module": "auth",
  "ip": "::1",
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "auditEvent": {
    "action": "login_attempt",
    "resource": "user_session",
    "userId": "admin",
    "success": false,
    "reason": "invalid_credentials"
  }
}
14:59:40 [[33mwarn[39m]: [33mHTTP POST /login 401 389ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "POST",
    "url": "/login",
    "statusCode": 401,
    "responseTime": 389
  },
  "type": "http"
}
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
14:59:40 [[36minfo[39m]: [36mHTTP GET / 200 8ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 8
  },
  "type": "http"
}
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
14:59:42 [[36minfo[39m]: [36mHTTP GET / 200 4ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 4
  },
  "type": "http"
}
14:59:45 [[36minfo[39m]: Realtime metrics recorded
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
14:59:46 [[36minfo[39m]: [36mHTTP GET / 200 3ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 3
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`email` = ? OR `main`.`users`.`username` = ?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
14:59:51 [[36minfo[39m]: Tokens generados para usuario: jugador@test.com
14:59:51 [[35maudit[39m]: [35mAUDIT: login_attempt on user_session[39m
{
  "module": "auth",
  "ip": "::1",
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "auditEvent": {
    "action": "login_attempt",
    "resource": "user_session",
    "userId": "jugador@test.com",
    "success": true,
    "reason": "valid_credentials"
  }
}
14:59:51 [[36minfo[39m]: [36mHTTP POST /login 200 391ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "POST",
    "url": "/login",
    "statusCode": 200,
    "responseTime": 391
  },
  "type": "http"
}
14:59:54 [[36minfo[39m]: [36mHTTP GET /balance 200 112ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 112
  },
  "type": "http"
}
14:59:54 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 64
}
14:59:54 [[36minfo[39m]: [36mHTTP GET /transactions 200 54ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/transactions",
    "statusCode": 200,
    "responseTime": 54
  },
  "type": "http"
}
14:59:54 [[36minfo[39m]: [36mHistorial de transacciones consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "limit": 15,
  "offset": 0,
  "resultCount": 10
}
14:59:54 [[36minfo[39m]: [36mHTTP GET /balance 200 7ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 7
  },
  "type": "http"
}
14:59:54 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 64
}
14:59:54 [[36minfo[39m]: [36mHTTP GET /transactions 200 7ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/transactions",
    "statusCode": 200,
    "responseTime": 7
  },
  "type": "http"
}
14:59:54 [[36minfo[39m]: [36mHistorial de transacciones consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "limit": 15,
  "offset": 0,
  "resultCount": 10
}
14:59:54 [[36minfo[39m]: [36mHTTP GET /balance 200 29ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 29
  },
  "type": "http"
}
14:59:54 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 64
}
14:59:54 [[36minfo[39m]: [36mHTTP GET /balance 200 8ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 8
  },
  "type": "http"
}
14:59:54 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 64
}
14:59:56 [[36minfo[39m]: [36mHTTP GET /balance 200 25ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 25
  },
  "type": "http"
}
14:59:56 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 64
}
prisma:query SELECT 1
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt` FROM `main`.`games` WHERE (`main`.`games`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`wallets`.`id`, `main`.`wallets`.`userId`, `main`.`wallets`.`balance`, `main`.`wallets`.`dailyLimit`, `main`.`wallets`.`monthlyLimit`, `main`.`wallets`.`isActive`, `main`.`wallets`.`isFrozen`, `main`.`wallets`.`createdAt`, `main`.`wallets`.`updatedAt` FROM `main`.`wallets` WHERE (`main`.`wallets`.`userId` = ? AND 1=1) LIMIT ? OFFSET ?
14:59:56 [[36minfo[39m]: [36mHTTP GET /validate/:gameId/:cardCount? 200 34ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/validate/:gameId/:cardCount?",
    "statusCode": 200,
    "responseTime": 34
  },
  "type": "http"
}
prisma:query BEGIN IMMEDIATE
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE (`main`.`games`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`wallets`.`id`, `main`.`wallets`.`userId`, `main`.`wallets`.`balance`, `main`.`wallets`.`dailyLimit`, `main`.`wallets`.`monthlyLimit`, `main`.`wallets`.`isActive`, `main`.`wallets`.`isFrozen`, `main`.`wallets`.`createdAt`, `main`.`wallets`.`updatedAt` FROM `main`.`wallets` WHERE (`main`.`wallets`.`userId` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`game_participants`.`id`, `main`.`game_participants`.`userId`, `main`.`game_participants`.`gameId`, `main`.`game_participants`.`joinedAt`, `main`.`game_participants`.`cardsCount`, `main`.`game_participants`.`totalSpent`, `main`.`game_participants`.`hasWon`, `main`.`game_participants`.`prizeWon` FROM `main`.`game_participants` WHERE ((`main`.`game_participants`.`userId` = ? AND `main`.`game_participants`.`gameId` = ?) AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT COUNT(*) FROM (SELECT `main`.`bingo_cards`.`id` FROM `main`.`bingo_cards` WHERE (`main`.`bingo_cards`.`userId` = ? AND `main`.`bingo_cards`.`gameId` = ?) LIMIT ? OFFSET ?) AS `sub`
prisma:query ROLLBACK
14:59:58 [[31merror[39m]: [31mError comprando cartones con Perlas[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "gameId": "cme3boc9t000e131on2iaxg19",
  "cardCount": 1,
  "error": {
    "message": "No puedes tener m√°s de 3 cartones por juego. Ya tienes 3",
    "stack": "Error: No puedes tener m√°s de 3 cartones por juego. Ya tienes 3\n    at /Users/osmanmarin/Documents/Bingo-deploy/backend/src/services/gamePurchaseService.ts:106:17\n    at async Proxy._transactionWithCallback (/Users/osmanmarin/Documents/Bingo-deploy/node_modules/@prisma/client/runtime/library.js:130:8000)\n    at async Function.purchaseCardsWithPearls (/Users/osmanmarin/Documents/Bingo-deploy/backend/src/services/gamePurchaseService.ts:42:22)\n    at async purchaseCards (/Users/osmanmarin/Documents/Bingo-deploy/backend/src/controllers/gamePurchaseController.ts:36:22)",
    "name": "Error"
  }
}
14:59:58 [[31merror[39m]: [31mError comprando cartones con Perlas[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "gameId": "cme3boc9t000e131on2iaxg19",
  "cardCount": 1,
  "error": {
    "message": "No puedes tener m√°s de 3 cartones por juego. Ya tienes 3",
    "stack": "Error: No puedes tener m√°s de 3 cartones por juego. Ya tienes 3\n    at /Users/osmanmarin/Documents/Bingo-deploy/backend/src/services/gamePurchaseService.ts:106:17\n    at async Proxy._transactionWithCallback (/Users/osmanmarin/Documents/Bingo-deploy/node_modules/@prisma/client/runtime/library.js:130:8000)\n    at async Function.purchaseCardsWithPearls (/Users/osmanmarin/Documents/Bingo-deploy/backend/src/services/gamePurchaseService.ts:42:22)\n    at async purchaseCards (/Users/osmanmarin/Documents/Bingo-deploy/backend/src/controllers/gamePurchaseController.ts:36:22)",
    "name": "Error"
  }
}
14:59:58 [[33mwarn[39m]: [33mHTTP POST /cards 409 124ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "POST",
    "url": "/cards",
    "statusCode": 409,
    "responseTime": 124
  },
  "type": "http"
}
15:00:15 [[36minfo[39m]: Realtime metrics recorded
15:00:45 [[36minfo[39m]: Realtime metrics recorded
15:01:15 [[36minfo[39m]: Realtime metrics recorded
prisma:query SELECT 1
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
15:01:34 [[36minfo[39m]: [36mHTTP GET / 200 21ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 21
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`email` = ? OR `main`.`users`.`username` = ?) LIMIT ? OFFSET ?
15:01:36 [[35maudit[39m]: [35mAUDIT: login_attempt on user_session[39m
{
  "module": "auth",
  "ip": "::1",
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "auditEvent": {
    "action": "login_attempt",
    "resource": "user_session",
    "userId": "admin",
    "success": false,
    "reason": "invalid_credentials"
  }
}
15:01:36 [[33mwarn[39m]: [33mHTTP POST /login 401 514ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "POST",
    "url": "/login",
    "statusCode": 401,
    "responseTime": 514
  },
  "type": "http"
}
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
15:01:37 [[36minfo[39m]: [36mHTTP GET / 200 3ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 3
  },
  "type": "http"
}
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
15:01:39 [[36minfo[39m]: [36mHTTP GET / 200 5ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 5
  },
  "type": "http"
}
15:01:45 [[36minfo[39m]: Realtime metrics recorded
15:02:15 [[36minfo[39m]: Realtime metrics recorded
15:02:45 [[36minfo[39m]: Realtime metrics recorded
prisma:query SELECT 1
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
15:03:04 [[36minfo[39m]: [36mHTTP GET / 200 7ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 7
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`email` = ? OR `main`.`users`.`username` = ?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:03:07 [[36minfo[39m]: Tokens generados para usuario: admin@bingo-la-perla.com
15:03:07 [[35maudit[39m]: [35mAUDIT: login_attempt on user_session[39m
{
  "module": "auth",
  "ip": "::1",
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "auditEvent": {
    "action": "login_attempt",
    "resource": "user_session",
    "userId": "admin@bingo-la-perla.com",
    "success": true,
    "reason": "valid_credentials"
  }
}
15:03:07 [[36minfo[39m]: [36mHTTP POST /login 200 339ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "POST",
    "url": "/login",
    "statusCode": 200,
    "responseTime": 339
  },
  "type": "http"
}
15:03:15 [[36minfo[39m]: Realtime metrics recorded
15:03:45 [[36minfo[39m]: Realtime metrics recorded
15:04:15 [[36minfo[39m]: Realtime metrics recorded
15:04:45 [[36minfo[39m]: Realtime metrics recorded
prisma:query SELECT 1
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`email` = ? OR `main`.`users`.`username` = ?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:05:04 [[36minfo[39m]: Tokens generados para usuario: admin@bingo-la-perla.com
15:05:04 [[35maudit[39m]: [35mAUDIT: login_attempt on user_session[39m
{
  "module": "auth",
  "ip": "::1",
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "auditEvent": {
    "action": "login_attempt",
    "resource": "user_session",
    "userId": "admin@bingo-la-perla.com",
    "success": true,
    "reason": "valid_credentials"
  }
}
15:05:04 [[36minfo[39m]: [36mHTTP POST /login 200 394ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "POST",
    "url": "/login",
    "statusCode": 200,
    "responseTime": 394
  },
  "type": "http"
}
15:05:06 [[36minfo[39m]: [36mSOCKET: client_connected[39m
{
  "socketEvent": "client_connected",
  "socketData": {
    "socketId": "0y7NNAVpUqmkt1p5AAAi"
  },
  "type": "socket"
}
15:05:06 [[36minfo[39m]: [36mBUSINESS: player_joined[39m
{
  "module": "game",
  "userId": "0y7NNAVpUqmkt1p5AAAi",
  "businessEvent": "player_joined",
  "businessData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "playerCount": 1
  },
  "type": "business"
}
15:05:06 [[36minfo[39m]: [36mSOCKET: admin_joined[39m
{
  "socketEvent": "admin_joined",
  "socketData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "socketId": "0y7NNAVpUqmkt1p5AAAi"
  },
  "type": "socket"
}
15:05:15 [[36minfo[39m]: Realtime metrics recorded
15:05:15 [[36minfo[39m]: [36mBUSINESS: admin_reset_game[39m
{
  "gameId": "cme3boc9t000e131on2iaxg19",
  "businessEvent": "admin_reset_game",
  "businessData": {},
  "type": "business"
}
prisma:query SELECT 1
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`email` = ? OR `main`.`users`.`username` = ?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:05:21 [[36minfo[39m]: Tokens generados para usuario: jugador@test.com
15:05:21 [[35maudit[39m]: [35mAUDIT: login_attempt on user_session[39m
{
  "module": "auth",
  "ip": "::1",
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "auditEvent": {
    "action": "login_attempt",
    "resource": "user_session",
    "userId": "jugador@test.com",
    "success": true,
    "reason": "valid_credentials"
  }
}
15:05:21 [[36minfo[39m]: [36mHTTP POST /login 200 318ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "POST",
    "url": "/login",
    "statusCode": 200,
    "responseTime": 318
  },
  "type": "http"
}
prisma:query SELECT `main`.`bingo_cards`.`id`, `main`.`bingo_cards`.`userId`, `main`.`bingo_cards`.`gameId`, `main`.`bingo_cards`.`cardNumber`, `main`.`bingo_cards`.`isActive`, `main`.`bingo_cards`.`markedNumbers`, `main`.`bingo_cards`.`isWinner`, `main`.`bingo_cards`.`winningPattern`, `main`.`bingo_cards`.`createdAt`, `main`.`bingo_cards`.`updatedAt` FROM `main`.`bingo_cards` WHERE (`main`.`bingo_cards`.`userId` = ? AND `main`.`bingo_cards`.`isActive` = ?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`cardPrice`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`totalPrize`, `main`.`games`.`maxPlayers`, `main`.`games`.`description`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE `main`.`games`.`id` IN (?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`card_numbers`.`id`, `main`.`card_numbers`.`cardId`, `main`.`card_numbers`.`position`, `main`.`card_numbers`.`column`, `main`.`card_numbers`.`number`, `main`.`card_numbers`.`isMarked`, `main`.`card_numbers`.`isFree` FROM `main`.`card_numbers` WHERE `main`.`card_numbers`.`cardId` IN (?,?,?,?) ORDER BY `main`.`card_numbers`.`position` ASC LIMIT ? OFFSET ?
15:05:24 [[36minfo[39m]: [36mHTTP GET /balance 200 5ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 5
  },
  "type": "http"
}
15:05:24 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 64
}
15:05:24 [[36minfo[39m]: [36mHTTP GET /my-all 200 16ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/my-all",
    "statusCode": 200,
    "responseTime": 16
  },
  "type": "http"
}
15:05:24 [[36minfo[39m]: [36mHTTP GET /balance 200 4ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 4
  },
  "type": "http"
}
15:05:24 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 64
}
15:05:26 [[36minfo[39m]: [36mSOCKET: client_connected[39m
{
  "socketEvent": "client_connected",
  "socketData": {
    "socketId": "GchX1k4tss2fO2jkAAAk"
  },
  "type": "socket"
}
15:05:26 [[36minfo[39m]: [36mBUSINESS: player_joined[39m
{
  "module": "game",
  "userId": "GchX1k4tss2fO2jkAAAk",
  "businessEvent": "player_joined",
  "businessData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "playerCount": 2
  },
  "type": "business"
}
15:05:37 [[36minfo[39m]: [36mBUSINESS: admin_toggle_game[39m
{
  "gameId": "cme3boc9t000e131on2iaxg19",
  "businessEvent": "admin_toggle_game",
  "businessData": {
    "status": "paused"
  },
  "type": "business"
}
15:05:39 [[36minfo[39m]: [36mBUSINESS: admin_reset_game[39m
{
  "gameId": "cme3boc9t000e131on2iaxg19",
  "businessEvent": "admin_reset_game",
  "businessData": {},
  "type": "business"
}
15:05:43 [[36minfo[39m]: [36mBUSINESS: admin_set_pattern[39m
{
  "gameId": "cme3boc9t000e131on2iaxg19",
  "businessEvent": "admin_set_pattern",
  "businessData": {
    "pattern": "full"
  },
  "type": "business"
}
15:05:45 [[36minfo[39m]: [36mBUSINESS: admin_reset_game[39m
{
  "gameId": "cme3boc9t000e131on2iaxg19",
  "businessEvent": "admin_reset_game",
  "businessData": {},
  "type": "business"
}
15:05:45 [[36minfo[39m]: Realtime metrics recorded
15:06:15 [[36minfo[39m]: Realtime metrics recorded
15:06:45 [[36minfo[39m]: Realtime metrics recorded
15:07:15 [[36minfo[39m]: Realtime metrics recorded
15:07:45 [[36minfo[39m]: Realtime metrics recorded
15:08:15 [[36minfo[39m]: Realtime metrics recorded
15:08:45 [[36minfo[39m]: Realtime metrics recorded
15:09:15 [[36minfo[39m]: Realtime metrics recorded
15:09:45 [[36minfo[39m]: Realtime metrics recorded
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `ts-node -r tsconfig-paths/register src/server.ts src/server.ts`[39m
15:10:11 [[36minfo[39m]: [36mSystem metrics collection started[39m
{
  "module": "performance",
  "interval": 30000
}
15:10:12 [[36minfo[39m]: [36mOpenpay configuration validated successfully (MOCK MODE)[39m
{
  "merchantId": "mock_merchant_12345",
  "production": false,
  "mockMode": true,
  "mockDelayMs": 1000,
  "mockSuccessRate": 0.95,
  "country": "PE"
}
15:10:12 [[36minfo[39m]: [36mOpenpay configuration validated successfully (MOCK MODE)[39m
{
  "merchantId": "mock_merchant_12345",
  "production": false,
  "mockMode": true,
  "mockDelayMs": 1000,
  "mockSuccessRate": 0.95,
  "country": "PE"
}
15:10:12 [[36minfo[39m]: [36mConnecting to databases...[39m
15:10:12 [[36minfo[39m]: ‚úÖ Conexi√≥n a PostgreSQL establecida exitosamente
prisma:query SELECT 1
15:10:12 [[36minfo[39m]: ‚úÖ Base de datos PostgreSQL funcionando correctamente
15:10:12 [[31merror[39m]: AggregateError
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1714:7)
15:10:12 [[31merror[39m]: AggregateError
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1714:7)
15:10:12 [[33mwarn[39m]: ‚ö†Ô∏è Continuando sin Redis para desarrollo
15:10:12 [[36minfo[39m]: [36mInitializing report scheduler...[39m
15:10:12 [[36minfo[39m]: [36mInitializing scheduler service[39m
{
  "module": "analytics"
}
15:10:12 [[36minfo[39m]: [36mTask scheduled successfully[39m
{
  "module": "analytics",
  "taskId": "kpi-alerts-hourly",
  "type": "kpi-alerts",
  "frequency": "daily",
  "nextRun": "2025-08-12T21:00:00.000Z",
  "timeUntilRun": 2987504
}
15:10:12 [[36minfo[39m]: [36mTask scheduled successfully[39m
{
  "module": "analytics",
  "taskId": "daily-report-auto",
  "type": "daily",
  "frequency": "daily",
  "nextRun": "2025-08-13T13:00:00.000Z",
  "timeUntilRun": 60587503
}
15:10:12 [[36minfo[39m]: [36mTask scheduled successfully[39m
{
  "module": "analytics",
  "taskId": "weekly-report-auto",
  "type": "weekly",
  "frequency": "weekly",
  "nextRun": "2025-08-18T14:00:00.000Z",
  "timeUntilRun": 496187503
}
15:10:12 [[36minfo[39m]: [36mTask scheduled successfully[39m
{
  "module": "analytics",
  "taskId": "monthly-report-auto",
  "type": "monthly",
  "frequency": "monthly",
  "nextRun": "2025-09-01T15:00:00.000Z",
  "timeUntilRun": 1709387503
}
15:10:12 [[36minfo[39m]: [36mScheduler service initialized successfully[39m
{
  "module": "analytics",
  "tasksCount": 4
}
15:10:12 [[36minfo[39m]: [36mServer started successfully[39m
{
  "port": 3001,
  "environment": "development",
  "frontendUrl": "http://localhost:5173",
  "features": [
    "HTTP",
    "Socket.IO",
    "CORS",
    "Analytics",
    "Reports",
    "Scheduler"
  ]
}
15:10:16 [[36minfo[39m]: [36mSOCKET: client_connected[39m
{
  "socketEvent": "client_connected",
  "socketData": {
    "socketId": "c89SayAlyI5W_8u0AAAB"
  },
  "type": "socket"
}
15:10:16 [[36minfo[39m]: [36mBUSINESS: player_joined[39m
{
  "module": "game",
  "userId": "c89SayAlyI5W_8u0AAAB",
  "businessEvent": "player_joined",
  "businessData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "playerCount": 1
  },
  "type": "business"
}
15:10:16 [[36minfo[39m]: [36mSOCKET: admin_joined[39m
{
  "socketEvent": "admin_joined",
  "socketData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "socketId": "c89SayAlyI5W_8u0AAAB"
  },
  "type": "socket"
}
15:10:16 [[36minfo[39m]: [36mSOCKET: client_connected[39m
{
  "socketEvent": "client_connected",
  "socketData": {
    "socketId": "8pHuQ0qGRbu6hbklAAAD"
  },
  "type": "socket"
}
15:10:16 [[36minfo[39m]: [36mBUSINESS: player_joined[39m
{
  "module": "game",
  "userId": "8pHuQ0qGRbu6hbklAAAD",
  "businessEvent": "player_joined",
  "businessData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "playerCount": 2
  },
  "type": "business"
}
15:10:41 [[36minfo[39m]: Realtime metrics recorded
15:11:11 [[36minfo[39m]: Realtime metrics recorded
15:11:41 [[36minfo[39m]: Realtime metrics recorded
15:12:07 [[36minfo[39m]: [36mSOCKET: client_disconnected[39m
{
  "socketEvent": "client_disconnected",
  "socketData": {
    "socketId": "8pHuQ0qGRbu6hbklAAAD",
    "reason": "transport close"
  },
  "type": "socket"
}
15:12:07 [[36minfo[39m]: [36mSOCKET: client_disconnected[39m
{
  "socketEvent": "client_disconnected",
  "socketData": {
    "socketId": "c89SayAlyI5W_8u0AAAB",
    "reason": "transport close"
  },
  "type": "socket"
}
prisma:query SELECT 1
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
15:12:10 [[36minfo[39m]: [36mHTTP GET / 200 34ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 34
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:12:11 [[36minfo[39m]: [36mHTTP GET /me 200 380ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 380
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:12:11 [[36minfo[39m]: [36mHTTP GET /me 200 9ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 9
  },
  "type": "http"
}
15:12:11 [[36minfo[39m]: Realtime metrics recorded
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
15:12:12 [[36minfo[39m]: [36mHTTP GET / 200 15ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 15
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:12:12 [[36minfo[39m]: [36mHTTP GET /me 200 16ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 16
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:12:12 [[36minfo[39m]: [36mHTTP GET /me 200 16ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 16
  },
  "type": "http"
}
prisma:query SELECT 1
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
15:12:27 [[36minfo[39m]: [36mHTTP GET / 200 42ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 42
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:12:27 [[36minfo[39m]: [36mHTTP GET /me 200 47ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 47
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:12:27 [[36minfo[39m]: [36mHTTP GET /me 200 5ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 5
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:12:28 [[36minfo[39m]: [36mHTTP GET /me 200 47ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 47
  },
  "type": "http"
}
15:12:28 [[36minfo[39m]: [36mHTTP GET / 200 2ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 2
  },
  "type": "http"
}
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:12:28 [[36minfo[39m]: [36mHTTP GET /me 200 4ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 4
  },
  "type": "http"
}
15:12:41 [[36minfo[39m]: Realtime metrics recorded
prisma:query SELECT 1
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
15:12:47 [[36minfo[39m]: [36mHTTP GET / 200 5ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 5
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:12:47 [[36minfo[39m]: [36mHTTP GET /me 200 17ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 17
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:12:47 [[36minfo[39m]: [36mHTTP GET /me 200 5ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 5
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT 1
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:12:49 [[36minfo[39m]: [36mHTTP GET / 200 3ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 3
  },
  "type": "http"
}
15:12:49 [[36minfo[39m]: [36mHTTP GET /me 200 8ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 8
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:12:49 [[36minfo[39m]: [36mHTTP GET /me 200 11ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 11
  },
  "type": "http"
}
15:13:11 [[36minfo[39m]: Realtime metrics recorded
15:13:41 [[36minfo[39m]: Realtime metrics recorded
prisma:query SELECT 1
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
15:13:53 [[36minfo[39m]: [36mHTTP GET / 200 14ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 14
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:13:53 [[36minfo[39m]: [36mHTTP GET /me 200 23ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 23
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:13:53 [[36minfo[39m]: [36mHTTP GET /me 200 5ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 5
  },
  "type": "http"
}
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
15:13:55 [[36minfo[39m]: [36mHTTP GET / 200 17ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 17
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:13:55 [[36minfo[39m]: [36mHTTP GET /me 200 6ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 6
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:13:55 [[36minfo[39m]: [36mHTTP GET /me 200 4ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 4
  },
  "type": "http"
}
15:14:11 [[36minfo[39m]: Realtime metrics recorded
prisma:query SELECT 1
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:14:36 [[36minfo[39m]: [36mHTTP GET / 200 17ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 17
  },
  "type": "http"
}
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:14:36 [[36minfo[39m]: [36mHTTP GET /me 200 43ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 43
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:14:36 [[36minfo[39m]: [36mHTTP GET /me 200 7ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 7
  },
  "type": "http"
}
prisma:query SELECT 1
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
15:14:38 [[36minfo[39m]: [36mHTTP GET / 200 18ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 18
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:14:38 [[36minfo[39m]: [36mHTTP GET /me 200 31ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 31
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:14:38 [[36minfo[39m]: [36mHTTP GET /me 200 10ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 10
  },
  "type": "http"
}
15:14:41 [[36minfo[39m]: Realtime metrics recorded
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
15:14:50 [[36minfo[39m]: [36mHTTP GET / 200 3ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 3
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:14:50 [[36minfo[39m]: [36mHTTP GET /me 200 11ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 11
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:14:50 [[36minfo[39m]: [36mHTTP GET /me 200 4ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 4
  },
  "type": "http"
}
prisma:query SELECT 1
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
15:14:52 [[36minfo[39m]: [36mHTTP GET / 200 16ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 16
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:14:52 [[36minfo[39m]: [36mHTTP GET /me 200 6ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 6
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:14:52 [[36minfo[39m]: [36mHTTP GET /me 200 7ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 7
  },
  "type": "http"
}
prisma:query SELECT 1
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:15:10 [[36minfo[39m]: [36mHTTP GET / 200 8ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 8
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:15:10 [[36minfo[39m]: [36mHTTP GET /me 200 27ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 27
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:15:10 [[36minfo[39m]: [36mHTTP GET /me 200 15ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 15
  },
  "type": "http"
}
15:15:11 [[36minfo[39m]: Realtime metrics recorded
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
15:15:11 [[36minfo[39m]: [36mHTTP GET / 200 3ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 3
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:15:11 [[36minfo[39m]: [36mHTTP GET /me 200 4ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 4
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:15:11 [[36minfo[39m]: [36mHTTP GET /me 200 14ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 14
  },
  "type": "http"
}
15:15:41 [[36minfo[39m]: Realtime metrics recorded
prisma:query SELECT 1
prisma:query SELECT 1
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
15:16:03 [[36minfo[39m]: [36mHTTP GET /me 200 38ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 38
  },
  "type": "http"
}
15:16:03 [[36minfo[39m]: [36mHTTP GET / 200 28ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 28
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:16:03 [[36minfo[39m]: [36mHTTP GET /me 200 14ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 14
  },
  "type": "http"
}
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE 1=1 ORDER BY `main`.`games`.`scheduledAt` ASC LIMIT ? OFFSET ?
15:16:07 [[36minfo[39m]: [36mHTTP GET / 200 25ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/",
    "statusCode": 200,
    "responseTime": 25
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:16:07 [[36minfo[39m]: [36mHTTP GET /me 200 4ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 4
  },
  "type": "http"
}
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:16:07 [[36minfo[39m]: [36mHTTP GET /me 200 8ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/me",
    "statusCode": 200,
    "responseTime": 8
  },
  "type": "http"
}
15:16:11 [[36minfo[39m]: Realtime metrics recorded
15:16:41 [[36minfo[39m]: Realtime metrics recorded
prisma:query SELECT 1
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`email` = ? OR `main`.`users`.`username` = ?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`users`.`id`, `main`.`users`.`email`, `main`.`users`.`username`, `main`.`users`.`password`, `main`.`users`.`role`, `main`.`users`.`balance`, `main`.`users`.`pearlsBalance`, `main`.`users`.`createdAt`, `main`.`users`.`updatedAt`, `main`.`users`.`isActive`, `main`.`users`.`isVerified`, `main`.`users`.`fullName`, `main`.`users`.`phone`, `main`.`users`.`dni`, `main`.`users`.`birthDate` FROM `main`.`users` WHERE (`main`.`users`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
15:16:59 [[36minfo[39m]: Tokens generados para usuario: jugador@test.com
15:16:59 [[35maudit[39m]: [35mAUDIT: login_attempt on user_session[39m
{
  "module": "auth",
  "ip": "::1",
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "auditEvent": {
    "action": "login_attempt",
    "resource": "user_session",
    "userId": "jugador@test.com",
    "success": true,
    "reason": "valid_credentials"
  }
}
15:16:59 [[36minfo[39m]: [36mHTTP POST /login 200 518ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "POST",
    "url": "/login",
    "statusCode": 200,
    "responseTime": 518
  },
  "type": "http"
}
prisma:query SELECT `main`.`bingo_cards`.`id`, `main`.`bingo_cards`.`userId`, `main`.`bingo_cards`.`gameId`, `main`.`bingo_cards`.`cardNumber`, `main`.`bingo_cards`.`isActive`, `main`.`bingo_cards`.`markedNumbers`, `main`.`bingo_cards`.`isWinner`, `main`.`bingo_cards`.`winningPattern`, `main`.`bingo_cards`.`createdAt`, `main`.`bingo_cards`.`updatedAt` FROM `main`.`bingo_cards` WHERE (`main`.`bingo_cards`.`userId` = ? AND `main`.`bingo_cards`.`isActive` = ?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`cardPrice`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`totalPrize`, `main`.`games`.`maxPlayers`, `main`.`games`.`description`, COALESCE(`aggr_selection_0_GameParticipant`.`_aggr_count_participants`, 0) AS `_aggr_count_participants` FROM `main`.`games` LEFT JOIN (SELECT `main`.`game_participants`.`gameId`, COUNT(*) AS `_aggr_count_participants` FROM `main`.`game_participants` WHERE 1=1 GROUP BY `main`.`game_participants`.`gameId`) AS `aggr_selection_0_GameParticipant` ON (`main`.`games`.`id` = `aggr_selection_0_GameParticipant`.`gameId`) WHERE `main`.`games`.`id` IN (?,?) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`card_numbers`.`id`, `main`.`card_numbers`.`cardId`, `main`.`card_numbers`.`position`, `main`.`card_numbers`.`column`, `main`.`card_numbers`.`number`, `main`.`card_numbers`.`isMarked`, `main`.`card_numbers`.`isFree` FROM `main`.`card_numbers` WHERE `main`.`card_numbers`.`cardId` IN (?,?,?,?) ORDER BY `main`.`card_numbers`.`position` ASC LIMIT ? OFFSET ?
15:17:01 [[36minfo[39m]: [36mHTTP GET /my-all 200 23ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/my-all",
    "statusCode": 200,
    "responseTime": 23
  },
  "type": "http"
}
15:17:01 [[36minfo[39m]: [36mHTTP GET /balance 200 20ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 20
  },
  "type": "http"
}
15:17:01 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 64
}
15:17:01 [[36minfo[39m]: [36mHTTP GET /balance 200 3ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 3
  },
  "type": "http"
}
15:17:01 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 64
}
15:17:05 [[36minfo[39m]: [36mSOCKET: client_connected[39m
{
  "socketEvent": "client_connected",
  "socketData": {
    "socketId": "qPJHqkyfazxwm6ZAAAAF"
  },
  "type": "socket"
}
15:17:05 [[36minfo[39m]: [36mBUSINESS: player_joined[39m
{
  "module": "game",
  "userId": "qPJHqkyfazxwm6ZAAAAF",
  "businessEvent": "player_joined",
  "businessData": {
    "gameId": "cme3boc9t000e131on2iaxg19",
    "playerCount": 1
  },
  "type": "business"
}
15:17:11 [[36minfo[39m]: Realtime metrics recorded
15:17:11 [[36minfo[39m]: [36mSOCKET: client_disconnected[39m
{
  "socketEvent": "client_disconnected",
  "socketData": {
    "socketId": "qPJHqkyfazxwm6ZAAAAF",
    "reason": "client namespace disconnect"
  },
  "type": "socket"
}
15:17:11 [[36minfo[39m]: [36mHTTP GET /balance 200 5ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 5
  },
  "type": "http"
}
15:17:11 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 64
}
15:17:11 [[36minfo[39m]: [36mHTTP GET /balance 200 4ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 4
  },
  "type": "http"
}
15:17:11 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 64
}
15:17:27 [[36minfo[39m]: [36mHTTP GET /balance 200 102ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 102
  },
  "type": "http"
}
15:17:27 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 64
}
15:17:27 [[36minfo[39m]: [36mHTTP GET /transactions 200 39ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/transactions",
    "statusCode": 200,
    "responseTime": 39
  },
  "type": "http"
}
15:17:27 [[36minfo[39m]: [36mHistorial de transacciones consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "limit": 15,
  "offset": 0,
  "resultCount": 10
}
15:17:27 [[36minfo[39m]: [36mHTTP GET /balance 200 6ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 6
  },
  "type": "http"
}
15:17:27 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 64
}
15:17:27 [[36minfo[39m]: [36mHTTP GET /transactions 200 7ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/transactions",
    "statusCode": 200,
    "responseTime": 7
  },
  "type": "http"
}
15:17:27 [[36minfo[39m]: [36mHistorial de transacciones consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "limit": 15,
  "offset": 0,
  "resultCount": 10
}
15:17:27 [[36minfo[39m]: [36mHTTP GET /balance 200 4ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 4
  },
  "type": "http"
}
15:17:27 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 64
}
15:17:27 [[36minfo[39m]: [36mHTTP GET /balance 200 11ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 11
  },
  "type": "http"
}
15:17:27 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 64
}
15:17:31 [[36minfo[39m]: [36mHTTP GET /balance 200 21ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/balance",
    "statusCode": 200,
    "responseTime": 21
  },
  "type": "http"
}
15:17:31 [[36minfo[39m]: [36mBalance consultado[39m
{
  "userId": "cme3boc9d0001131ojj801ouw",
  "balance": 64
}
prisma:query SELECT 1
prisma:query SELECT `main`.`games`.`id`, `main`.`games`.`title`, `main`.`games`.`description`, `main`.`games`.`maxPlayers`, `main`.`games`.`cardPrice`, `main`.`games`.`totalPrize`, `main`.`games`.`status`, `main`.`games`.`scheduledAt`, `main`.`games`.`startedAt`, `main`.`games`.`endedAt`, `main`.`games`.`ballsDrawn`, `main`.`games`.`currentBall`, `main`.`games`.`winningCards`, `main`.`games`.`createdAt`, `main`.`games`.`updatedAt` FROM `main`.`games` WHERE (`main`.`games`.`id` = ? AND 1=1) LIMIT ? OFFSET ?
prisma:query SELECT `main`.`wallets`.`id`, `main`.`wallets`.`userId`, `main`.`wallets`.`balance`, `main`.`wallets`.`dailyLimit`, `main`.`wallets`.`monthlyLimit`, `main`.`wallets`.`isActive`, `main`.`wallets`.`isFrozen`, `main`.`wallets`.`createdAt`, `main`.`wallets`.`updatedAt` FROM `main`.`wallets` WHERE (`main`.`wallets`.`userId` = ? AND 1=1) LIMIT ? OFFSET ?
15:17:31 [[36minfo[39m]: [36mHTTP GET /validate/:gameId/:cardCount? 200 23ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/validate/:gameId/:cardCount?",
    "statusCode": 200,
    "responseTime": 23
  },
  "type": "http"
}
15:17:33 [[33mwarn[39m]: [33mHTTP GET /validate/:gameId/:cardCount? 400 2ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "GET",
    "url": "/validate/:gameId/:cardCount?",
    "statusCode": 400,
    "responseTime": 2
  },
  "type": "http"
}
15:17:38 [[33mwarn[39m]: [33mHTTP POST /cards 400 20ms[39m
{
  "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
  "ip": "::1",
  "httpRequest": {
    "method": "POST",
    "url": "/cards",
    "statusCode": 400,
    "responseTime": 20
  },
  "type": "http"
}
15:17:41 [[36minfo[39m]: Realtime metrics recorded
15:18:11 [[36minfo[39m]: Realtime metrics recorded
15:18:41 [[36minfo[39m]: Realtime metrics recorded
15:19:11 [[36minfo[39m]: Realtime metrics recorded
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `ts-node -r tsconfig-paths/register src/server.ts src/server.ts`[39m
15:19:33 [[36minfo[39m]: [36mSystem metrics collection started[39m
{
  "module": "performance",
  "interval": 30000
}
15:19:34 [[36minfo[39m]: [36mOpenpay configuration validated successfully (MOCK MODE)[39m
{
  "merchantId": "mock_merchant_12345",
  "production": false,
  "mockMode": true,
  "mockDelayMs": 1000,
  "mockSuccessRate": 0.95,
  "country": "PE"
}
15:19:34 [[36minfo[39m]: [36mOpenpay configuration validated successfully (MOCK MODE)[39m
{
  "merchantId": "mock_merchant_12345",
  "production": false,
  "mockMode": true,
  "mockDelayMs": 1000,
  "mockSuccessRate": 0.95,
  "country": "PE"
}
15:19:34 [[36minfo[39m]: [36mConnecting to databases...[39m
15:19:34 [[36minfo[39m]: ‚úÖ Conexi√≥n a PostgreSQL establecida exitosamente
prisma:query SELECT 1
15:19:34 [[36minfo[39m]: ‚úÖ Base de datos PostgreSQL funcionando correctamente
15:19:34 [[31merror[39m]: AggregateError
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1714:7)
15:19:34 [[31merror[39m]: AggregateError
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1714:7)
15:19:34 [[33mwarn[39m]: ‚ö†Ô∏è Continuando sin Redis para desarrollo
15:19:34 [[36minfo[39m]: [36mInitializing report scheduler...[39m
15:19:34 [[36minfo[39m]: [36mInitializing scheduler service[39m
{
  "module": "analytics"
}
15:19:34 [[36minfo[39m]: [36mTask scheduled successfully[39m
{
  "module": "analytics",
  "taskId": "kpi-alerts-hourly",
  "type": "kpi-alerts",
  "frequency": "daily",
  "nextRun": "2025-08-12T21:00:00.000Z",
  "timeUntilRun": 2425665
}
15:19:34 [[36minfo[39m]: [36mTask scheduled successfully[39m
{
  "module": "analytics",
  "taskId": "daily-report-auto",
  "type": "daily",
  "frequency": "daily",
  "nextRun": "2025-08-13T13:00:00.000Z",
  "timeUntilRun": 60025665
}
15:19:34 [[36minfo[39m]: [36mTask scheduled successfully[39m
{
  "module": "analytics",
  "taskId": "weekly-report-auto",
  "type": "weekly",
  "frequency": "weekly",
  "nextRun": "2025-08-18T14:00:00.000Z",
  "timeUntilRun": 495625664
}
15:19:34 [[36minfo[39m]: [36mTask scheduled successfully[39m
{
  "module": "analytics",
  "taskId": "monthly-report-auto",
  "type": "monthly",
  "frequency": "monthly",
  "nextRun": "2025-09-01T15:00:00.000Z",
  "timeUntilRun": 1708825664
}
15:19:34 [[36minfo[39m]: [36mScheduler service initialized successfully[39m
{
  "module": "analytics",
  "tasksCount": 4
}
15:19:34 [[36minfo[39m]: [36mServer started successfully[39m
{
  "port": 3001,
  "environment": "development",
  "frontendUrl": "http://localhost:5173",
  "features": [
    "HTTP",
    "Socket.IO",
    "CORS",
    "Analytics",
    "Reports",
    "Scheduler"
  ]
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `ts-node -r tsconfig-paths/register src/server.ts src/server.ts`[39m
15:20:01 [[36minfo[39m]: [36mSystem metrics collection started[39m
{
  "module": "performance",
  "interval": 30000
}
15:20:02 [[36minfo[39m]: [36mOpenpay configuration validated successfully (MOCK MODE)[39m
{
  "merchantId": "mock_merchant_12345",
  "production": false,
  "mockMode": true,
  "mockDelayMs": 1000,
  "mockSuccessRate": 0.95,
  "country": "PE"
}
15:20:02 [[36minfo[39m]: [36mOpenpay configuration validated successfully (MOCK MODE)[39m
{
  "merchantId": "mock_merchant_12345",
  "production": false,
  "mockMode": true,
  "mockDelayMs": 1000,
  "mockSuccessRate": 0.95,
  "country": "PE"
}
15:20:02 [[36minfo[39m]: [36mConnecting to databases...[39m
15:20:02 [[36minfo[39m]: ‚úÖ Conexi√≥n a PostgreSQL establecida exitosamente
prisma:query SELECT 1
15:20:02 [[36minfo[39m]: ‚úÖ Base de datos PostgreSQL funcionando correctamente
15:20:02 [[31merror[39m]: AggregateError
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1714:7)
15:20:02 [[31merror[39m]: AggregateError
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1714:7)
15:20:02 [[33mwarn[39m]: ‚ö†Ô∏è Continuando sin Redis para desarrollo
15:20:02 [[36minfo[39m]: [36mInitializing report scheduler...[39m
15:20:02 [[36minfo[39m]: [36mInitializing scheduler service[39m
{
  "module": "analytics"
}
15:20:02 [[36minfo[39m]: [36mTask scheduled successfully[39m
{
  "module": "analytics",
  "taskId": "kpi-alerts-hourly",
  "type": "kpi-alerts",
  "frequency": "daily",
  "nextRun": "2025-08-12T21:00:00.000Z",
  "timeUntilRun": 2397505
}
15:20:02 [[36minfo[39m]: [36mTask scheduled successfully[39m
{
  "module": "analytics",
  "taskId": "daily-report-auto",
  "type": "daily",
  "frequency": "daily",
  "nextRun": "2025-08-13T13:00:00.000Z",
  "timeUntilRun": 59997505
}
15:20:02 [[36minfo[39m]: [36mTask scheduled successfully[39m
{
  "module": "analytics",
  "taskId": "weekly-report-auto",
  "type": "weekly",
  "frequency": "weekly",
  "nextRun": "2025-08-18T14:00:00.000Z",
  "timeUntilRun": 495597504
}
15:20:02 [[36minfo[39m]: [36mTask scheduled successfully[39m
{
  "module": "analytics",
  "taskId": "monthly-report-auto",
  "type": "monthly",
  "frequency": "monthly",
  "nextRun": "2025-09-01T15:00:00.000Z",
  "timeUntilRun": 1708797504
}
15:20:02 [[36minfo[39m]: [36mScheduler service initialized successfully[39m
{
  "module": "analytics",
  "tasksCount": 4
}
15:20:02 [[36minfo[39m]: [36mServer started successfully[39m
{
  "port": 3001,
  "environment": "development",
  "frontendUrl": "http://localhost:5173",
  "features": [
    "HTTP",
    "Socket.IO",
    "CORS",
    "Analytics",
    "Reports",
    "Scheduler"
  ]
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `ts-node -r tsconfig-paths/register src/server.ts src/server.ts`[39m
15:20:20 [[36minfo[39m]: [36mSystem metrics collection started[39m
{
  "module": "performance",
  "interval": 30000
}
15:20:21 [[36minfo[39m]: [36mOpenpay configuration validated successfully (MOCK MODE)[39m
{
  "merchantId": "mock_merchant_12345",
  "production": false,
  "mockMode": true,
  "mockDelayMs": 1000,
  "mockSuccessRate": 0.95,
  "country": "PE"
}
15:20:21 [[36minfo[39m]: [36mOpenpay configuration validated successfully (MOCK MODE)[39m
{
  "merchantId": "mock_merchant_12345",
  "production": false,
  "mockMode": true,
  "mockDelayMs": 1000,
  "mockSuccessRate": 0.95,
  "country": "PE"
}
15:20:21 [[36minfo[39m]: [36mConnecting to databases...[39m
15:20:22 [[36minfo[39m]: ‚úÖ Conexi√≥n a PostgreSQL establecida exitosamente
prisma:query SELECT 1
15:20:22 [[36minfo[39m]: ‚úÖ Base de datos PostgreSQL funcionando correctamente
15:20:22 [[31merror[39m]: AggregateError
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1714:7)
15:20:22 [[31merror[39m]: AggregateError
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1714:7)
15:20:22 [[33mwarn[39m]: ‚ö†Ô∏è Continuando sin Redis para desarrollo
15:20:22 [[36minfo[39m]: [36mInitializing report scheduler...[39m
15:20:22 [[36minfo[39m]: [36mInitializing scheduler service[39m
{
  "module": "analytics"
}
15:20:22 [[36minfo[39m]: [36mTask scheduled successfully[39m
{
  "module": "analytics",
  "taskId": "kpi-alerts-hourly",
  "type": "kpi-alerts",
  "frequency": "daily",
  "nextRun": "2025-08-12T21:00:00.000Z",
  "timeUntilRun": 2377971
}
15:20:22 [[36minfo[39m]: [36mTask scheduled successfully[39m
{
  "module": "analytics",
  "taskId": "daily-report-auto",
  "type": "daily",
  "frequency": "daily",
  "nextRun": "2025-08-13T13:00:00.000Z",
  "timeUntilRun": 59977971
}
15:20:22 [[36minfo[39m]: [36mTask scheduled successfully[39m
{
  "module": "analytics",
  "taskId": "weekly-report-auto",
  "type": "weekly",
  "frequency": "weekly",
  "nextRun": "2025-08-18T14:00:00.000Z",
  "timeUntilRun": 495577970
}
15:20:22 [[36minfo[39m]: [36mTask scheduled successfully[39m
{
  "module": "analytics",
  "taskId": "monthly-report-auto",
  "type": "monthly",
  "frequency": "monthly",
  "nextRun": "2025-09-01T15:00:00.000Z",
  "timeUntilRun": 1708777970
}
15:20:22 [[36minfo[39m]: [36mScheduler service initialized successfully[39m
{
  "module": "analytics",
  "tasksCount": 4
}
15:20:22 [[36minfo[39m]: [36mServer started successfully[39m
{
  "port": 3001,
  "environment": "development",
  "frontendUrl": "http://localhost:5173",
  "features": [
    "HTTP",
    "Socket.IO",
    "CORS",
    "Analytics",
    "Reports",
    "Scheduler"
  ]
}
15:20:50 [[36minfo[39m]: Realtime metrics recorded
15:21:20 [[36minfo[39m]: Realtime metrics recorded
15:21:37 [[33mwarn[39m]: [33mHTTP POST / 404 3ms[39m
{
  "userAgent": "curl/8.7.1",
  "ip": "::1",
  "httpRequest": {
    "method": "POST",
    "url": "/",
    "statusCode": 404,
    "responseTime": 3
  },
  "type": "http"
}
15:21:50 [[36minfo[39m]: Realtime metrics recorded
15:22:20 [[36minfo[39m]: Realtime metrics recorded
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `ts-node -r tsconfig-paths/register src/server.ts src/server.ts`[39m
15:22:39 [[36minfo[39m]: [36mSystem metrics collection started[39m
{
  "module": "performance",
  "interval": 30000
}
15:22:40 [[36minfo[39m]: [36mOpenpay configuration validated successfully (MOCK MODE)[39m
{
  "merchantId": "mock_merchant_12345",
  "production": false,
  "mockMode": true,
  "mockDelayMs": 1000,
  "mockSuccessRate": 0.95,
  "country": "PE"
}
15:22:40 [[36minfo[39m]: [36mOpenpay configuration validated successfully (MOCK MODE)[39m
{
  "merchantId": "mock_merchant_12345",
  "production": false,
  "mockMode": true,
  "mockDelayMs": 1000,
  "mockSuccessRate": 0.95,
  "country": "PE"
}
15:22:40 [[36minfo[39m]: [36mConnecting to databases...[39m
15:22:40 [[36minfo[39m]: ‚úÖ Conexi√≥n a PostgreSQL establecida exitosamente
prisma:query SELECT 1
15:22:40 [[36minfo[39m]: ‚úÖ Base de datos PostgreSQL funcionando correctamente
15:22:40 [[31merror[39m]: AggregateError
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1714:7)
15:22:40 [[31merror[39m]: AggregateError
    at internalConnectMultiple (node:net:1139:18)
    at afterConnectMultiple (node:net:1714:7)
15:22:40 [[33mwarn[39m]: ‚ö†Ô∏è Continuando sin Redis para desarrollo
15:22:40 [[36minfo[39m]: [36mInitializing report scheduler...[39m
15:22:40 [[36minfo[39m]: [36mInitializing scheduler service[39m
{
  "module": "analytics"
}
15:22:40 [[36minfo[39m]: [36mTask scheduled successfully[39m
{
  "module": "analytics",
  "taskId": "kpi-alerts-hourly",
  "type": "kpi-alerts",
  "frequency": "daily",
  "nextRun": "2025-08-12T21:00:00.000Z",
  "timeUntilRun": 2239236
}
15:22:40 [[36minfo[39m]: [36mTask scheduled successfully[39m
{
  "module": "analytics",
  "taskId": "daily-report-auto",
  "type": "daily",
  "frequency": "daily",
  "nextRun": "2025-08-13T13:00:00.000Z",
  "timeUntilRun": 59839235
}
15:22:40 [[36minfo[39m]: [36mTask scheduled successfully[39m
{
  "module": "analytics",
  "taskId": "weekly-report-auto",
  "type": "weekly",
  "frequency": "weekly",
  "nextRun": "2025-08-18T14:00:00.000Z",
  "timeUntilRun": 495439235
}
15:22:40 [[36minfo[39m]: [36mTask scheduled successfully[39m
{
  "module": "analytics",
  "taskId": "monthly-report-auto",
  "type": "monthly",
  "frequency": "monthly",
  "nextRun": "2025-09-01T15:00:00.000Z",
  "timeUntilRun": 1708639234
}
15:22:40 [[36minfo[39m]: [36mScheduler service initialized successfully[39m
{
  "module": "analytics",
  "tasksCount": 4
}
15:22:40 [[36minfo[39m]: [36mServer started successfully[39m
{
  "port": 3001,
  "environment": "development",
  "frontendUrl": "http://localhost:5173",
  "features": [
    "HTTP",
    "Socket.IO",
    "CORS",
    "Analytics",
    "Reports",
    "Scheduler"
  ]
}
15:23:03 [[36minfo[39m]: üîå Desconectado de Redis
15:23:03 [[36minfo[39m]: [36mSIGTERM received, shutting down gracefully[39m
15:23:03 [[36minfo[39m]: [36mScheduler service stopped[39m
{
  "module": "analytics"
}
npm error Lifecycle script `dev` failed with error:
npm error code 143
npm error path /Users/osmanmarin/Documents/Bingo-deploy/backend
npm error workspace bingo-backend@1.0.0
npm error location /Users/osmanmarin/Documents/Bingo-deploy/backend
npm error command failed
npm error command sh -c nodemon src/server.ts
