# Docker Compose para Bingo La Perla
# Orquesta backend, frontend, PostgreSQL y Redis
version: '3.8'

# Red personalizada para comunicación entre servicios
networks:
  bingo-network:
    driver: bridge

# Volúmenes persistentes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: bingo-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-bingo_production}
      POSTGRES_USER: ${POSTGRES_USER:-bingo_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-bingo_secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - bingo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bingo_user} -d ${POSTGRES_DB:-bingo_production}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: bingo-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - bingo-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API + Socket.IO
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runtime
    container_name: bingo-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Base config
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-bingo_user}:${POSTGRES_PASSWORD:-bingo_secure_password}@postgres:5432/${POSTGRES_DB:-bingo_production}?schema=public
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379
      
      # JWT Secrets
      JWT_SECRET: ${JWT_SECRET:-your-super-secure-jwt-secret-change-in-production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secure-refresh-secret-change-in-production}
      
      # CORS
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - ./backend/logs:/app/logs
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    networks:
      - bingo-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend PWA
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:3001}
        VITE_SOCKET_URL: ${VITE_SOCKET_URL:-http://localhost:3001}
    container_name: bingo-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "${FRONTEND_PORT:-3000}:8080"
    networks:
      - bingo-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Configuraciones adicionales para desarrollo
x-development-overrides:
  backend-dev: &backend-dev
    build:
      target: builder
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run dev
    environment:
      NODE_ENV: development

  frontend-dev: &frontend-dev
    build:
      target: builder
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev
    ports:
      - "5173:5173"

# Profiles para diferentes entornos
profiles:
  # Desarrollo local
  - development

  # Producción
  - production

  # Testing
  - testing