// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  username      String   @unique
  password      String
  role          String   @default("USER") // USER or ADMIN
  balance       Decimal  @default(0.00) // Balance del usuario en soles (legacy)
  pearlsBalance Decimal  @default(0.00) // Balance en Perlas (1 Perla = 1 Sol)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Estado de la cuenta
  isActive   Boolean @default(true)
  isVerified Boolean @default(false)

  // Información adicional para compliance
  fullName  String?
  phone     String?
  dni       String?   @unique
  birthDate DateTime?

  // Relaciones con otras tablas
  gameParticipations GameParticipant[]
  bingoCards         BingoCard[]
  transactions       Transaction[]     @relation("UserTransactions")

  // Relaciones del sistema de pagos
  wallet             Wallet?
  depositRequests    DepositRequest[]
  withdrawalRequests WithdrawalRequest[]
  sentTransfers      Transaction[]       @relation("TransactionFromUser")
  receivedTransfers  Transaction[]       @relation("TransactionToUser")

  // Relaciones Openpay
  openpayCustomer OpenpayCustomer?

  @@map("users")
}

// Modelo para partidas de bingo
model Game {
  id          String  @id @default(cuid())
  title       String
  description String?
  maxPlayers  Int     @default(500)
  cardPrice   Decimal @default(5.00)
  totalPrize  Decimal @default(0.00)
  status      String  @default("SCHEDULED") // SCHEDULED, OPEN, IN_PROGRESS, PAUSED, COMPLETED, CANCELLED

  // Horarios
  scheduledAt DateTime
  startedAt   DateTime?
  endedAt     DateTime?

  // Configuración del juego
  ballsDrawn   String @default("[]") // JSON string for arrays in SQLite
  currentBall  Int?
  winningCards String @default("[]") // JSON string for arrays in SQLite

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  participants GameParticipant[]
  bingoCards   BingoCard[]

  @@map("games")
}

// Tabla de unión entre User y Game
model GameParticipant {
  id     String @id @default(cuid())
  userId String
  gameId String

  // Información de participación
  joinedAt   DateTime @default(now())
  cardsCount Int      @default(0)
  totalSpent Decimal  @default(0.00)
  hasWon     Boolean  @default(false)
  prizeWon   Decimal  @default(0.00)

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([userId, gameId])
  @@map("game_participants")
}

// Modelo para cartones de bingo
model BingoCard {
  id     String @id @default(cuid())
  userId String
  gameId String

  // Identificación del cartón
  cardNumber Int // Número secuencial del cartón en la partida
  isActive   Boolean @default(true)

  // Estado del cartón
  markedNumbers  String  @default("[]") // JSON string for arrays in SQLite
  isWinner       Boolean @default(false)
  winningPattern String? // Tipo de patrón ganador (LINE_HORIZONTAL, FULL_CARD, etc.)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  game    Game         @relation(fields: [gameId], references: [id], onDelete: Cascade)
  numbers CardNumber[]

  @@unique([gameId, cardNumber])
  @@map("bingo_cards")
}

// Modelo para los números de cada cartón
model CardNumber {
  id     String @id @default(cuid())
  cardId String

  // Posición en el cartón (0-24, donde 12 es el centro LIBRE)
  position Int
  column   String // B, I, N, G, O
  number   Int? // null para la casilla libre del centro

  // Estado
  isMarked Boolean @default(false)
  isFree   Boolean @default(false) // true solo para la casilla central

  // Relación
  card BingoCard @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@unique([cardId, position])
  @@map("card_numbers")
}

// Modelo para transacciones (compra de cartones)
model Transaction {
  id     String  @id @default(cuid())
  userId String
  gameId String?

  // Información de la transacción
  type        String // CARD_PURCHASE, PRIZE_PAYOUT, REFUND, PEARL_PURCHASE, PEARL_TRANSFER, WITHDRAWAL
  amount      Decimal
  description String
  status      String  @default("PENDING") // PENDING, COMPLETED, FAILED, CANCELLED

  // Información de pago
  paymentMethod String?
  paymentId     String? // ID del pago en la pasarela

  // Sistema de Perlas - Información adicional
  pearlsAmount     Decimal? // Cantidad de Perlas involucradas
  fromUserId       String? // Para transferencias P2P
  toUserId         String? // Para transferencias P2P
  commissionAmount Decimal? @default(0.00) // Comisión aplicada
  referenceId      String? // Referencia única para rastreo

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user     User  @relation("UserTransactions", fields: [userId], references: [id], onDelete: Cascade)
  fromUser User? @relation("TransactionFromUser", fields: [fromUserId], references: [id], onDelete: SetNull)
  toUser   User? @relation("TransactionToUser", fields: [toUserId], references: [id], onDelete: SetNull)

  @@map("transactions")
}

// ===============================================
// SISTEMA DE PAGOS "PERLAS" - NUEVOS MODELOS
// ===============================================

// Modelo de billetera para cada usuario
model Wallet {
  id     String @id @default(cuid())
  userId String @unique

  // Balance en Perlas (1 Perla = 1 Sol)
  balance Decimal @default(0.00)

  // Límites y configuraciones
  dailyLimit   Decimal @default(1000.00) // Límite diario retiros
  monthlyLimit Decimal @default(10000.00) // Límite mensual retiros

  // Estado de la billetera
  isActive Boolean @default(true)
  isFrozen Boolean @default(false) // Para casos de fraude/investigación

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallets")
}

// Modelo para solicitudes de depósito (recarga de Perlas)
model DepositRequest {
  id     String @id @default(cuid())
  userId String

  // Información del depósito
  amount       Decimal // Monto en soles
  pearlsAmount Decimal // Perlas equivalentes (normalmente igual al monto)
  currency     String  @default("PEN") // Siempre Soles Peruanos

  // Método de pago elegido
  paymentMethod String // BCP, BBVA, INTERBANK, SCOTIABANK, YAPE, PLIN

  // Referencias únicas para rastreo
  referenceCode String  @unique // Código único generado por el sistema
  bankReference String? // Número de operación bancaria del usuario

  // Datos bancarios utilizados (para validación)
  bankAccount     String? // Cuenta bancaria de destino
  bankAccountName String? // Nombre de la cuenta

  // Estado y validación
  status      String    @default("PENDING") // PENDING, APPROVED, REJECTED, CANCELLED, EXPIRED
  adminNotes  String? // Notas del admin al validar
  validatedBy String? // ID del admin que validó
  validatedAt DateTime?

  // Evidencia del depósito
  proofImage      String? // URL del comprobante subido por usuario
  proofImageAdmin String? // URL del comprobante verificado por admin

  // Información de transacción procesada
  transactionId String? // ID de la transacción creada al aprobar

  // Campos Openpay Integration
  integrationMethod    String  @default("manual") // manual, openpay
  openpayTransactionId String? // ID de transacción Openpay
  autoApprovalEligible Boolean @default(false)
  processingFee        Float   @default(0.00)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime // Solicitud expira en 24 horas

  // Relaciones
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  openpayTransactions OpenpayTransaction[]

  @@map("deposit_requests")
}

// Modelo para solicitudes de retiro (conversión Perlas a Soles)
model WithdrawalRequest {
  id     String @id @default(cuid())
  userId String

  // Información del retiro
  pearlsAmount  Decimal // Perlas a retirar
  amountInSoles Decimal // Equivalente en soles
  commission    Decimal @default(0.00) // Comisión aplicada
  netAmount     Decimal // Monto neto a transferir

  // Información bancaria del usuario
  bankCode          String // BCP, BBVA, INTERBANK, SCOTIABANK
  accountNumber     String // Número de cuenta de destino
  accountType       String // SAVINGS, CHECKING
  accountHolderName String // Nombre del titular
  accountHolderDni  String // DNI del titular

  // Estado y validación
  status      String    @default("PENDING") // PENDING, APPROVED, REJECTED, CANCELLED, PROCESSING, COMPLETED
  adminNotes  String? // Notas del admin
  processedBy String? // ID del admin que procesó
  processedAt DateTime?

  // Información de transacción bancaria
  bankTransactionId String? // ID de la transferencia bancaria
  transferProof     String? // Comprobante de transferencia

  // Referencias
  referenceCode String  @unique // Código único para rastreo
  transactionId String? // ID de la transacción de débito

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("withdrawal_requests")
}

// Modelo para referencias de pago únicas
model PaymentReference {
  id String @id @default(cuid())

  // Referencia única
  code String @unique // Código alfanumérico único
  type String // DEPOSIT, WITHDRAWAL, TRANSFER

  // Información asociada
  userId      String // Usuario propietario
  amount      Decimal // Monto asociado
  description String // Descripción del pago

  // Metadatos
  metadata String? // JSON con información adicional

  // Estado
  isUsed Boolean   @default(false)
  usedAt DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime // Referencias expiran para seguridad

  @@map("payment_references")
}

// Modelo para configuración de bancos peruanos
model BankConfiguration {
  id String @id @default(cuid())

  // Información del banco
  bankCode String @unique // BCP, BBVA, INTERBANK, SCOTIABANK
  bankName String // Nombre completo del banco

  // Cuentas de depósito del negocio
  accountNumber     String // Cuenta para recibir depósitos
  accountType       String // SAVINGS, CHECKING
  accountHolderName String // Nombre del titular (empresa)

  // CCI para transferencias interbancarias
  cci String? // Código de Cuenta Interbancaria

  // Configuraciones
  isActive   Boolean @default(true)
  minDeposit Decimal @default(1.00)
  maxDeposit Decimal @default(5000.00)

  // Comisiones
  depositCommission Decimal @default(0.00) // Comisión por depósito

  // Instrucciones para el usuario
  instructions String? // Instrucciones específicas del banco

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bank_configurations")
}

// Modelo para logs de auditoría (compliance SUNAT/SBS)
model AuditLog {
  id String @id @default(cuid())

  // Información de la acción
  userId   String? // Usuario que realizó la acción (null para sistema)
  adminId  String? // Admin que realizó la acción
  action   String // DEPOSIT_APPROVED, WITHDRAWAL_PROCESSED, etc.
  entity   String // USER, TRANSACTION, DEPOSIT_REQUEST, etc.
  entityId String // ID del registro afectado

  // Detalles de la acción
  oldValue    String? // Valor anterior (JSON)
  newValue    String? // Valor nuevo (JSON)
  description String // Descripción human-readable

  // Metadatos técnicos
  ipAddress String? // IP desde donde se realizó la acción
  userAgent String? // User agent del navegador
  sessionId String? // ID de sesión

  // Timestamps
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

// Modelo para configuraciones del sistema de pagos
model PaymentConfiguration {
  id String @id @default(cuid())

  // Configuraciones generales
  p2pTransferEnabled    Boolean @default(true)
  p2pTransferCommission Decimal @default(0.50) // Comisión por transferencia P2P

  // Límites por defecto
  defaultDailyLimit   Decimal @default(1000.00)
  defaultMonthlyLimit Decimal @default(10000.00)

  // Configuraciones de tiempo
  depositExpirationHours   Int @default(24) // Horas para expirar depósito
  referenceExpirationHours Int @default(48) // Horas para expirar referencias

  // Estados del sistema
  depositsEnabled    Boolean @default(true)
  withdrawalsEnabled Boolean @default(true)
  transfersEnabled   Boolean @default(true)

  // Mensajes del sistema
  maintenanceMessage  String?
  announcementMessage String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payment_configurations")
}

// ===============================================
// OPENPAY INTEGRATION - NUEVOS MODELOS
// ===============================================

// Modelo de clientes Openpay
model OpenpayCustomer {
  id                String   @id @default(cuid())
  userId            String   @unique
  openpayCustomerId String   @unique
  email             String
  name              String
  phone             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relaciones
  user           User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentMethods OpenpayPaymentMethod[]
  transactions   OpenpayTransaction[]

  @@map("openpay_customers")
}

// Modelo para transacciones Openpay
model OpenpayTransaction {
  id                   String  @id @default(cuid())
  depositRequestId     String
  openpayTransactionId String  @unique
  openpayChargeId      String? @unique

  // Payment Details
  amount               Float
  currency             String  @default("PEN")
  paymentMethod        String
  paymentMethodDetails String? // JSON stored as string

  // Openpay Status
  openpayStatus       String
  openpayErrorCode    String?
  openpayErrorMessage String?

  // Customer Information
  customerId    String
  customerEmail String
  customerPhone String?

  // Processing Information
  authorizationCode String?
  operationType     String?
  deviceSessionId   String?

  // Security & Fraud
  riskScore       Float?
  fraudIndicators String? // JSON stored as string
  ipAddress       String?
  userAgent       String?

  // Timestamps
  chargedAt DateTime?
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relaciones
  depositRequest DepositRequest        @relation(fields: [depositRequestId], references: [id], onDelete: Cascade)
  customer       OpenpayCustomer       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  webhookEvents  OpenpayWebhookEvent[]

  @@map("openpay_transactions")
}

// Webhook events log
model OpenpayWebhookEvent {
  id               String    @id @default(cuid())
  openpayEventId   String    @unique
  eventType        String
  transactionId    String?
  webhookSignature String
  payload          String // JSON stored as string
  processedAt      DateTime?
  processingStatus String    @default("pending")
  errorMessage     String?
  createdAt        DateTime  @default(now())

  // Relaciones
  transaction OpenpayTransaction? @relation(fields: [transactionId], references: [id], onDelete: SetNull)

  @@map("openpay_webhook_events")
}

// Payment methods storage
model OpenpayPaymentMethod {
  id            String  @id @default(cuid())
  customerId    String
  openpayCardId String? @unique

  // Card Information (tokenized)
  cardType         String?
  cardBrand        String?
  cardNumberMasked String?
  cardHolderName   String?
  expirationMonth  String?
  expirationYear   String?

  // Status
  isActive  Boolean @default(true)
  isDefault Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  customer OpenpayCustomer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("openpay_payment_methods")
}
