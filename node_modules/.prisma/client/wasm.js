
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  password: 'password',
  role: 'role',
  balance: 'balance',
  pearlsBalance: 'pearlsBalance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isActive: 'isActive',
  isVerified: 'isVerified',
  fullName: 'fullName',
  phone: 'phone',
  dni: 'dni',
  birthDate: 'birthDate'
};

exports.Prisma.GameScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  maxPlayers: 'maxPlayers',
  cardPrice: 'cardPrice',
  totalPrize: 'totalPrize',
  status: 'status',
  scheduledAt: 'scheduledAt',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  ballsDrawn: 'ballsDrawn',
  currentBall: 'currentBall',
  winningCards: 'winningCards',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GameParticipantScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  gameId: 'gameId',
  joinedAt: 'joinedAt',
  cardsCount: 'cardsCount',
  totalSpent: 'totalSpent',
  hasWon: 'hasWon',
  prizeWon: 'prizeWon'
};

exports.Prisma.BingoCardScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  gameId: 'gameId',
  cardNumber: 'cardNumber',
  isActive: 'isActive',
  markedNumbers: 'markedNumbers',
  isWinner: 'isWinner',
  winningPattern: 'winningPattern',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CardNumberScalarFieldEnum = {
  id: 'id',
  cardId: 'cardId',
  position: 'position',
  column: 'column',
  number: 'number',
  isMarked: 'isMarked',
  isFree: 'isFree'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  gameId: 'gameId',
  type: 'type',
  amount: 'amount',
  description: 'description',
  status: 'status',
  paymentMethod: 'paymentMethod',
  paymentId: 'paymentId',
  pearlsAmount: 'pearlsAmount',
  fromUserId: 'fromUserId',
  toUserId: 'toUserId',
  commissionAmount: 'commissionAmount',
  referenceId: 'referenceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WalletScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  balance: 'balance',
  dailyLimit: 'dailyLimit',
  monthlyLimit: 'monthlyLimit',
  isActive: 'isActive',
  isFrozen: 'isFrozen',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DepositRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  pearlsAmount: 'pearlsAmount',
  currency: 'currency',
  paymentMethod: 'paymentMethod',
  referenceCode: 'referenceCode',
  bankReference: 'bankReference',
  bankAccount: 'bankAccount',
  bankAccountName: 'bankAccountName',
  status: 'status',
  adminNotes: 'adminNotes',
  validatedBy: 'validatedBy',
  validatedAt: 'validatedAt',
  proofImage: 'proofImage',
  proofImageAdmin: 'proofImageAdmin',
  transactionId: 'transactionId',
  integrationMethod: 'integrationMethod',
  openpayTransactionId: 'openpayTransactionId',
  autoApprovalEligible: 'autoApprovalEligible',
  processingFee: 'processingFee',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.WithdrawalRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  pearlsAmount: 'pearlsAmount',
  amountInSoles: 'amountInSoles',
  commission: 'commission',
  netAmount: 'netAmount',
  bankCode: 'bankCode',
  accountNumber: 'accountNumber',
  accountType: 'accountType',
  accountHolderName: 'accountHolderName',
  accountHolderDni: 'accountHolderDni',
  status: 'status',
  adminNotes: 'adminNotes',
  processedBy: 'processedBy',
  processedAt: 'processedAt',
  bankTransactionId: 'bankTransactionId',
  transferProof: 'transferProof',
  referenceCode: 'referenceCode',
  transactionId: 'transactionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentReferenceScalarFieldEnum = {
  id: 'id',
  code: 'code',
  type: 'type',
  userId: 'userId',
  amount: 'amount',
  description: 'description',
  metadata: 'metadata',
  isUsed: 'isUsed',
  usedAt: 'usedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.BankConfigurationScalarFieldEnum = {
  id: 'id',
  bankCode: 'bankCode',
  bankName: 'bankName',
  accountNumber: 'accountNumber',
  accountType: 'accountType',
  accountHolderName: 'accountHolderName',
  cci: 'cci',
  isActive: 'isActive',
  minDeposit: 'minDeposit',
  maxDeposit: 'maxDeposit',
  depositCommission: 'depositCommission',
  instructions: 'instructions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  adminId: 'adminId',
  action: 'action',
  entity: 'entity',
  entityId: 'entityId',
  oldValue: 'oldValue',
  newValue: 'newValue',
  description: 'description',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  sessionId: 'sessionId',
  createdAt: 'createdAt'
};

exports.Prisma.PaymentConfigurationScalarFieldEnum = {
  id: 'id',
  p2pTransferEnabled: 'p2pTransferEnabled',
  p2pTransferCommission: 'p2pTransferCommission',
  defaultDailyLimit: 'defaultDailyLimit',
  defaultMonthlyLimit: 'defaultMonthlyLimit',
  depositExpirationHours: 'depositExpirationHours',
  referenceExpirationHours: 'referenceExpirationHours',
  depositsEnabled: 'depositsEnabled',
  withdrawalsEnabled: 'withdrawalsEnabled',
  transfersEnabled: 'transfersEnabled',
  maintenanceMessage: 'maintenanceMessage',
  announcementMessage: 'announcementMessage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OpenpayCustomerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  openpayCustomerId: 'openpayCustomerId',
  email: 'email',
  name: 'name',
  phone: 'phone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OpenpayTransactionScalarFieldEnum = {
  id: 'id',
  depositRequestId: 'depositRequestId',
  openpayTransactionId: 'openpayTransactionId',
  openpayChargeId: 'openpayChargeId',
  amount: 'amount',
  currency: 'currency',
  paymentMethod: 'paymentMethod',
  paymentMethodDetails: 'paymentMethodDetails',
  openpayStatus: 'openpayStatus',
  openpayErrorCode: 'openpayErrorCode',
  openpayErrorMessage: 'openpayErrorMessage',
  customerId: 'customerId',
  customerEmail: 'customerEmail',
  customerPhone: 'customerPhone',
  authorizationCode: 'authorizationCode',
  operationType: 'operationType',
  deviceSessionId: 'deviceSessionId',
  riskScore: 'riskScore',
  fraudIndicators: 'fraudIndicators',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  chargedAt: 'chargedAt',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OpenpayWebhookEventScalarFieldEnum = {
  id: 'id',
  openpayEventId: 'openpayEventId',
  eventType: 'eventType',
  transactionId: 'transactionId',
  webhookSignature: 'webhookSignature',
  payload: 'payload',
  processedAt: 'processedAt',
  processingStatus: 'processingStatus',
  errorMessage: 'errorMessage',
  createdAt: 'createdAt'
};

exports.Prisma.OpenpayPaymentMethodScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  openpayCardId: 'openpayCardId',
  cardType: 'cardType',
  cardBrand: 'cardBrand',
  cardNumberMasked: 'cardNumberMasked',
  cardHolderName: 'cardHolderName',
  expirationMonth: 'expirationMonth',
  expirationYear: 'expirationYear',
  isActive: 'isActive',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Game: 'Game',
  GameParticipant: 'GameParticipant',
  BingoCard: 'BingoCard',
  CardNumber: 'CardNumber',
  Transaction: 'Transaction',
  Wallet: 'Wallet',
  DepositRequest: 'DepositRequest',
  WithdrawalRequest: 'WithdrawalRequest',
  PaymentReference: 'PaymentReference',
  BankConfiguration: 'BankConfiguration',
  AuditLog: 'AuditLog',
  PaymentConfiguration: 'PaymentConfiguration',
  OpenpayCustomer: 'OpenpayCustomer',
  OpenpayTransaction: 'OpenpayTransaction',
  OpenpayWebhookEvent: 'OpenpayWebhookEvent',
  OpenpayPaymentMethod: 'OpenpayPaymentMethod'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
