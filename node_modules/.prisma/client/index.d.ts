
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Game
 * 
 */
export type Game = $Result.DefaultSelection<Prisma.$GamePayload>
/**
 * Model GameParticipant
 * 
 */
export type GameParticipant = $Result.DefaultSelection<Prisma.$GameParticipantPayload>
/**
 * Model BingoCard
 * 
 */
export type BingoCard = $Result.DefaultSelection<Prisma.$BingoCardPayload>
/**
 * Model CardNumber
 * 
 */
export type CardNumber = $Result.DefaultSelection<Prisma.$CardNumberPayload>
/**
 * Model Transaction
 * 
 */
export type Transaction = $Result.DefaultSelection<Prisma.$TransactionPayload>
/**
 * Model Wallet
 * 
 */
export type Wallet = $Result.DefaultSelection<Prisma.$WalletPayload>
/**
 * Model DepositRequest
 * 
 */
export type DepositRequest = $Result.DefaultSelection<Prisma.$DepositRequestPayload>
/**
 * Model WithdrawalRequest
 * 
 */
export type WithdrawalRequest = $Result.DefaultSelection<Prisma.$WithdrawalRequestPayload>
/**
 * Model PaymentReference
 * 
 */
export type PaymentReference = $Result.DefaultSelection<Prisma.$PaymentReferencePayload>
/**
 * Model BankConfiguration
 * 
 */
export type BankConfiguration = $Result.DefaultSelection<Prisma.$BankConfigurationPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model PaymentConfiguration
 * 
 */
export type PaymentConfiguration = $Result.DefaultSelection<Prisma.$PaymentConfigurationPayload>
/**
 * Model OpenpayCustomer
 * 
 */
export type OpenpayCustomer = $Result.DefaultSelection<Prisma.$OpenpayCustomerPayload>
/**
 * Model OpenpayTransaction
 * 
 */
export type OpenpayTransaction = $Result.DefaultSelection<Prisma.$OpenpayTransactionPayload>
/**
 * Model OpenpayWebhookEvent
 * 
 */
export type OpenpayWebhookEvent = $Result.DefaultSelection<Prisma.$OpenpayWebhookEventPayload>
/**
 * Model OpenpayPaymentMethod
 * 
 */
export type OpenpayPaymentMethod = $Result.DefaultSelection<Prisma.$OpenpayPaymentMethodPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.game`: Exposes CRUD operations for the **Game** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Games
    * const games = await prisma.game.findMany()
    * ```
    */
  get game(): Prisma.GameDelegate<ExtArgs>;

  /**
   * `prisma.gameParticipant`: Exposes CRUD operations for the **GameParticipant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameParticipants
    * const gameParticipants = await prisma.gameParticipant.findMany()
    * ```
    */
  get gameParticipant(): Prisma.GameParticipantDelegate<ExtArgs>;

  /**
   * `prisma.bingoCard`: Exposes CRUD operations for the **BingoCard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BingoCards
    * const bingoCards = await prisma.bingoCard.findMany()
    * ```
    */
  get bingoCard(): Prisma.BingoCardDelegate<ExtArgs>;

  /**
   * `prisma.cardNumber`: Exposes CRUD operations for the **CardNumber** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CardNumbers
    * const cardNumbers = await prisma.cardNumber.findMany()
    * ```
    */
  get cardNumber(): Prisma.CardNumberDelegate<ExtArgs>;

  /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<ExtArgs>;

  /**
   * `prisma.wallet`: Exposes CRUD operations for the **Wallet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Wallets
    * const wallets = await prisma.wallet.findMany()
    * ```
    */
  get wallet(): Prisma.WalletDelegate<ExtArgs>;

  /**
   * `prisma.depositRequest`: Exposes CRUD operations for the **DepositRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DepositRequests
    * const depositRequests = await prisma.depositRequest.findMany()
    * ```
    */
  get depositRequest(): Prisma.DepositRequestDelegate<ExtArgs>;

  /**
   * `prisma.withdrawalRequest`: Exposes CRUD operations for the **WithdrawalRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WithdrawalRequests
    * const withdrawalRequests = await prisma.withdrawalRequest.findMany()
    * ```
    */
  get withdrawalRequest(): Prisma.WithdrawalRequestDelegate<ExtArgs>;

  /**
   * `prisma.paymentReference`: Exposes CRUD operations for the **PaymentReference** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaymentReferences
    * const paymentReferences = await prisma.paymentReference.findMany()
    * ```
    */
  get paymentReference(): Prisma.PaymentReferenceDelegate<ExtArgs>;

  /**
   * `prisma.bankConfiguration`: Exposes CRUD operations for the **BankConfiguration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BankConfigurations
    * const bankConfigurations = await prisma.bankConfiguration.findMany()
    * ```
    */
  get bankConfiguration(): Prisma.BankConfigurationDelegate<ExtArgs>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs>;

  /**
   * `prisma.paymentConfiguration`: Exposes CRUD operations for the **PaymentConfiguration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaymentConfigurations
    * const paymentConfigurations = await prisma.paymentConfiguration.findMany()
    * ```
    */
  get paymentConfiguration(): Prisma.PaymentConfigurationDelegate<ExtArgs>;

  /**
   * `prisma.openpayCustomer`: Exposes CRUD operations for the **OpenpayCustomer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OpenpayCustomers
    * const openpayCustomers = await prisma.openpayCustomer.findMany()
    * ```
    */
  get openpayCustomer(): Prisma.OpenpayCustomerDelegate<ExtArgs>;

  /**
   * `prisma.openpayTransaction`: Exposes CRUD operations for the **OpenpayTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OpenpayTransactions
    * const openpayTransactions = await prisma.openpayTransaction.findMany()
    * ```
    */
  get openpayTransaction(): Prisma.OpenpayTransactionDelegate<ExtArgs>;

  /**
   * `prisma.openpayWebhookEvent`: Exposes CRUD operations for the **OpenpayWebhookEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OpenpayWebhookEvents
    * const openpayWebhookEvents = await prisma.openpayWebhookEvent.findMany()
    * ```
    */
  get openpayWebhookEvent(): Prisma.OpenpayWebhookEventDelegate<ExtArgs>;

  /**
   * `prisma.openpayPaymentMethod`: Exposes CRUD operations for the **OpenpayPaymentMethod** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OpenpayPaymentMethods
    * const openpayPaymentMethods = await prisma.openpayPaymentMethod.findMany()
    * ```
    */
  get openpayPaymentMethod(): Prisma.OpenpayPaymentMethodDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Game: 'Game',
    GameParticipant: 'GameParticipant',
    BingoCard: 'BingoCard',
    CardNumber: 'CardNumber',
    Transaction: 'Transaction',
    Wallet: 'Wallet',
    DepositRequest: 'DepositRequest',
    WithdrawalRequest: 'WithdrawalRequest',
    PaymentReference: 'PaymentReference',
    BankConfiguration: 'BankConfiguration',
    AuditLog: 'AuditLog',
    PaymentConfiguration: 'PaymentConfiguration',
    OpenpayCustomer: 'OpenpayCustomer',
    OpenpayTransaction: 'OpenpayTransaction',
    OpenpayWebhookEvent: 'OpenpayWebhookEvent',
    OpenpayPaymentMethod: 'OpenpayPaymentMethod'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "game" | "gameParticipant" | "bingoCard" | "cardNumber" | "transaction" | "wallet" | "depositRequest" | "withdrawalRequest" | "paymentReference" | "bankConfiguration" | "auditLog" | "paymentConfiguration" | "openpayCustomer" | "openpayTransaction" | "openpayWebhookEvent" | "openpayPaymentMethod"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Game: {
        payload: Prisma.$GamePayload<ExtArgs>
        fields: Prisma.GameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findFirst: {
            args: Prisma.GameFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findMany: {
            args: Prisma.GameFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          create: {
            args: Prisma.GameCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          createMany: {
            args: Prisma.GameCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          delete: {
            args: Prisma.GameDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          update: {
            args: Prisma.GameUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          deleteMany: {
            args: Prisma.GameDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GameUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          aggregate: {
            args: Prisma.GameAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGame>
          }
          groupBy: {
            args: Prisma.GameGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameCountArgs<ExtArgs>
            result: $Utils.Optional<GameCountAggregateOutputType> | number
          }
        }
      }
      GameParticipant: {
        payload: Prisma.$GameParticipantPayload<ExtArgs>
        fields: Prisma.GameParticipantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameParticipantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameParticipantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameParticipantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameParticipantPayload>
          }
          findFirst: {
            args: Prisma.GameParticipantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameParticipantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameParticipantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameParticipantPayload>
          }
          findMany: {
            args: Prisma.GameParticipantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameParticipantPayload>[]
          }
          create: {
            args: Prisma.GameParticipantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameParticipantPayload>
          }
          createMany: {
            args: Prisma.GameParticipantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameParticipantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameParticipantPayload>[]
          }
          delete: {
            args: Prisma.GameParticipantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameParticipantPayload>
          }
          update: {
            args: Prisma.GameParticipantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameParticipantPayload>
          }
          deleteMany: {
            args: Prisma.GameParticipantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameParticipantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GameParticipantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameParticipantPayload>
          }
          aggregate: {
            args: Prisma.GameParticipantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameParticipant>
          }
          groupBy: {
            args: Prisma.GameParticipantGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameParticipantGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameParticipantCountArgs<ExtArgs>
            result: $Utils.Optional<GameParticipantCountAggregateOutputType> | number
          }
        }
      }
      BingoCard: {
        payload: Prisma.$BingoCardPayload<ExtArgs>
        fields: Prisma.BingoCardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BingoCardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BingoCardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BingoCardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BingoCardPayload>
          }
          findFirst: {
            args: Prisma.BingoCardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BingoCardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BingoCardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BingoCardPayload>
          }
          findMany: {
            args: Prisma.BingoCardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BingoCardPayload>[]
          }
          create: {
            args: Prisma.BingoCardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BingoCardPayload>
          }
          createMany: {
            args: Prisma.BingoCardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BingoCardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BingoCardPayload>[]
          }
          delete: {
            args: Prisma.BingoCardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BingoCardPayload>
          }
          update: {
            args: Prisma.BingoCardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BingoCardPayload>
          }
          deleteMany: {
            args: Prisma.BingoCardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BingoCardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BingoCardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BingoCardPayload>
          }
          aggregate: {
            args: Prisma.BingoCardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBingoCard>
          }
          groupBy: {
            args: Prisma.BingoCardGroupByArgs<ExtArgs>
            result: $Utils.Optional<BingoCardGroupByOutputType>[]
          }
          count: {
            args: Prisma.BingoCardCountArgs<ExtArgs>
            result: $Utils.Optional<BingoCardCountAggregateOutputType> | number
          }
        }
      }
      CardNumber: {
        payload: Prisma.$CardNumberPayload<ExtArgs>
        fields: Prisma.CardNumberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CardNumberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardNumberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CardNumberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardNumberPayload>
          }
          findFirst: {
            args: Prisma.CardNumberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardNumberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CardNumberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardNumberPayload>
          }
          findMany: {
            args: Prisma.CardNumberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardNumberPayload>[]
          }
          create: {
            args: Prisma.CardNumberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardNumberPayload>
          }
          createMany: {
            args: Prisma.CardNumberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CardNumberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardNumberPayload>[]
          }
          delete: {
            args: Prisma.CardNumberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardNumberPayload>
          }
          update: {
            args: Prisma.CardNumberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardNumberPayload>
          }
          deleteMany: {
            args: Prisma.CardNumberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CardNumberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CardNumberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardNumberPayload>
          }
          aggregate: {
            args: Prisma.CardNumberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCardNumber>
          }
          groupBy: {
            args: Prisma.CardNumberGroupByArgs<ExtArgs>
            result: $Utils.Optional<CardNumberGroupByOutputType>[]
          }
          count: {
            args: Prisma.CardNumberCountArgs<ExtArgs>
            result: $Utils.Optional<CardNumberCountAggregateOutputType> | number
          }
        }
      }
      Transaction: {
        payload: Prisma.$TransactionPayload<ExtArgs>
        fields: Prisma.TransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findFirst: {
            args: Prisma.TransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findMany: {
            args: Prisma.TransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          create: {
            args: Prisma.TransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          createMany: {
            args: Prisma.TransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          delete: {
            args: Prisma.TransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          update: {
            args: Prisma.TransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          deleteMany: {
            args: Prisma.TransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          aggregate: {
            args: Prisma.TransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransaction>
          }
          groupBy: {
            args: Prisma.TransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionCountAggregateOutputType> | number
          }
        }
      }
      Wallet: {
        payload: Prisma.$WalletPayload<ExtArgs>
        fields: Prisma.WalletFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WalletFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WalletFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          findFirst: {
            args: Prisma.WalletFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WalletFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          findMany: {
            args: Prisma.WalletFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>[]
          }
          create: {
            args: Prisma.WalletCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          createMany: {
            args: Prisma.WalletCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WalletCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>[]
          }
          delete: {
            args: Prisma.WalletDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          update: {
            args: Prisma.WalletUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          deleteMany: {
            args: Prisma.WalletDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WalletUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WalletUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          aggregate: {
            args: Prisma.WalletAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWallet>
          }
          groupBy: {
            args: Prisma.WalletGroupByArgs<ExtArgs>
            result: $Utils.Optional<WalletGroupByOutputType>[]
          }
          count: {
            args: Prisma.WalletCountArgs<ExtArgs>
            result: $Utils.Optional<WalletCountAggregateOutputType> | number
          }
        }
      }
      DepositRequest: {
        payload: Prisma.$DepositRequestPayload<ExtArgs>
        fields: Prisma.DepositRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepositRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepositRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositRequestPayload>
          }
          findFirst: {
            args: Prisma.DepositRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepositRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositRequestPayload>
          }
          findMany: {
            args: Prisma.DepositRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositRequestPayload>[]
          }
          create: {
            args: Prisma.DepositRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositRequestPayload>
          }
          createMany: {
            args: Prisma.DepositRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepositRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositRequestPayload>[]
          }
          delete: {
            args: Prisma.DepositRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositRequestPayload>
          }
          update: {
            args: Prisma.DepositRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositRequestPayload>
          }
          deleteMany: {
            args: Prisma.DepositRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepositRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DepositRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositRequestPayload>
          }
          aggregate: {
            args: Prisma.DepositRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepositRequest>
          }
          groupBy: {
            args: Prisma.DepositRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepositRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepositRequestCountArgs<ExtArgs>
            result: $Utils.Optional<DepositRequestCountAggregateOutputType> | number
          }
        }
      }
      WithdrawalRequest: {
        payload: Prisma.$WithdrawalRequestPayload<ExtArgs>
        fields: Prisma.WithdrawalRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WithdrawalRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WithdrawalRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WithdrawalRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WithdrawalRequestPayload>
          }
          findFirst: {
            args: Prisma.WithdrawalRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WithdrawalRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WithdrawalRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WithdrawalRequestPayload>
          }
          findMany: {
            args: Prisma.WithdrawalRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WithdrawalRequestPayload>[]
          }
          create: {
            args: Prisma.WithdrawalRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WithdrawalRequestPayload>
          }
          createMany: {
            args: Prisma.WithdrawalRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WithdrawalRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WithdrawalRequestPayload>[]
          }
          delete: {
            args: Prisma.WithdrawalRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WithdrawalRequestPayload>
          }
          update: {
            args: Prisma.WithdrawalRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WithdrawalRequestPayload>
          }
          deleteMany: {
            args: Prisma.WithdrawalRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WithdrawalRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WithdrawalRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WithdrawalRequestPayload>
          }
          aggregate: {
            args: Prisma.WithdrawalRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWithdrawalRequest>
          }
          groupBy: {
            args: Prisma.WithdrawalRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<WithdrawalRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.WithdrawalRequestCountArgs<ExtArgs>
            result: $Utils.Optional<WithdrawalRequestCountAggregateOutputType> | number
          }
        }
      }
      PaymentReference: {
        payload: Prisma.$PaymentReferencePayload<ExtArgs>
        fields: Prisma.PaymentReferenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentReferenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentReferencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentReferenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentReferencePayload>
          }
          findFirst: {
            args: Prisma.PaymentReferenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentReferencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentReferenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentReferencePayload>
          }
          findMany: {
            args: Prisma.PaymentReferenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentReferencePayload>[]
          }
          create: {
            args: Prisma.PaymentReferenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentReferencePayload>
          }
          createMany: {
            args: Prisma.PaymentReferenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentReferenceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentReferencePayload>[]
          }
          delete: {
            args: Prisma.PaymentReferenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentReferencePayload>
          }
          update: {
            args: Prisma.PaymentReferenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentReferencePayload>
          }
          deleteMany: {
            args: Prisma.PaymentReferenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentReferenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PaymentReferenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentReferencePayload>
          }
          aggregate: {
            args: Prisma.PaymentReferenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaymentReference>
          }
          groupBy: {
            args: Prisma.PaymentReferenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentReferenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentReferenceCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentReferenceCountAggregateOutputType> | number
          }
        }
      }
      BankConfiguration: {
        payload: Prisma.$BankConfigurationPayload<ExtArgs>
        fields: Prisma.BankConfigurationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BankConfigurationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankConfigurationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BankConfigurationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankConfigurationPayload>
          }
          findFirst: {
            args: Prisma.BankConfigurationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankConfigurationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BankConfigurationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankConfigurationPayload>
          }
          findMany: {
            args: Prisma.BankConfigurationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankConfigurationPayload>[]
          }
          create: {
            args: Prisma.BankConfigurationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankConfigurationPayload>
          }
          createMany: {
            args: Prisma.BankConfigurationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BankConfigurationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankConfigurationPayload>[]
          }
          delete: {
            args: Prisma.BankConfigurationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankConfigurationPayload>
          }
          update: {
            args: Prisma.BankConfigurationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankConfigurationPayload>
          }
          deleteMany: {
            args: Prisma.BankConfigurationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BankConfigurationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BankConfigurationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankConfigurationPayload>
          }
          aggregate: {
            args: Prisma.BankConfigurationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBankConfiguration>
          }
          groupBy: {
            args: Prisma.BankConfigurationGroupByArgs<ExtArgs>
            result: $Utils.Optional<BankConfigurationGroupByOutputType>[]
          }
          count: {
            args: Prisma.BankConfigurationCountArgs<ExtArgs>
            result: $Utils.Optional<BankConfigurationCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      PaymentConfiguration: {
        payload: Prisma.$PaymentConfigurationPayload<ExtArgs>
        fields: Prisma.PaymentConfigurationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentConfigurationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentConfigurationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentConfigurationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentConfigurationPayload>
          }
          findFirst: {
            args: Prisma.PaymentConfigurationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentConfigurationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentConfigurationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentConfigurationPayload>
          }
          findMany: {
            args: Prisma.PaymentConfigurationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentConfigurationPayload>[]
          }
          create: {
            args: Prisma.PaymentConfigurationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentConfigurationPayload>
          }
          createMany: {
            args: Prisma.PaymentConfigurationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentConfigurationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentConfigurationPayload>[]
          }
          delete: {
            args: Prisma.PaymentConfigurationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentConfigurationPayload>
          }
          update: {
            args: Prisma.PaymentConfigurationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentConfigurationPayload>
          }
          deleteMany: {
            args: Prisma.PaymentConfigurationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentConfigurationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PaymentConfigurationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentConfigurationPayload>
          }
          aggregate: {
            args: Prisma.PaymentConfigurationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaymentConfiguration>
          }
          groupBy: {
            args: Prisma.PaymentConfigurationGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentConfigurationGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentConfigurationCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentConfigurationCountAggregateOutputType> | number
          }
        }
      }
      OpenpayCustomer: {
        payload: Prisma.$OpenpayCustomerPayload<ExtArgs>
        fields: Prisma.OpenpayCustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OpenpayCustomerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayCustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OpenpayCustomerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayCustomerPayload>
          }
          findFirst: {
            args: Prisma.OpenpayCustomerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayCustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OpenpayCustomerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayCustomerPayload>
          }
          findMany: {
            args: Prisma.OpenpayCustomerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayCustomerPayload>[]
          }
          create: {
            args: Prisma.OpenpayCustomerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayCustomerPayload>
          }
          createMany: {
            args: Prisma.OpenpayCustomerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OpenpayCustomerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayCustomerPayload>[]
          }
          delete: {
            args: Prisma.OpenpayCustomerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayCustomerPayload>
          }
          update: {
            args: Prisma.OpenpayCustomerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayCustomerPayload>
          }
          deleteMany: {
            args: Prisma.OpenpayCustomerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OpenpayCustomerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OpenpayCustomerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayCustomerPayload>
          }
          aggregate: {
            args: Prisma.OpenpayCustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOpenpayCustomer>
          }
          groupBy: {
            args: Prisma.OpenpayCustomerGroupByArgs<ExtArgs>
            result: $Utils.Optional<OpenpayCustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.OpenpayCustomerCountArgs<ExtArgs>
            result: $Utils.Optional<OpenpayCustomerCountAggregateOutputType> | number
          }
        }
      }
      OpenpayTransaction: {
        payload: Prisma.$OpenpayTransactionPayload<ExtArgs>
        fields: Prisma.OpenpayTransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OpenpayTransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayTransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OpenpayTransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayTransactionPayload>
          }
          findFirst: {
            args: Prisma.OpenpayTransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayTransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OpenpayTransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayTransactionPayload>
          }
          findMany: {
            args: Prisma.OpenpayTransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayTransactionPayload>[]
          }
          create: {
            args: Prisma.OpenpayTransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayTransactionPayload>
          }
          createMany: {
            args: Prisma.OpenpayTransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OpenpayTransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayTransactionPayload>[]
          }
          delete: {
            args: Prisma.OpenpayTransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayTransactionPayload>
          }
          update: {
            args: Prisma.OpenpayTransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayTransactionPayload>
          }
          deleteMany: {
            args: Prisma.OpenpayTransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OpenpayTransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OpenpayTransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayTransactionPayload>
          }
          aggregate: {
            args: Prisma.OpenpayTransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOpenpayTransaction>
          }
          groupBy: {
            args: Prisma.OpenpayTransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<OpenpayTransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.OpenpayTransactionCountArgs<ExtArgs>
            result: $Utils.Optional<OpenpayTransactionCountAggregateOutputType> | number
          }
        }
      }
      OpenpayWebhookEvent: {
        payload: Prisma.$OpenpayWebhookEventPayload<ExtArgs>
        fields: Prisma.OpenpayWebhookEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OpenpayWebhookEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayWebhookEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OpenpayWebhookEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayWebhookEventPayload>
          }
          findFirst: {
            args: Prisma.OpenpayWebhookEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayWebhookEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OpenpayWebhookEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayWebhookEventPayload>
          }
          findMany: {
            args: Prisma.OpenpayWebhookEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayWebhookEventPayload>[]
          }
          create: {
            args: Prisma.OpenpayWebhookEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayWebhookEventPayload>
          }
          createMany: {
            args: Prisma.OpenpayWebhookEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OpenpayWebhookEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayWebhookEventPayload>[]
          }
          delete: {
            args: Prisma.OpenpayWebhookEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayWebhookEventPayload>
          }
          update: {
            args: Prisma.OpenpayWebhookEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayWebhookEventPayload>
          }
          deleteMany: {
            args: Prisma.OpenpayWebhookEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OpenpayWebhookEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OpenpayWebhookEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayWebhookEventPayload>
          }
          aggregate: {
            args: Prisma.OpenpayWebhookEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOpenpayWebhookEvent>
          }
          groupBy: {
            args: Prisma.OpenpayWebhookEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<OpenpayWebhookEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.OpenpayWebhookEventCountArgs<ExtArgs>
            result: $Utils.Optional<OpenpayWebhookEventCountAggregateOutputType> | number
          }
        }
      }
      OpenpayPaymentMethod: {
        payload: Prisma.$OpenpayPaymentMethodPayload<ExtArgs>
        fields: Prisma.OpenpayPaymentMethodFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OpenpayPaymentMethodFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayPaymentMethodPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OpenpayPaymentMethodFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayPaymentMethodPayload>
          }
          findFirst: {
            args: Prisma.OpenpayPaymentMethodFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayPaymentMethodPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OpenpayPaymentMethodFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayPaymentMethodPayload>
          }
          findMany: {
            args: Prisma.OpenpayPaymentMethodFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayPaymentMethodPayload>[]
          }
          create: {
            args: Prisma.OpenpayPaymentMethodCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayPaymentMethodPayload>
          }
          createMany: {
            args: Prisma.OpenpayPaymentMethodCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OpenpayPaymentMethodCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayPaymentMethodPayload>[]
          }
          delete: {
            args: Prisma.OpenpayPaymentMethodDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayPaymentMethodPayload>
          }
          update: {
            args: Prisma.OpenpayPaymentMethodUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayPaymentMethodPayload>
          }
          deleteMany: {
            args: Prisma.OpenpayPaymentMethodDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OpenpayPaymentMethodUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OpenpayPaymentMethodUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenpayPaymentMethodPayload>
          }
          aggregate: {
            args: Prisma.OpenpayPaymentMethodAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOpenpayPaymentMethod>
          }
          groupBy: {
            args: Prisma.OpenpayPaymentMethodGroupByArgs<ExtArgs>
            result: $Utils.Optional<OpenpayPaymentMethodGroupByOutputType>[]
          }
          count: {
            args: Prisma.OpenpayPaymentMethodCountArgs<ExtArgs>
            result: $Utils.Optional<OpenpayPaymentMethodCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    gameParticipations: number
    bingoCards: number
    transactions: number
    depositRequests: number
    withdrawalRequests: number
    sentTransfers: number
    receivedTransfers: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gameParticipations?: boolean | UserCountOutputTypeCountGameParticipationsArgs
    bingoCards?: boolean | UserCountOutputTypeCountBingoCardsArgs
    transactions?: boolean | UserCountOutputTypeCountTransactionsArgs
    depositRequests?: boolean | UserCountOutputTypeCountDepositRequestsArgs
    withdrawalRequests?: boolean | UserCountOutputTypeCountWithdrawalRequestsArgs
    sentTransfers?: boolean | UserCountOutputTypeCountSentTransfersArgs
    receivedTransfers?: boolean | UserCountOutputTypeCountReceivedTransfersArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGameParticipationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameParticipantWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBingoCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BingoCardWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDepositRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepositRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWithdrawalRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WithdrawalRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentTransfersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedTransfersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }


  /**
   * Count Type GameCountOutputType
   */

  export type GameCountOutputType = {
    participants: number
    bingoCards: number
  }

  export type GameCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | GameCountOutputTypeCountParticipantsArgs
    bingoCards?: boolean | GameCountOutputTypeCountBingoCardsArgs
  }

  // Custom InputTypes
  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCountOutputType
     */
    select?: GameCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameParticipantWhereInput
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountBingoCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BingoCardWhereInput
  }


  /**
   * Count Type BingoCardCountOutputType
   */

  export type BingoCardCountOutputType = {
    numbers: number
  }

  export type BingoCardCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    numbers?: boolean | BingoCardCountOutputTypeCountNumbersArgs
  }

  // Custom InputTypes
  /**
   * BingoCardCountOutputType without action
   */
  export type BingoCardCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BingoCardCountOutputType
     */
    select?: BingoCardCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BingoCardCountOutputType without action
   */
  export type BingoCardCountOutputTypeCountNumbersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardNumberWhereInput
  }


  /**
   * Count Type DepositRequestCountOutputType
   */

  export type DepositRequestCountOutputType = {
    openpayTransactions: number
  }

  export type DepositRequestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    openpayTransactions?: boolean | DepositRequestCountOutputTypeCountOpenpayTransactionsArgs
  }

  // Custom InputTypes
  /**
   * DepositRequestCountOutputType without action
   */
  export type DepositRequestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositRequestCountOutputType
     */
    select?: DepositRequestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepositRequestCountOutputType without action
   */
  export type DepositRequestCountOutputTypeCountOpenpayTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OpenpayTransactionWhereInput
  }


  /**
   * Count Type OpenpayCustomerCountOutputType
   */

  export type OpenpayCustomerCountOutputType = {
    paymentMethods: number
    transactions: number
  }

  export type OpenpayCustomerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paymentMethods?: boolean | OpenpayCustomerCountOutputTypeCountPaymentMethodsArgs
    transactions?: boolean | OpenpayCustomerCountOutputTypeCountTransactionsArgs
  }

  // Custom InputTypes
  /**
   * OpenpayCustomerCountOutputType without action
   */
  export type OpenpayCustomerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayCustomerCountOutputType
     */
    select?: OpenpayCustomerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OpenpayCustomerCountOutputType without action
   */
  export type OpenpayCustomerCountOutputTypeCountPaymentMethodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OpenpayPaymentMethodWhereInput
  }

  /**
   * OpenpayCustomerCountOutputType without action
   */
  export type OpenpayCustomerCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OpenpayTransactionWhereInput
  }


  /**
   * Count Type OpenpayTransactionCountOutputType
   */

  export type OpenpayTransactionCountOutputType = {
    webhookEvents: number
  }

  export type OpenpayTransactionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    webhookEvents?: boolean | OpenpayTransactionCountOutputTypeCountWebhookEventsArgs
  }

  // Custom InputTypes
  /**
   * OpenpayTransactionCountOutputType without action
   */
  export type OpenpayTransactionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayTransactionCountOutputType
     */
    select?: OpenpayTransactionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OpenpayTransactionCountOutputType without action
   */
  export type OpenpayTransactionCountOutputTypeCountWebhookEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OpenpayWebhookEventWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    balance: Decimal | null
    pearlsBalance: Decimal | null
  }

  export type UserSumAggregateOutputType = {
    balance: Decimal | null
    pearlsBalance: Decimal | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    password: string | null
    role: string | null
    balance: Decimal | null
    pearlsBalance: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
    isVerified: boolean | null
    fullName: string | null
    phone: string | null
    dni: string | null
    birthDate: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    password: string | null
    role: string | null
    balance: Decimal | null
    pearlsBalance: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
    isVerified: boolean | null
    fullName: string | null
    phone: string | null
    dni: string | null
    birthDate: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    password: number
    role: number
    balance: number
    pearlsBalance: number
    createdAt: number
    updatedAt: number
    isActive: number
    isVerified: number
    fullName: number
    phone: number
    dni: number
    birthDate: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    balance?: true
    pearlsBalance?: true
  }

  export type UserSumAggregateInputType = {
    balance?: true
    pearlsBalance?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    role?: true
    balance?: true
    pearlsBalance?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    isVerified?: true
    fullName?: true
    phone?: true
    dni?: true
    birthDate?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    role?: true
    balance?: true
    pearlsBalance?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    isVerified?: true
    fullName?: true
    phone?: true
    dni?: true
    birthDate?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    role?: true
    balance?: true
    pearlsBalance?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    isVerified?: true
    fullName?: true
    phone?: true
    dni?: true
    birthDate?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    username: string
    password: string
    role: string
    balance: Decimal
    pearlsBalance: Decimal
    createdAt: Date
    updatedAt: Date
    isActive: boolean
    isVerified: boolean
    fullName: string | null
    phone: string | null
    dni: string | null
    birthDate: Date | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    balance?: boolean
    pearlsBalance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    isVerified?: boolean
    fullName?: boolean
    phone?: boolean
    dni?: boolean
    birthDate?: boolean
    gameParticipations?: boolean | User$gameParticipationsArgs<ExtArgs>
    bingoCards?: boolean | User$bingoCardsArgs<ExtArgs>
    transactions?: boolean | User$transactionsArgs<ExtArgs>
    wallet?: boolean | User$walletArgs<ExtArgs>
    depositRequests?: boolean | User$depositRequestsArgs<ExtArgs>
    withdrawalRequests?: boolean | User$withdrawalRequestsArgs<ExtArgs>
    sentTransfers?: boolean | User$sentTransfersArgs<ExtArgs>
    receivedTransfers?: boolean | User$receivedTransfersArgs<ExtArgs>
    openpayCustomer?: boolean | User$openpayCustomerArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    balance?: boolean
    pearlsBalance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    isVerified?: boolean
    fullName?: boolean
    phone?: boolean
    dni?: boolean
    birthDate?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    balance?: boolean
    pearlsBalance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    isVerified?: boolean
    fullName?: boolean
    phone?: boolean
    dni?: boolean
    birthDate?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gameParticipations?: boolean | User$gameParticipationsArgs<ExtArgs>
    bingoCards?: boolean | User$bingoCardsArgs<ExtArgs>
    transactions?: boolean | User$transactionsArgs<ExtArgs>
    wallet?: boolean | User$walletArgs<ExtArgs>
    depositRequests?: boolean | User$depositRequestsArgs<ExtArgs>
    withdrawalRequests?: boolean | User$withdrawalRequestsArgs<ExtArgs>
    sentTransfers?: boolean | User$sentTransfersArgs<ExtArgs>
    receivedTransfers?: boolean | User$receivedTransfersArgs<ExtArgs>
    openpayCustomer?: boolean | User$openpayCustomerArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      gameParticipations: Prisma.$GameParticipantPayload<ExtArgs>[]
      bingoCards: Prisma.$BingoCardPayload<ExtArgs>[]
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
      wallet: Prisma.$WalletPayload<ExtArgs> | null
      depositRequests: Prisma.$DepositRequestPayload<ExtArgs>[]
      withdrawalRequests: Prisma.$WithdrawalRequestPayload<ExtArgs>[]
      sentTransfers: Prisma.$TransactionPayload<ExtArgs>[]
      receivedTransfers: Prisma.$TransactionPayload<ExtArgs>[]
      openpayCustomer: Prisma.$OpenpayCustomerPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      username: string
      password: string
      role: string
      balance: Prisma.Decimal
      pearlsBalance: Prisma.Decimal
      createdAt: Date
      updatedAt: Date
      isActive: boolean
      isVerified: boolean
      fullName: string | null
      phone: string | null
      dni: string | null
      birthDate: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    gameParticipations<T extends User$gameParticipationsArgs<ExtArgs> = {}>(args?: Subset<T, User$gameParticipationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameParticipantPayload<ExtArgs>, T, "findMany"> | Null>
    bingoCards<T extends User$bingoCardsArgs<ExtArgs> = {}>(args?: Subset<T, User$bingoCardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BingoCardPayload<ExtArgs>, T, "findMany"> | Null>
    transactions<T extends User$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany"> | Null>
    wallet<T extends User$walletArgs<ExtArgs> = {}>(args?: Subset<T, User$walletArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    depositRequests<T extends User$depositRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$depositRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepositRequestPayload<ExtArgs>, T, "findMany"> | Null>
    withdrawalRequests<T extends User$withdrawalRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$withdrawalRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WithdrawalRequestPayload<ExtArgs>, T, "findMany"> | Null>
    sentTransfers<T extends User$sentTransfersArgs<ExtArgs> = {}>(args?: Subset<T, User$sentTransfersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany"> | Null>
    receivedTransfers<T extends User$receivedTransfersArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedTransfersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany"> | Null>
    openpayCustomer<T extends User$openpayCustomerArgs<ExtArgs> = {}>(args?: Subset<T, User$openpayCustomerArgs<ExtArgs>>): Prisma__OpenpayCustomerClient<$Result.GetResult<Prisma.$OpenpayCustomerPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly balance: FieldRef<"User", 'Decimal'>
    readonly pearlsBalance: FieldRef<"User", 'Decimal'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly isVerified: FieldRef<"User", 'Boolean'>
    readonly fullName: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly dni: FieldRef<"User", 'String'>
    readonly birthDate: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.gameParticipations
   */
  export type User$gameParticipationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameParticipant
     */
    select?: GameParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameParticipantInclude<ExtArgs> | null
    where?: GameParticipantWhereInput
    orderBy?: GameParticipantOrderByWithRelationInput | GameParticipantOrderByWithRelationInput[]
    cursor?: GameParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameParticipantScalarFieldEnum | GameParticipantScalarFieldEnum[]
  }

  /**
   * User.bingoCards
   */
  export type User$bingoCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BingoCard
     */
    select?: BingoCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BingoCardInclude<ExtArgs> | null
    where?: BingoCardWhereInput
    orderBy?: BingoCardOrderByWithRelationInput | BingoCardOrderByWithRelationInput[]
    cursor?: BingoCardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BingoCardScalarFieldEnum | BingoCardScalarFieldEnum[]
  }

  /**
   * User.transactions
   */
  export type User$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * User.wallet
   */
  export type User$walletArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    where?: WalletWhereInput
  }

  /**
   * User.depositRequests
   */
  export type User$depositRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositRequest
     */
    select?: DepositRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositRequestInclude<ExtArgs> | null
    where?: DepositRequestWhereInput
    orderBy?: DepositRequestOrderByWithRelationInput | DepositRequestOrderByWithRelationInput[]
    cursor?: DepositRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepositRequestScalarFieldEnum | DepositRequestScalarFieldEnum[]
  }

  /**
   * User.withdrawalRequests
   */
  export type User$withdrawalRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WithdrawalRequest
     */
    select?: WithdrawalRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WithdrawalRequestInclude<ExtArgs> | null
    where?: WithdrawalRequestWhereInput
    orderBy?: WithdrawalRequestOrderByWithRelationInput | WithdrawalRequestOrderByWithRelationInput[]
    cursor?: WithdrawalRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WithdrawalRequestScalarFieldEnum | WithdrawalRequestScalarFieldEnum[]
  }

  /**
   * User.sentTransfers
   */
  export type User$sentTransfersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * User.receivedTransfers
   */
  export type User$receivedTransfersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * User.openpayCustomer
   */
  export type User$openpayCustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayCustomer
     */
    select?: OpenpayCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayCustomerInclude<ExtArgs> | null
    where?: OpenpayCustomerWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Game
   */

  export type AggregateGame = {
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  export type GameAvgAggregateOutputType = {
    maxPlayers: number | null
    cardPrice: Decimal | null
    totalPrize: Decimal | null
    currentBall: number | null
  }

  export type GameSumAggregateOutputType = {
    maxPlayers: number | null
    cardPrice: Decimal | null
    totalPrize: Decimal | null
    currentBall: number | null
  }

  export type GameMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    maxPlayers: number | null
    cardPrice: Decimal | null
    totalPrize: Decimal | null
    status: string | null
    scheduledAt: Date | null
    startedAt: Date | null
    endedAt: Date | null
    ballsDrawn: string | null
    currentBall: number | null
    winningCards: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GameMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    maxPlayers: number | null
    cardPrice: Decimal | null
    totalPrize: Decimal | null
    status: string | null
    scheduledAt: Date | null
    startedAt: Date | null
    endedAt: Date | null
    ballsDrawn: string | null
    currentBall: number | null
    winningCards: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GameCountAggregateOutputType = {
    id: number
    title: number
    description: number
    maxPlayers: number
    cardPrice: number
    totalPrize: number
    status: number
    scheduledAt: number
    startedAt: number
    endedAt: number
    ballsDrawn: number
    currentBall: number
    winningCards: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GameAvgAggregateInputType = {
    maxPlayers?: true
    cardPrice?: true
    totalPrize?: true
    currentBall?: true
  }

  export type GameSumAggregateInputType = {
    maxPlayers?: true
    cardPrice?: true
    totalPrize?: true
    currentBall?: true
  }

  export type GameMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    maxPlayers?: true
    cardPrice?: true
    totalPrize?: true
    status?: true
    scheduledAt?: true
    startedAt?: true
    endedAt?: true
    ballsDrawn?: true
    currentBall?: true
    winningCards?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GameMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    maxPlayers?: true
    cardPrice?: true
    totalPrize?: true
    status?: true
    scheduledAt?: true
    startedAt?: true
    endedAt?: true
    ballsDrawn?: true
    currentBall?: true
    winningCards?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GameCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    maxPlayers?: true
    cardPrice?: true
    totalPrize?: true
    status?: true
    scheduledAt?: true
    startedAt?: true
    endedAt?: true
    ballsDrawn?: true
    currentBall?: true
    winningCards?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Game to aggregate.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Games
    **/
    _count?: true | GameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameMaxAggregateInputType
  }

  export type GetGameAggregateType<T extends GameAggregateArgs> = {
        [P in keyof T & keyof AggregateGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame[P]>
      : GetScalarType<T[P], AggregateGame[P]>
  }




  export type GameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
    orderBy?: GameOrderByWithAggregationInput | GameOrderByWithAggregationInput[]
    by: GameScalarFieldEnum[] | GameScalarFieldEnum
    having?: GameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameCountAggregateInputType | true
    _avg?: GameAvgAggregateInputType
    _sum?: GameSumAggregateInputType
    _min?: GameMinAggregateInputType
    _max?: GameMaxAggregateInputType
  }

  export type GameGroupByOutputType = {
    id: string
    title: string
    description: string | null
    maxPlayers: number
    cardPrice: Decimal
    totalPrize: Decimal
    status: string
    scheduledAt: Date
    startedAt: Date | null
    endedAt: Date | null
    ballsDrawn: string
    currentBall: number | null
    winningCards: string
    createdAt: Date
    updatedAt: Date
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  type GetGameGroupByPayload<T extends GameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameGroupByOutputType[P]>
            : GetScalarType<T[P], GameGroupByOutputType[P]>
        }
      >
    >


  export type GameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    maxPlayers?: boolean
    cardPrice?: boolean
    totalPrize?: boolean
    status?: boolean
    scheduledAt?: boolean
    startedAt?: boolean
    endedAt?: boolean
    ballsDrawn?: boolean
    currentBall?: boolean
    winningCards?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    participants?: boolean | Game$participantsArgs<ExtArgs>
    bingoCards?: boolean | Game$bingoCardsArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type GameSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    maxPlayers?: boolean
    cardPrice?: boolean
    totalPrize?: boolean
    status?: boolean
    scheduledAt?: boolean
    startedAt?: boolean
    endedAt?: boolean
    ballsDrawn?: boolean
    currentBall?: boolean
    winningCards?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["game"]>

  export type GameSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    maxPlayers?: boolean
    cardPrice?: boolean
    totalPrize?: boolean
    status?: boolean
    scheduledAt?: boolean
    startedAt?: boolean
    endedAt?: boolean
    ballsDrawn?: boolean
    currentBall?: boolean
    winningCards?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GameInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | Game$participantsArgs<ExtArgs>
    bingoCards?: boolean | Game$bingoCardsArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GameIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Game"
    objects: {
      participants: Prisma.$GameParticipantPayload<ExtArgs>[]
      bingoCards: Prisma.$BingoCardPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      maxPlayers: number
      cardPrice: Prisma.Decimal
      totalPrize: Prisma.Decimal
      status: string
      scheduledAt: Date
      startedAt: Date | null
      endedAt: Date | null
      ballsDrawn: string
      currentBall: number | null
      winningCards: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["game"]>
    composites: {}
  }

  type GameGetPayload<S extends boolean | null | undefined | GameDefaultArgs> = $Result.GetResult<Prisma.$GamePayload, S>

  type GameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GameFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GameCountAggregateInputType | true
    }

  export interface GameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Game'], meta: { name: 'Game' } }
    /**
     * Find zero or one Game that matches the filter.
     * @param {GameFindUniqueArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameFindUniqueArgs>(args: SelectSubset<T, GameFindUniqueArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Game that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GameFindUniqueOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameFindUniqueOrThrowArgs>(args: SelectSubset<T, GameFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Game that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameFindFirstArgs>(args?: SelectSubset<T, GameFindFirstArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Game that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameFindFirstOrThrowArgs>(args?: SelectSubset<T, GameFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Games that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Games
     * const games = await prisma.game.findMany()
     * 
     * // Get first 10 Games
     * const games = await prisma.game.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameWithIdOnly = await prisma.game.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameFindManyArgs>(args?: SelectSubset<T, GameFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Game.
     * @param {GameCreateArgs} args - Arguments to create a Game.
     * @example
     * // Create one Game
     * const Game = await prisma.game.create({
     *   data: {
     *     // ... data to create a Game
     *   }
     * })
     * 
     */
    create<T extends GameCreateArgs>(args: SelectSubset<T, GameCreateArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Games.
     * @param {GameCreateManyArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameCreateManyArgs>(args?: SelectSubset<T, GameCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Games and returns the data saved in the database.
     * @param {GameCreateManyAndReturnArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Games and only return the `id`
     * const gameWithIdOnly = await prisma.game.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameCreateManyAndReturnArgs>(args?: SelectSubset<T, GameCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Game.
     * @param {GameDeleteArgs} args - Arguments to delete one Game.
     * @example
     * // Delete one Game
     * const Game = await prisma.game.delete({
     *   where: {
     *     // ... filter to delete one Game
     *   }
     * })
     * 
     */
    delete<T extends GameDeleteArgs>(args: SelectSubset<T, GameDeleteArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Game.
     * @param {GameUpdateArgs} args - Arguments to update one Game.
     * @example
     * // Update one Game
     * const game = await prisma.game.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameUpdateArgs>(args: SelectSubset<T, GameUpdateArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Games.
     * @param {GameDeleteManyArgs} args - Arguments to filter Games to delete.
     * @example
     * // Delete a few Games
     * const { count } = await prisma.game.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameDeleteManyArgs>(args?: SelectSubset<T, GameDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameUpdateManyArgs>(args: SelectSubset<T, GameUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Game.
     * @param {GameUpsertArgs} args - Arguments to update or create a Game.
     * @example
     * // Update or create a Game
     * const game = await prisma.game.upsert({
     *   create: {
     *     // ... data to create a Game
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game we want to update
     *   }
     * })
     */
    upsert<T extends GameUpsertArgs>(args: SelectSubset<T, GameUpsertArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCountArgs} args - Arguments to filter Games to count.
     * @example
     * // Count the number of Games
     * const count = await prisma.game.count({
     *   where: {
     *     // ... the filter for the Games we want to count
     *   }
     * })
    **/
    count<T extends GameCountArgs>(
      args?: Subset<T, GameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameAggregateArgs>(args: Subset<T, GameAggregateArgs>): Prisma.PrismaPromise<GetGameAggregateType<T>>

    /**
     * Group by Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameGroupByArgs['orderBy'] }
        : { orderBy?: GameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Game model
   */
  readonly fields: GameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Game.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    participants<T extends Game$participantsArgs<ExtArgs> = {}>(args?: Subset<T, Game$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameParticipantPayload<ExtArgs>, T, "findMany"> | Null>
    bingoCards<T extends Game$bingoCardsArgs<ExtArgs> = {}>(args?: Subset<T, Game$bingoCardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BingoCardPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Game model
   */ 
  interface GameFieldRefs {
    readonly id: FieldRef<"Game", 'String'>
    readonly title: FieldRef<"Game", 'String'>
    readonly description: FieldRef<"Game", 'String'>
    readonly maxPlayers: FieldRef<"Game", 'Int'>
    readonly cardPrice: FieldRef<"Game", 'Decimal'>
    readonly totalPrize: FieldRef<"Game", 'Decimal'>
    readonly status: FieldRef<"Game", 'String'>
    readonly scheduledAt: FieldRef<"Game", 'DateTime'>
    readonly startedAt: FieldRef<"Game", 'DateTime'>
    readonly endedAt: FieldRef<"Game", 'DateTime'>
    readonly ballsDrawn: FieldRef<"Game", 'String'>
    readonly currentBall: FieldRef<"Game", 'Int'>
    readonly winningCards: FieldRef<"Game", 'String'>
    readonly createdAt: FieldRef<"Game", 'DateTime'>
    readonly updatedAt: FieldRef<"Game", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Game findUnique
   */
  export type GameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findUniqueOrThrow
   */
  export type GameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findFirst
   */
  export type GameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game findFirstOrThrow
   */
  export type GameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game findMany
   */
  export type GameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Games to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game create
   */
  export type GameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to create a Game.
     */
    data: XOR<GameCreateInput, GameUncheckedCreateInput>
  }

  /**
   * Game createMany
   */
  export type GameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
  }

  /**
   * Game createManyAndReturn
   */
  export type GameCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
  }

  /**
   * Game update
   */
  export type GameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to update a Game.
     */
    data: XOR<GameUpdateInput, GameUncheckedUpdateInput>
    /**
     * Choose, which Game to update.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game updateMany
   */
  export type GameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
  }

  /**
   * Game upsert
   */
  export type GameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The filter to search for the Game to update in case it exists.
     */
    where: GameWhereUniqueInput
    /**
     * In case the Game found by the `where` argument doesn't exist, create a new Game with this data.
     */
    create: XOR<GameCreateInput, GameUncheckedCreateInput>
    /**
     * In case the Game was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameUpdateInput, GameUncheckedUpdateInput>
  }

  /**
   * Game delete
   */
  export type GameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter which Game to delete.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game deleteMany
   */
  export type GameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Games to delete
     */
    where?: GameWhereInput
  }

  /**
   * Game.participants
   */
  export type Game$participantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameParticipant
     */
    select?: GameParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameParticipantInclude<ExtArgs> | null
    where?: GameParticipantWhereInput
    orderBy?: GameParticipantOrderByWithRelationInput | GameParticipantOrderByWithRelationInput[]
    cursor?: GameParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameParticipantScalarFieldEnum | GameParticipantScalarFieldEnum[]
  }

  /**
   * Game.bingoCards
   */
  export type Game$bingoCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BingoCard
     */
    select?: BingoCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BingoCardInclude<ExtArgs> | null
    where?: BingoCardWhereInput
    orderBy?: BingoCardOrderByWithRelationInput | BingoCardOrderByWithRelationInput[]
    cursor?: BingoCardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BingoCardScalarFieldEnum | BingoCardScalarFieldEnum[]
  }

  /**
   * Game without action
   */
  export type GameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
  }


  /**
   * Model GameParticipant
   */

  export type AggregateGameParticipant = {
    _count: GameParticipantCountAggregateOutputType | null
    _avg: GameParticipantAvgAggregateOutputType | null
    _sum: GameParticipantSumAggregateOutputType | null
    _min: GameParticipantMinAggregateOutputType | null
    _max: GameParticipantMaxAggregateOutputType | null
  }

  export type GameParticipantAvgAggregateOutputType = {
    cardsCount: number | null
    totalSpent: Decimal | null
    prizeWon: Decimal | null
  }

  export type GameParticipantSumAggregateOutputType = {
    cardsCount: number | null
    totalSpent: Decimal | null
    prizeWon: Decimal | null
  }

  export type GameParticipantMinAggregateOutputType = {
    id: string | null
    userId: string | null
    gameId: string | null
    joinedAt: Date | null
    cardsCount: number | null
    totalSpent: Decimal | null
    hasWon: boolean | null
    prizeWon: Decimal | null
  }

  export type GameParticipantMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    gameId: string | null
    joinedAt: Date | null
    cardsCount: number | null
    totalSpent: Decimal | null
    hasWon: boolean | null
    prizeWon: Decimal | null
  }

  export type GameParticipantCountAggregateOutputType = {
    id: number
    userId: number
    gameId: number
    joinedAt: number
    cardsCount: number
    totalSpent: number
    hasWon: number
    prizeWon: number
    _all: number
  }


  export type GameParticipantAvgAggregateInputType = {
    cardsCount?: true
    totalSpent?: true
    prizeWon?: true
  }

  export type GameParticipantSumAggregateInputType = {
    cardsCount?: true
    totalSpent?: true
    prizeWon?: true
  }

  export type GameParticipantMinAggregateInputType = {
    id?: true
    userId?: true
    gameId?: true
    joinedAt?: true
    cardsCount?: true
    totalSpent?: true
    hasWon?: true
    prizeWon?: true
  }

  export type GameParticipantMaxAggregateInputType = {
    id?: true
    userId?: true
    gameId?: true
    joinedAt?: true
    cardsCount?: true
    totalSpent?: true
    hasWon?: true
    prizeWon?: true
  }

  export type GameParticipantCountAggregateInputType = {
    id?: true
    userId?: true
    gameId?: true
    joinedAt?: true
    cardsCount?: true
    totalSpent?: true
    hasWon?: true
    prizeWon?: true
    _all?: true
  }

  export type GameParticipantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameParticipant to aggregate.
     */
    where?: GameParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameParticipants to fetch.
     */
    orderBy?: GameParticipantOrderByWithRelationInput | GameParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameParticipants
    **/
    _count?: true | GameParticipantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameParticipantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameParticipantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameParticipantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameParticipantMaxAggregateInputType
  }

  export type GetGameParticipantAggregateType<T extends GameParticipantAggregateArgs> = {
        [P in keyof T & keyof AggregateGameParticipant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameParticipant[P]>
      : GetScalarType<T[P], AggregateGameParticipant[P]>
  }




  export type GameParticipantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameParticipantWhereInput
    orderBy?: GameParticipantOrderByWithAggregationInput | GameParticipantOrderByWithAggregationInput[]
    by: GameParticipantScalarFieldEnum[] | GameParticipantScalarFieldEnum
    having?: GameParticipantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameParticipantCountAggregateInputType | true
    _avg?: GameParticipantAvgAggregateInputType
    _sum?: GameParticipantSumAggregateInputType
    _min?: GameParticipantMinAggregateInputType
    _max?: GameParticipantMaxAggregateInputType
  }

  export type GameParticipantGroupByOutputType = {
    id: string
    userId: string
    gameId: string
    joinedAt: Date
    cardsCount: number
    totalSpent: Decimal
    hasWon: boolean
    prizeWon: Decimal
    _count: GameParticipantCountAggregateOutputType | null
    _avg: GameParticipantAvgAggregateOutputType | null
    _sum: GameParticipantSumAggregateOutputType | null
    _min: GameParticipantMinAggregateOutputType | null
    _max: GameParticipantMaxAggregateOutputType | null
  }

  type GetGameParticipantGroupByPayload<T extends GameParticipantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameParticipantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameParticipantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameParticipantGroupByOutputType[P]>
            : GetScalarType<T[P], GameParticipantGroupByOutputType[P]>
        }
      >
    >


  export type GameParticipantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    gameId?: boolean
    joinedAt?: boolean
    cardsCount?: boolean
    totalSpent?: boolean
    hasWon?: boolean
    prizeWon?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameParticipant"]>

  export type GameParticipantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    gameId?: boolean
    joinedAt?: boolean
    cardsCount?: boolean
    totalSpent?: boolean
    hasWon?: boolean
    prizeWon?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameParticipant"]>

  export type GameParticipantSelectScalar = {
    id?: boolean
    userId?: boolean
    gameId?: boolean
    joinedAt?: boolean
    cardsCount?: boolean
    totalSpent?: boolean
    hasWon?: boolean
    prizeWon?: boolean
  }

  export type GameParticipantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }
  export type GameParticipantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }

  export type $GameParticipantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameParticipant"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      game: Prisma.$GamePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      gameId: string
      joinedAt: Date
      cardsCount: number
      totalSpent: Prisma.Decimal
      hasWon: boolean
      prizeWon: Prisma.Decimal
    }, ExtArgs["result"]["gameParticipant"]>
    composites: {}
  }

  type GameParticipantGetPayload<S extends boolean | null | undefined | GameParticipantDefaultArgs> = $Result.GetResult<Prisma.$GameParticipantPayload, S>

  type GameParticipantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GameParticipantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GameParticipantCountAggregateInputType | true
    }

  export interface GameParticipantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameParticipant'], meta: { name: 'GameParticipant' } }
    /**
     * Find zero or one GameParticipant that matches the filter.
     * @param {GameParticipantFindUniqueArgs} args - Arguments to find a GameParticipant
     * @example
     * // Get one GameParticipant
     * const gameParticipant = await prisma.gameParticipant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameParticipantFindUniqueArgs>(args: SelectSubset<T, GameParticipantFindUniqueArgs<ExtArgs>>): Prisma__GameParticipantClient<$Result.GetResult<Prisma.$GameParticipantPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GameParticipant that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GameParticipantFindUniqueOrThrowArgs} args - Arguments to find a GameParticipant
     * @example
     * // Get one GameParticipant
     * const gameParticipant = await prisma.gameParticipant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameParticipantFindUniqueOrThrowArgs>(args: SelectSubset<T, GameParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameParticipantClient<$Result.GetResult<Prisma.$GameParticipantPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GameParticipant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameParticipantFindFirstArgs} args - Arguments to find a GameParticipant
     * @example
     * // Get one GameParticipant
     * const gameParticipant = await prisma.gameParticipant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameParticipantFindFirstArgs>(args?: SelectSubset<T, GameParticipantFindFirstArgs<ExtArgs>>): Prisma__GameParticipantClient<$Result.GetResult<Prisma.$GameParticipantPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GameParticipant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameParticipantFindFirstOrThrowArgs} args - Arguments to find a GameParticipant
     * @example
     * // Get one GameParticipant
     * const gameParticipant = await prisma.gameParticipant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameParticipantFindFirstOrThrowArgs>(args?: SelectSubset<T, GameParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameParticipantClient<$Result.GetResult<Prisma.$GameParticipantPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GameParticipants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameParticipants
     * const gameParticipants = await prisma.gameParticipant.findMany()
     * 
     * // Get first 10 GameParticipants
     * const gameParticipants = await prisma.gameParticipant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameParticipantWithIdOnly = await prisma.gameParticipant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameParticipantFindManyArgs>(args?: SelectSubset<T, GameParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameParticipantPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GameParticipant.
     * @param {GameParticipantCreateArgs} args - Arguments to create a GameParticipant.
     * @example
     * // Create one GameParticipant
     * const GameParticipant = await prisma.gameParticipant.create({
     *   data: {
     *     // ... data to create a GameParticipant
     *   }
     * })
     * 
     */
    create<T extends GameParticipantCreateArgs>(args: SelectSubset<T, GameParticipantCreateArgs<ExtArgs>>): Prisma__GameParticipantClient<$Result.GetResult<Prisma.$GameParticipantPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GameParticipants.
     * @param {GameParticipantCreateManyArgs} args - Arguments to create many GameParticipants.
     * @example
     * // Create many GameParticipants
     * const gameParticipant = await prisma.gameParticipant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameParticipantCreateManyArgs>(args?: SelectSubset<T, GameParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GameParticipants and returns the data saved in the database.
     * @param {GameParticipantCreateManyAndReturnArgs} args - Arguments to create many GameParticipants.
     * @example
     * // Create many GameParticipants
     * const gameParticipant = await prisma.gameParticipant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GameParticipants and only return the `id`
     * const gameParticipantWithIdOnly = await prisma.gameParticipant.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameParticipantCreateManyAndReturnArgs>(args?: SelectSubset<T, GameParticipantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameParticipantPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a GameParticipant.
     * @param {GameParticipantDeleteArgs} args - Arguments to delete one GameParticipant.
     * @example
     * // Delete one GameParticipant
     * const GameParticipant = await prisma.gameParticipant.delete({
     *   where: {
     *     // ... filter to delete one GameParticipant
     *   }
     * })
     * 
     */
    delete<T extends GameParticipantDeleteArgs>(args: SelectSubset<T, GameParticipantDeleteArgs<ExtArgs>>): Prisma__GameParticipantClient<$Result.GetResult<Prisma.$GameParticipantPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GameParticipant.
     * @param {GameParticipantUpdateArgs} args - Arguments to update one GameParticipant.
     * @example
     * // Update one GameParticipant
     * const gameParticipant = await prisma.gameParticipant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameParticipantUpdateArgs>(args: SelectSubset<T, GameParticipantUpdateArgs<ExtArgs>>): Prisma__GameParticipantClient<$Result.GetResult<Prisma.$GameParticipantPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GameParticipants.
     * @param {GameParticipantDeleteManyArgs} args - Arguments to filter GameParticipants to delete.
     * @example
     * // Delete a few GameParticipants
     * const { count } = await prisma.gameParticipant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameParticipantDeleteManyArgs>(args?: SelectSubset<T, GameParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameParticipantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameParticipants
     * const gameParticipant = await prisma.gameParticipant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameParticipantUpdateManyArgs>(args: SelectSubset<T, GameParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GameParticipant.
     * @param {GameParticipantUpsertArgs} args - Arguments to update or create a GameParticipant.
     * @example
     * // Update or create a GameParticipant
     * const gameParticipant = await prisma.gameParticipant.upsert({
     *   create: {
     *     // ... data to create a GameParticipant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameParticipant we want to update
     *   }
     * })
     */
    upsert<T extends GameParticipantUpsertArgs>(args: SelectSubset<T, GameParticipantUpsertArgs<ExtArgs>>): Prisma__GameParticipantClient<$Result.GetResult<Prisma.$GameParticipantPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GameParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameParticipantCountArgs} args - Arguments to filter GameParticipants to count.
     * @example
     * // Count the number of GameParticipants
     * const count = await prisma.gameParticipant.count({
     *   where: {
     *     // ... the filter for the GameParticipants we want to count
     *   }
     * })
    **/
    count<T extends GameParticipantCountArgs>(
      args?: Subset<T, GameParticipantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameParticipantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameParticipantAggregateArgs>(args: Subset<T, GameParticipantAggregateArgs>): Prisma.PrismaPromise<GetGameParticipantAggregateType<T>>

    /**
     * Group by GameParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameParticipantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameParticipantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameParticipantGroupByArgs['orderBy'] }
        : { orderBy?: GameParticipantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameParticipant model
   */
  readonly fields: GameParticipantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameParticipant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameParticipantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameParticipant model
   */ 
  interface GameParticipantFieldRefs {
    readonly id: FieldRef<"GameParticipant", 'String'>
    readonly userId: FieldRef<"GameParticipant", 'String'>
    readonly gameId: FieldRef<"GameParticipant", 'String'>
    readonly joinedAt: FieldRef<"GameParticipant", 'DateTime'>
    readonly cardsCount: FieldRef<"GameParticipant", 'Int'>
    readonly totalSpent: FieldRef<"GameParticipant", 'Decimal'>
    readonly hasWon: FieldRef<"GameParticipant", 'Boolean'>
    readonly prizeWon: FieldRef<"GameParticipant", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * GameParticipant findUnique
   */
  export type GameParticipantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameParticipant
     */
    select?: GameParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameParticipantInclude<ExtArgs> | null
    /**
     * Filter, which GameParticipant to fetch.
     */
    where: GameParticipantWhereUniqueInput
  }

  /**
   * GameParticipant findUniqueOrThrow
   */
  export type GameParticipantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameParticipant
     */
    select?: GameParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameParticipantInclude<ExtArgs> | null
    /**
     * Filter, which GameParticipant to fetch.
     */
    where: GameParticipantWhereUniqueInput
  }

  /**
   * GameParticipant findFirst
   */
  export type GameParticipantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameParticipant
     */
    select?: GameParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameParticipantInclude<ExtArgs> | null
    /**
     * Filter, which GameParticipant to fetch.
     */
    where?: GameParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameParticipants to fetch.
     */
    orderBy?: GameParticipantOrderByWithRelationInput | GameParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameParticipants.
     */
    cursor?: GameParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameParticipants.
     */
    distinct?: GameParticipantScalarFieldEnum | GameParticipantScalarFieldEnum[]
  }

  /**
   * GameParticipant findFirstOrThrow
   */
  export type GameParticipantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameParticipant
     */
    select?: GameParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameParticipantInclude<ExtArgs> | null
    /**
     * Filter, which GameParticipant to fetch.
     */
    where?: GameParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameParticipants to fetch.
     */
    orderBy?: GameParticipantOrderByWithRelationInput | GameParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameParticipants.
     */
    cursor?: GameParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameParticipants.
     */
    distinct?: GameParticipantScalarFieldEnum | GameParticipantScalarFieldEnum[]
  }

  /**
   * GameParticipant findMany
   */
  export type GameParticipantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameParticipant
     */
    select?: GameParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameParticipantInclude<ExtArgs> | null
    /**
     * Filter, which GameParticipants to fetch.
     */
    where?: GameParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameParticipants to fetch.
     */
    orderBy?: GameParticipantOrderByWithRelationInput | GameParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameParticipants.
     */
    cursor?: GameParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameParticipants.
     */
    skip?: number
    distinct?: GameParticipantScalarFieldEnum | GameParticipantScalarFieldEnum[]
  }

  /**
   * GameParticipant create
   */
  export type GameParticipantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameParticipant
     */
    select?: GameParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameParticipantInclude<ExtArgs> | null
    /**
     * The data needed to create a GameParticipant.
     */
    data: XOR<GameParticipantCreateInput, GameParticipantUncheckedCreateInput>
  }

  /**
   * GameParticipant createMany
   */
  export type GameParticipantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameParticipants.
     */
    data: GameParticipantCreateManyInput | GameParticipantCreateManyInput[]
  }

  /**
   * GameParticipant createManyAndReturn
   */
  export type GameParticipantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameParticipant
     */
    select?: GameParticipantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many GameParticipants.
     */
    data: GameParticipantCreateManyInput | GameParticipantCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameParticipantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameParticipant update
   */
  export type GameParticipantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameParticipant
     */
    select?: GameParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameParticipantInclude<ExtArgs> | null
    /**
     * The data needed to update a GameParticipant.
     */
    data: XOR<GameParticipantUpdateInput, GameParticipantUncheckedUpdateInput>
    /**
     * Choose, which GameParticipant to update.
     */
    where: GameParticipantWhereUniqueInput
  }

  /**
   * GameParticipant updateMany
   */
  export type GameParticipantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameParticipants.
     */
    data: XOR<GameParticipantUpdateManyMutationInput, GameParticipantUncheckedUpdateManyInput>
    /**
     * Filter which GameParticipants to update
     */
    where?: GameParticipantWhereInput
  }

  /**
   * GameParticipant upsert
   */
  export type GameParticipantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameParticipant
     */
    select?: GameParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameParticipantInclude<ExtArgs> | null
    /**
     * The filter to search for the GameParticipant to update in case it exists.
     */
    where: GameParticipantWhereUniqueInput
    /**
     * In case the GameParticipant found by the `where` argument doesn't exist, create a new GameParticipant with this data.
     */
    create: XOR<GameParticipantCreateInput, GameParticipantUncheckedCreateInput>
    /**
     * In case the GameParticipant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameParticipantUpdateInput, GameParticipantUncheckedUpdateInput>
  }

  /**
   * GameParticipant delete
   */
  export type GameParticipantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameParticipant
     */
    select?: GameParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameParticipantInclude<ExtArgs> | null
    /**
     * Filter which GameParticipant to delete.
     */
    where: GameParticipantWhereUniqueInput
  }

  /**
   * GameParticipant deleteMany
   */
  export type GameParticipantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameParticipants to delete
     */
    where?: GameParticipantWhereInput
  }

  /**
   * GameParticipant without action
   */
  export type GameParticipantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameParticipant
     */
    select?: GameParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameParticipantInclude<ExtArgs> | null
  }


  /**
   * Model BingoCard
   */

  export type AggregateBingoCard = {
    _count: BingoCardCountAggregateOutputType | null
    _avg: BingoCardAvgAggregateOutputType | null
    _sum: BingoCardSumAggregateOutputType | null
    _min: BingoCardMinAggregateOutputType | null
    _max: BingoCardMaxAggregateOutputType | null
  }

  export type BingoCardAvgAggregateOutputType = {
    cardNumber: number | null
  }

  export type BingoCardSumAggregateOutputType = {
    cardNumber: number | null
  }

  export type BingoCardMinAggregateOutputType = {
    id: string | null
    userId: string | null
    gameId: string | null
    cardNumber: number | null
    isActive: boolean | null
    markedNumbers: string | null
    isWinner: boolean | null
    winningPattern: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BingoCardMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    gameId: string | null
    cardNumber: number | null
    isActive: boolean | null
    markedNumbers: string | null
    isWinner: boolean | null
    winningPattern: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BingoCardCountAggregateOutputType = {
    id: number
    userId: number
    gameId: number
    cardNumber: number
    isActive: number
    markedNumbers: number
    isWinner: number
    winningPattern: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BingoCardAvgAggregateInputType = {
    cardNumber?: true
  }

  export type BingoCardSumAggregateInputType = {
    cardNumber?: true
  }

  export type BingoCardMinAggregateInputType = {
    id?: true
    userId?: true
    gameId?: true
    cardNumber?: true
    isActive?: true
    markedNumbers?: true
    isWinner?: true
    winningPattern?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BingoCardMaxAggregateInputType = {
    id?: true
    userId?: true
    gameId?: true
    cardNumber?: true
    isActive?: true
    markedNumbers?: true
    isWinner?: true
    winningPattern?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BingoCardCountAggregateInputType = {
    id?: true
    userId?: true
    gameId?: true
    cardNumber?: true
    isActive?: true
    markedNumbers?: true
    isWinner?: true
    winningPattern?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BingoCardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BingoCard to aggregate.
     */
    where?: BingoCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BingoCards to fetch.
     */
    orderBy?: BingoCardOrderByWithRelationInput | BingoCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BingoCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BingoCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BingoCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BingoCards
    **/
    _count?: true | BingoCardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BingoCardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BingoCardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BingoCardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BingoCardMaxAggregateInputType
  }

  export type GetBingoCardAggregateType<T extends BingoCardAggregateArgs> = {
        [P in keyof T & keyof AggregateBingoCard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBingoCard[P]>
      : GetScalarType<T[P], AggregateBingoCard[P]>
  }




  export type BingoCardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BingoCardWhereInput
    orderBy?: BingoCardOrderByWithAggregationInput | BingoCardOrderByWithAggregationInput[]
    by: BingoCardScalarFieldEnum[] | BingoCardScalarFieldEnum
    having?: BingoCardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BingoCardCountAggregateInputType | true
    _avg?: BingoCardAvgAggregateInputType
    _sum?: BingoCardSumAggregateInputType
    _min?: BingoCardMinAggregateInputType
    _max?: BingoCardMaxAggregateInputType
  }

  export type BingoCardGroupByOutputType = {
    id: string
    userId: string
    gameId: string
    cardNumber: number
    isActive: boolean
    markedNumbers: string
    isWinner: boolean
    winningPattern: string | null
    createdAt: Date
    updatedAt: Date
    _count: BingoCardCountAggregateOutputType | null
    _avg: BingoCardAvgAggregateOutputType | null
    _sum: BingoCardSumAggregateOutputType | null
    _min: BingoCardMinAggregateOutputType | null
    _max: BingoCardMaxAggregateOutputType | null
  }

  type GetBingoCardGroupByPayload<T extends BingoCardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BingoCardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BingoCardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BingoCardGroupByOutputType[P]>
            : GetScalarType<T[P], BingoCardGroupByOutputType[P]>
        }
      >
    >


  export type BingoCardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    gameId?: boolean
    cardNumber?: boolean
    isActive?: boolean
    markedNumbers?: boolean
    isWinner?: boolean
    winningPattern?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
    numbers?: boolean | BingoCard$numbersArgs<ExtArgs>
    _count?: boolean | BingoCardCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bingoCard"]>

  export type BingoCardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    gameId?: boolean
    cardNumber?: boolean
    isActive?: boolean
    markedNumbers?: boolean
    isWinner?: boolean
    winningPattern?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bingoCard"]>

  export type BingoCardSelectScalar = {
    id?: boolean
    userId?: boolean
    gameId?: boolean
    cardNumber?: boolean
    isActive?: boolean
    markedNumbers?: boolean
    isWinner?: boolean
    winningPattern?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BingoCardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
    numbers?: boolean | BingoCard$numbersArgs<ExtArgs>
    _count?: boolean | BingoCardCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BingoCardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }

  export type $BingoCardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BingoCard"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      game: Prisma.$GamePayload<ExtArgs>
      numbers: Prisma.$CardNumberPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      gameId: string
      cardNumber: number
      isActive: boolean
      markedNumbers: string
      isWinner: boolean
      winningPattern: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["bingoCard"]>
    composites: {}
  }

  type BingoCardGetPayload<S extends boolean | null | undefined | BingoCardDefaultArgs> = $Result.GetResult<Prisma.$BingoCardPayload, S>

  type BingoCardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BingoCardFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BingoCardCountAggregateInputType | true
    }

  export interface BingoCardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BingoCard'], meta: { name: 'BingoCard' } }
    /**
     * Find zero or one BingoCard that matches the filter.
     * @param {BingoCardFindUniqueArgs} args - Arguments to find a BingoCard
     * @example
     * // Get one BingoCard
     * const bingoCard = await prisma.bingoCard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BingoCardFindUniqueArgs>(args: SelectSubset<T, BingoCardFindUniqueArgs<ExtArgs>>): Prisma__BingoCardClient<$Result.GetResult<Prisma.$BingoCardPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BingoCard that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BingoCardFindUniqueOrThrowArgs} args - Arguments to find a BingoCard
     * @example
     * // Get one BingoCard
     * const bingoCard = await prisma.bingoCard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BingoCardFindUniqueOrThrowArgs>(args: SelectSubset<T, BingoCardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BingoCardClient<$Result.GetResult<Prisma.$BingoCardPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BingoCard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BingoCardFindFirstArgs} args - Arguments to find a BingoCard
     * @example
     * // Get one BingoCard
     * const bingoCard = await prisma.bingoCard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BingoCardFindFirstArgs>(args?: SelectSubset<T, BingoCardFindFirstArgs<ExtArgs>>): Prisma__BingoCardClient<$Result.GetResult<Prisma.$BingoCardPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BingoCard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BingoCardFindFirstOrThrowArgs} args - Arguments to find a BingoCard
     * @example
     * // Get one BingoCard
     * const bingoCard = await prisma.bingoCard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BingoCardFindFirstOrThrowArgs>(args?: SelectSubset<T, BingoCardFindFirstOrThrowArgs<ExtArgs>>): Prisma__BingoCardClient<$Result.GetResult<Prisma.$BingoCardPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BingoCards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BingoCardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BingoCards
     * const bingoCards = await prisma.bingoCard.findMany()
     * 
     * // Get first 10 BingoCards
     * const bingoCards = await prisma.bingoCard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bingoCardWithIdOnly = await prisma.bingoCard.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BingoCardFindManyArgs>(args?: SelectSubset<T, BingoCardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BingoCardPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BingoCard.
     * @param {BingoCardCreateArgs} args - Arguments to create a BingoCard.
     * @example
     * // Create one BingoCard
     * const BingoCard = await prisma.bingoCard.create({
     *   data: {
     *     // ... data to create a BingoCard
     *   }
     * })
     * 
     */
    create<T extends BingoCardCreateArgs>(args: SelectSubset<T, BingoCardCreateArgs<ExtArgs>>): Prisma__BingoCardClient<$Result.GetResult<Prisma.$BingoCardPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BingoCards.
     * @param {BingoCardCreateManyArgs} args - Arguments to create many BingoCards.
     * @example
     * // Create many BingoCards
     * const bingoCard = await prisma.bingoCard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BingoCardCreateManyArgs>(args?: SelectSubset<T, BingoCardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BingoCards and returns the data saved in the database.
     * @param {BingoCardCreateManyAndReturnArgs} args - Arguments to create many BingoCards.
     * @example
     * // Create many BingoCards
     * const bingoCard = await prisma.bingoCard.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BingoCards and only return the `id`
     * const bingoCardWithIdOnly = await prisma.bingoCard.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BingoCardCreateManyAndReturnArgs>(args?: SelectSubset<T, BingoCardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BingoCardPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BingoCard.
     * @param {BingoCardDeleteArgs} args - Arguments to delete one BingoCard.
     * @example
     * // Delete one BingoCard
     * const BingoCard = await prisma.bingoCard.delete({
     *   where: {
     *     // ... filter to delete one BingoCard
     *   }
     * })
     * 
     */
    delete<T extends BingoCardDeleteArgs>(args: SelectSubset<T, BingoCardDeleteArgs<ExtArgs>>): Prisma__BingoCardClient<$Result.GetResult<Prisma.$BingoCardPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BingoCard.
     * @param {BingoCardUpdateArgs} args - Arguments to update one BingoCard.
     * @example
     * // Update one BingoCard
     * const bingoCard = await prisma.bingoCard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BingoCardUpdateArgs>(args: SelectSubset<T, BingoCardUpdateArgs<ExtArgs>>): Prisma__BingoCardClient<$Result.GetResult<Prisma.$BingoCardPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BingoCards.
     * @param {BingoCardDeleteManyArgs} args - Arguments to filter BingoCards to delete.
     * @example
     * // Delete a few BingoCards
     * const { count } = await prisma.bingoCard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BingoCardDeleteManyArgs>(args?: SelectSubset<T, BingoCardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BingoCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BingoCardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BingoCards
     * const bingoCard = await prisma.bingoCard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BingoCardUpdateManyArgs>(args: SelectSubset<T, BingoCardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BingoCard.
     * @param {BingoCardUpsertArgs} args - Arguments to update or create a BingoCard.
     * @example
     * // Update or create a BingoCard
     * const bingoCard = await prisma.bingoCard.upsert({
     *   create: {
     *     // ... data to create a BingoCard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BingoCard we want to update
     *   }
     * })
     */
    upsert<T extends BingoCardUpsertArgs>(args: SelectSubset<T, BingoCardUpsertArgs<ExtArgs>>): Prisma__BingoCardClient<$Result.GetResult<Prisma.$BingoCardPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BingoCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BingoCardCountArgs} args - Arguments to filter BingoCards to count.
     * @example
     * // Count the number of BingoCards
     * const count = await prisma.bingoCard.count({
     *   where: {
     *     // ... the filter for the BingoCards we want to count
     *   }
     * })
    **/
    count<T extends BingoCardCountArgs>(
      args?: Subset<T, BingoCardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BingoCardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BingoCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BingoCardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BingoCardAggregateArgs>(args: Subset<T, BingoCardAggregateArgs>): Prisma.PrismaPromise<GetBingoCardAggregateType<T>>

    /**
     * Group by BingoCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BingoCardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BingoCardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BingoCardGroupByArgs['orderBy'] }
        : { orderBy?: BingoCardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BingoCardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBingoCardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BingoCard model
   */
  readonly fields: BingoCardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BingoCard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BingoCardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    numbers<T extends BingoCard$numbersArgs<ExtArgs> = {}>(args?: Subset<T, BingoCard$numbersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardNumberPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BingoCard model
   */ 
  interface BingoCardFieldRefs {
    readonly id: FieldRef<"BingoCard", 'String'>
    readonly userId: FieldRef<"BingoCard", 'String'>
    readonly gameId: FieldRef<"BingoCard", 'String'>
    readonly cardNumber: FieldRef<"BingoCard", 'Int'>
    readonly isActive: FieldRef<"BingoCard", 'Boolean'>
    readonly markedNumbers: FieldRef<"BingoCard", 'String'>
    readonly isWinner: FieldRef<"BingoCard", 'Boolean'>
    readonly winningPattern: FieldRef<"BingoCard", 'String'>
    readonly createdAt: FieldRef<"BingoCard", 'DateTime'>
    readonly updatedAt: FieldRef<"BingoCard", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BingoCard findUnique
   */
  export type BingoCardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BingoCard
     */
    select?: BingoCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BingoCardInclude<ExtArgs> | null
    /**
     * Filter, which BingoCard to fetch.
     */
    where: BingoCardWhereUniqueInput
  }

  /**
   * BingoCard findUniqueOrThrow
   */
  export type BingoCardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BingoCard
     */
    select?: BingoCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BingoCardInclude<ExtArgs> | null
    /**
     * Filter, which BingoCard to fetch.
     */
    where: BingoCardWhereUniqueInput
  }

  /**
   * BingoCard findFirst
   */
  export type BingoCardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BingoCard
     */
    select?: BingoCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BingoCardInclude<ExtArgs> | null
    /**
     * Filter, which BingoCard to fetch.
     */
    where?: BingoCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BingoCards to fetch.
     */
    orderBy?: BingoCardOrderByWithRelationInput | BingoCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BingoCards.
     */
    cursor?: BingoCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BingoCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BingoCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BingoCards.
     */
    distinct?: BingoCardScalarFieldEnum | BingoCardScalarFieldEnum[]
  }

  /**
   * BingoCard findFirstOrThrow
   */
  export type BingoCardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BingoCard
     */
    select?: BingoCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BingoCardInclude<ExtArgs> | null
    /**
     * Filter, which BingoCard to fetch.
     */
    where?: BingoCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BingoCards to fetch.
     */
    orderBy?: BingoCardOrderByWithRelationInput | BingoCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BingoCards.
     */
    cursor?: BingoCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BingoCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BingoCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BingoCards.
     */
    distinct?: BingoCardScalarFieldEnum | BingoCardScalarFieldEnum[]
  }

  /**
   * BingoCard findMany
   */
  export type BingoCardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BingoCard
     */
    select?: BingoCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BingoCardInclude<ExtArgs> | null
    /**
     * Filter, which BingoCards to fetch.
     */
    where?: BingoCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BingoCards to fetch.
     */
    orderBy?: BingoCardOrderByWithRelationInput | BingoCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BingoCards.
     */
    cursor?: BingoCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BingoCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BingoCards.
     */
    skip?: number
    distinct?: BingoCardScalarFieldEnum | BingoCardScalarFieldEnum[]
  }

  /**
   * BingoCard create
   */
  export type BingoCardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BingoCard
     */
    select?: BingoCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BingoCardInclude<ExtArgs> | null
    /**
     * The data needed to create a BingoCard.
     */
    data: XOR<BingoCardCreateInput, BingoCardUncheckedCreateInput>
  }

  /**
   * BingoCard createMany
   */
  export type BingoCardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BingoCards.
     */
    data: BingoCardCreateManyInput | BingoCardCreateManyInput[]
  }

  /**
   * BingoCard createManyAndReturn
   */
  export type BingoCardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BingoCard
     */
    select?: BingoCardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BingoCards.
     */
    data: BingoCardCreateManyInput | BingoCardCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BingoCardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BingoCard update
   */
  export type BingoCardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BingoCard
     */
    select?: BingoCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BingoCardInclude<ExtArgs> | null
    /**
     * The data needed to update a BingoCard.
     */
    data: XOR<BingoCardUpdateInput, BingoCardUncheckedUpdateInput>
    /**
     * Choose, which BingoCard to update.
     */
    where: BingoCardWhereUniqueInput
  }

  /**
   * BingoCard updateMany
   */
  export type BingoCardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BingoCards.
     */
    data: XOR<BingoCardUpdateManyMutationInput, BingoCardUncheckedUpdateManyInput>
    /**
     * Filter which BingoCards to update
     */
    where?: BingoCardWhereInput
  }

  /**
   * BingoCard upsert
   */
  export type BingoCardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BingoCard
     */
    select?: BingoCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BingoCardInclude<ExtArgs> | null
    /**
     * The filter to search for the BingoCard to update in case it exists.
     */
    where: BingoCardWhereUniqueInput
    /**
     * In case the BingoCard found by the `where` argument doesn't exist, create a new BingoCard with this data.
     */
    create: XOR<BingoCardCreateInput, BingoCardUncheckedCreateInput>
    /**
     * In case the BingoCard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BingoCardUpdateInput, BingoCardUncheckedUpdateInput>
  }

  /**
   * BingoCard delete
   */
  export type BingoCardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BingoCard
     */
    select?: BingoCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BingoCardInclude<ExtArgs> | null
    /**
     * Filter which BingoCard to delete.
     */
    where: BingoCardWhereUniqueInput
  }

  /**
   * BingoCard deleteMany
   */
  export type BingoCardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BingoCards to delete
     */
    where?: BingoCardWhereInput
  }

  /**
   * BingoCard.numbers
   */
  export type BingoCard$numbersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardNumber
     */
    select?: CardNumberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardNumberInclude<ExtArgs> | null
    where?: CardNumberWhereInput
    orderBy?: CardNumberOrderByWithRelationInput | CardNumberOrderByWithRelationInput[]
    cursor?: CardNumberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CardNumberScalarFieldEnum | CardNumberScalarFieldEnum[]
  }

  /**
   * BingoCard without action
   */
  export type BingoCardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BingoCard
     */
    select?: BingoCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BingoCardInclude<ExtArgs> | null
  }


  /**
   * Model CardNumber
   */

  export type AggregateCardNumber = {
    _count: CardNumberCountAggregateOutputType | null
    _avg: CardNumberAvgAggregateOutputType | null
    _sum: CardNumberSumAggregateOutputType | null
    _min: CardNumberMinAggregateOutputType | null
    _max: CardNumberMaxAggregateOutputType | null
  }

  export type CardNumberAvgAggregateOutputType = {
    position: number | null
    number: number | null
  }

  export type CardNumberSumAggregateOutputType = {
    position: number | null
    number: number | null
  }

  export type CardNumberMinAggregateOutputType = {
    id: string | null
    cardId: string | null
    position: number | null
    column: string | null
    number: number | null
    isMarked: boolean | null
    isFree: boolean | null
  }

  export type CardNumberMaxAggregateOutputType = {
    id: string | null
    cardId: string | null
    position: number | null
    column: string | null
    number: number | null
    isMarked: boolean | null
    isFree: boolean | null
  }

  export type CardNumberCountAggregateOutputType = {
    id: number
    cardId: number
    position: number
    column: number
    number: number
    isMarked: number
    isFree: number
    _all: number
  }


  export type CardNumberAvgAggregateInputType = {
    position?: true
    number?: true
  }

  export type CardNumberSumAggregateInputType = {
    position?: true
    number?: true
  }

  export type CardNumberMinAggregateInputType = {
    id?: true
    cardId?: true
    position?: true
    column?: true
    number?: true
    isMarked?: true
    isFree?: true
  }

  export type CardNumberMaxAggregateInputType = {
    id?: true
    cardId?: true
    position?: true
    column?: true
    number?: true
    isMarked?: true
    isFree?: true
  }

  export type CardNumberCountAggregateInputType = {
    id?: true
    cardId?: true
    position?: true
    column?: true
    number?: true
    isMarked?: true
    isFree?: true
    _all?: true
  }

  export type CardNumberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CardNumber to aggregate.
     */
    where?: CardNumberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardNumbers to fetch.
     */
    orderBy?: CardNumberOrderByWithRelationInput | CardNumberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CardNumberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardNumbers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardNumbers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CardNumbers
    **/
    _count?: true | CardNumberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CardNumberAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CardNumberSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CardNumberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CardNumberMaxAggregateInputType
  }

  export type GetCardNumberAggregateType<T extends CardNumberAggregateArgs> = {
        [P in keyof T & keyof AggregateCardNumber]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCardNumber[P]>
      : GetScalarType<T[P], AggregateCardNumber[P]>
  }




  export type CardNumberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardNumberWhereInput
    orderBy?: CardNumberOrderByWithAggregationInput | CardNumberOrderByWithAggregationInput[]
    by: CardNumberScalarFieldEnum[] | CardNumberScalarFieldEnum
    having?: CardNumberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CardNumberCountAggregateInputType | true
    _avg?: CardNumberAvgAggregateInputType
    _sum?: CardNumberSumAggregateInputType
    _min?: CardNumberMinAggregateInputType
    _max?: CardNumberMaxAggregateInputType
  }

  export type CardNumberGroupByOutputType = {
    id: string
    cardId: string
    position: number
    column: string
    number: number | null
    isMarked: boolean
    isFree: boolean
    _count: CardNumberCountAggregateOutputType | null
    _avg: CardNumberAvgAggregateOutputType | null
    _sum: CardNumberSumAggregateOutputType | null
    _min: CardNumberMinAggregateOutputType | null
    _max: CardNumberMaxAggregateOutputType | null
  }

  type GetCardNumberGroupByPayload<T extends CardNumberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CardNumberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CardNumberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CardNumberGroupByOutputType[P]>
            : GetScalarType<T[P], CardNumberGroupByOutputType[P]>
        }
      >
    >


  export type CardNumberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cardId?: boolean
    position?: boolean
    column?: boolean
    number?: boolean
    isMarked?: boolean
    isFree?: boolean
    card?: boolean | BingoCardDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cardNumber"]>

  export type CardNumberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cardId?: boolean
    position?: boolean
    column?: boolean
    number?: boolean
    isMarked?: boolean
    isFree?: boolean
    card?: boolean | BingoCardDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cardNumber"]>

  export type CardNumberSelectScalar = {
    id?: boolean
    cardId?: boolean
    position?: boolean
    column?: boolean
    number?: boolean
    isMarked?: boolean
    isFree?: boolean
  }

  export type CardNumberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    card?: boolean | BingoCardDefaultArgs<ExtArgs>
  }
  export type CardNumberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    card?: boolean | BingoCardDefaultArgs<ExtArgs>
  }

  export type $CardNumberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CardNumber"
    objects: {
      card: Prisma.$BingoCardPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      cardId: string
      position: number
      column: string
      number: number | null
      isMarked: boolean
      isFree: boolean
    }, ExtArgs["result"]["cardNumber"]>
    composites: {}
  }

  type CardNumberGetPayload<S extends boolean | null | undefined | CardNumberDefaultArgs> = $Result.GetResult<Prisma.$CardNumberPayload, S>

  type CardNumberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CardNumberFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CardNumberCountAggregateInputType | true
    }

  export interface CardNumberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CardNumber'], meta: { name: 'CardNumber' } }
    /**
     * Find zero or one CardNumber that matches the filter.
     * @param {CardNumberFindUniqueArgs} args - Arguments to find a CardNumber
     * @example
     * // Get one CardNumber
     * const cardNumber = await prisma.cardNumber.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CardNumberFindUniqueArgs>(args: SelectSubset<T, CardNumberFindUniqueArgs<ExtArgs>>): Prisma__CardNumberClient<$Result.GetResult<Prisma.$CardNumberPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CardNumber that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CardNumberFindUniqueOrThrowArgs} args - Arguments to find a CardNumber
     * @example
     * // Get one CardNumber
     * const cardNumber = await prisma.cardNumber.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CardNumberFindUniqueOrThrowArgs>(args: SelectSubset<T, CardNumberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CardNumberClient<$Result.GetResult<Prisma.$CardNumberPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CardNumber that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardNumberFindFirstArgs} args - Arguments to find a CardNumber
     * @example
     * // Get one CardNumber
     * const cardNumber = await prisma.cardNumber.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CardNumberFindFirstArgs>(args?: SelectSubset<T, CardNumberFindFirstArgs<ExtArgs>>): Prisma__CardNumberClient<$Result.GetResult<Prisma.$CardNumberPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CardNumber that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardNumberFindFirstOrThrowArgs} args - Arguments to find a CardNumber
     * @example
     * // Get one CardNumber
     * const cardNumber = await prisma.cardNumber.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CardNumberFindFirstOrThrowArgs>(args?: SelectSubset<T, CardNumberFindFirstOrThrowArgs<ExtArgs>>): Prisma__CardNumberClient<$Result.GetResult<Prisma.$CardNumberPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CardNumbers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardNumberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CardNumbers
     * const cardNumbers = await prisma.cardNumber.findMany()
     * 
     * // Get first 10 CardNumbers
     * const cardNumbers = await prisma.cardNumber.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cardNumberWithIdOnly = await prisma.cardNumber.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CardNumberFindManyArgs>(args?: SelectSubset<T, CardNumberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardNumberPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CardNumber.
     * @param {CardNumberCreateArgs} args - Arguments to create a CardNumber.
     * @example
     * // Create one CardNumber
     * const CardNumber = await prisma.cardNumber.create({
     *   data: {
     *     // ... data to create a CardNumber
     *   }
     * })
     * 
     */
    create<T extends CardNumberCreateArgs>(args: SelectSubset<T, CardNumberCreateArgs<ExtArgs>>): Prisma__CardNumberClient<$Result.GetResult<Prisma.$CardNumberPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CardNumbers.
     * @param {CardNumberCreateManyArgs} args - Arguments to create many CardNumbers.
     * @example
     * // Create many CardNumbers
     * const cardNumber = await prisma.cardNumber.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CardNumberCreateManyArgs>(args?: SelectSubset<T, CardNumberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CardNumbers and returns the data saved in the database.
     * @param {CardNumberCreateManyAndReturnArgs} args - Arguments to create many CardNumbers.
     * @example
     * // Create many CardNumbers
     * const cardNumber = await prisma.cardNumber.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CardNumbers and only return the `id`
     * const cardNumberWithIdOnly = await prisma.cardNumber.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CardNumberCreateManyAndReturnArgs>(args?: SelectSubset<T, CardNumberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardNumberPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CardNumber.
     * @param {CardNumberDeleteArgs} args - Arguments to delete one CardNumber.
     * @example
     * // Delete one CardNumber
     * const CardNumber = await prisma.cardNumber.delete({
     *   where: {
     *     // ... filter to delete one CardNumber
     *   }
     * })
     * 
     */
    delete<T extends CardNumberDeleteArgs>(args: SelectSubset<T, CardNumberDeleteArgs<ExtArgs>>): Prisma__CardNumberClient<$Result.GetResult<Prisma.$CardNumberPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CardNumber.
     * @param {CardNumberUpdateArgs} args - Arguments to update one CardNumber.
     * @example
     * // Update one CardNumber
     * const cardNumber = await prisma.cardNumber.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CardNumberUpdateArgs>(args: SelectSubset<T, CardNumberUpdateArgs<ExtArgs>>): Prisma__CardNumberClient<$Result.GetResult<Prisma.$CardNumberPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CardNumbers.
     * @param {CardNumberDeleteManyArgs} args - Arguments to filter CardNumbers to delete.
     * @example
     * // Delete a few CardNumbers
     * const { count } = await prisma.cardNumber.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CardNumberDeleteManyArgs>(args?: SelectSubset<T, CardNumberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CardNumbers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardNumberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CardNumbers
     * const cardNumber = await prisma.cardNumber.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CardNumberUpdateManyArgs>(args: SelectSubset<T, CardNumberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CardNumber.
     * @param {CardNumberUpsertArgs} args - Arguments to update or create a CardNumber.
     * @example
     * // Update or create a CardNumber
     * const cardNumber = await prisma.cardNumber.upsert({
     *   create: {
     *     // ... data to create a CardNumber
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CardNumber we want to update
     *   }
     * })
     */
    upsert<T extends CardNumberUpsertArgs>(args: SelectSubset<T, CardNumberUpsertArgs<ExtArgs>>): Prisma__CardNumberClient<$Result.GetResult<Prisma.$CardNumberPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CardNumbers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardNumberCountArgs} args - Arguments to filter CardNumbers to count.
     * @example
     * // Count the number of CardNumbers
     * const count = await prisma.cardNumber.count({
     *   where: {
     *     // ... the filter for the CardNumbers we want to count
     *   }
     * })
    **/
    count<T extends CardNumberCountArgs>(
      args?: Subset<T, CardNumberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CardNumberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CardNumber.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardNumberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CardNumberAggregateArgs>(args: Subset<T, CardNumberAggregateArgs>): Prisma.PrismaPromise<GetCardNumberAggregateType<T>>

    /**
     * Group by CardNumber.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardNumberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CardNumberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CardNumberGroupByArgs['orderBy'] }
        : { orderBy?: CardNumberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CardNumberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCardNumberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CardNumber model
   */
  readonly fields: CardNumberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CardNumber.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CardNumberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    card<T extends BingoCardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BingoCardDefaultArgs<ExtArgs>>): Prisma__BingoCardClient<$Result.GetResult<Prisma.$BingoCardPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CardNumber model
   */ 
  interface CardNumberFieldRefs {
    readonly id: FieldRef<"CardNumber", 'String'>
    readonly cardId: FieldRef<"CardNumber", 'String'>
    readonly position: FieldRef<"CardNumber", 'Int'>
    readonly column: FieldRef<"CardNumber", 'String'>
    readonly number: FieldRef<"CardNumber", 'Int'>
    readonly isMarked: FieldRef<"CardNumber", 'Boolean'>
    readonly isFree: FieldRef<"CardNumber", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * CardNumber findUnique
   */
  export type CardNumberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardNumber
     */
    select?: CardNumberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardNumberInclude<ExtArgs> | null
    /**
     * Filter, which CardNumber to fetch.
     */
    where: CardNumberWhereUniqueInput
  }

  /**
   * CardNumber findUniqueOrThrow
   */
  export type CardNumberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardNumber
     */
    select?: CardNumberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardNumberInclude<ExtArgs> | null
    /**
     * Filter, which CardNumber to fetch.
     */
    where: CardNumberWhereUniqueInput
  }

  /**
   * CardNumber findFirst
   */
  export type CardNumberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardNumber
     */
    select?: CardNumberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardNumberInclude<ExtArgs> | null
    /**
     * Filter, which CardNumber to fetch.
     */
    where?: CardNumberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardNumbers to fetch.
     */
    orderBy?: CardNumberOrderByWithRelationInput | CardNumberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CardNumbers.
     */
    cursor?: CardNumberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardNumbers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardNumbers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CardNumbers.
     */
    distinct?: CardNumberScalarFieldEnum | CardNumberScalarFieldEnum[]
  }

  /**
   * CardNumber findFirstOrThrow
   */
  export type CardNumberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardNumber
     */
    select?: CardNumberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardNumberInclude<ExtArgs> | null
    /**
     * Filter, which CardNumber to fetch.
     */
    where?: CardNumberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardNumbers to fetch.
     */
    orderBy?: CardNumberOrderByWithRelationInput | CardNumberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CardNumbers.
     */
    cursor?: CardNumberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardNumbers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardNumbers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CardNumbers.
     */
    distinct?: CardNumberScalarFieldEnum | CardNumberScalarFieldEnum[]
  }

  /**
   * CardNumber findMany
   */
  export type CardNumberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardNumber
     */
    select?: CardNumberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardNumberInclude<ExtArgs> | null
    /**
     * Filter, which CardNumbers to fetch.
     */
    where?: CardNumberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardNumbers to fetch.
     */
    orderBy?: CardNumberOrderByWithRelationInput | CardNumberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CardNumbers.
     */
    cursor?: CardNumberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardNumbers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardNumbers.
     */
    skip?: number
    distinct?: CardNumberScalarFieldEnum | CardNumberScalarFieldEnum[]
  }

  /**
   * CardNumber create
   */
  export type CardNumberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardNumber
     */
    select?: CardNumberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardNumberInclude<ExtArgs> | null
    /**
     * The data needed to create a CardNumber.
     */
    data: XOR<CardNumberCreateInput, CardNumberUncheckedCreateInput>
  }

  /**
   * CardNumber createMany
   */
  export type CardNumberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CardNumbers.
     */
    data: CardNumberCreateManyInput | CardNumberCreateManyInput[]
  }

  /**
   * CardNumber createManyAndReturn
   */
  export type CardNumberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardNumber
     */
    select?: CardNumberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CardNumbers.
     */
    data: CardNumberCreateManyInput | CardNumberCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardNumberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CardNumber update
   */
  export type CardNumberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardNumber
     */
    select?: CardNumberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardNumberInclude<ExtArgs> | null
    /**
     * The data needed to update a CardNumber.
     */
    data: XOR<CardNumberUpdateInput, CardNumberUncheckedUpdateInput>
    /**
     * Choose, which CardNumber to update.
     */
    where: CardNumberWhereUniqueInput
  }

  /**
   * CardNumber updateMany
   */
  export type CardNumberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CardNumbers.
     */
    data: XOR<CardNumberUpdateManyMutationInput, CardNumberUncheckedUpdateManyInput>
    /**
     * Filter which CardNumbers to update
     */
    where?: CardNumberWhereInput
  }

  /**
   * CardNumber upsert
   */
  export type CardNumberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardNumber
     */
    select?: CardNumberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardNumberInclude<ExtArgs> | null
    /**
     * The filter to search for the CardNumber to update in case it exists.
     */
    where: CardNumberWhereUniqueInput
    /**
     * In case the CardNumber found by the `where` argument doesn't exist, create a new CardNumber with this data.
     */
    create: XOR<CardNumberCreateInput, CardNumberUncheckedCreateInput>
    /**
     * In case the CardNumber was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CardNumberUpdateInput, CardNumberUncheckedUpdateInput>
  }

  /**
   * CardNumber delete
   */
  export type CardNumberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardNumber
     */
    select?: CardNumberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardNumberInclude<ExtArgs> | null
    /**
     * Filter which CardNumber to delete.
     */
    where: CardNumberWhereUniqueInput
  }

  /**
   * CardNumber deleteMany
   */
  export type CardNumberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CardNumbers to delete
     */
    where?: CardNumberWhereInput
  }

  /**
   * CardNumber without action
   */
  export type CardNumberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardNumber
     */
    select?: CardNumberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardNumberInclude<ExtArgs> | null
  }


  /**
   * Model Transaction
   */

  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionAvgAggregateOutputType = {
    amount: Decimal | null
    pearlsAmount: Decimal | null
    commissionAmount: Decimal | null
  }

  export type TransactionSumAggregateOutputType = {
    amount: Decimal | null
    pearlsAmount: Decimal | null
    commissionAmount: Decimal | null
  }

  export type TransactionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    gameId: string | null
    type: string | null
    amount: Decimal | null
    description: string | null
    status: string | null
    paymentMethod: string | null
    paymentId: string | null
    pearlsAmount: Decimal | null
    fromUserId: string | null
    toUserId: string | null
    commissionAmount: Decimal | null
    referenceId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    gameId: string | null
    type: string | null
    amount: Decimal | null
    description: string | null
    status: string | null
    paymentMethod: string | null
    paymentId: string | null
    pearlsAmount: Decimal | null
    fromUserId: string | null
    toUserId: string | null
    commissionAmount: Decimal | null
    referenceId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionCountAggregateOutputType = {
    id: number
    userId: number
    gameId: number
    type: number
    amount: number
    description: number
    status: number
    paymentMethod: number
    paymentId: number
    pearlsAmount: number
    fromUserId: number
    toUserId: number
    commissionAmount: number
    referenceId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TransactionAvgAggregateInputType = {
    amount?: true
    pearlsAmount?: true
    commissionAmount?: true
  }

  export type TransactionSumAggregateInputType = {
    amount?: true
    pearlsAmount?: true
    commissionAmount?: true
  }

  export type TransactionMinAggregateInputType = {
    id?: true
    userId?: true
    gameId?: true
    type?: true
    amount?: true
    description?: true
    status?: true
    paymentMethod?: true
    paymentId?: true
    pearlsAmount?: true
    fromUserId?: true
    toUserId?: true
    commissionAmount?: true
    referenceId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionMaxAggregateInputType = {
    id?: true
    userId?: true
    gameId?: true
    type?: true
    amount?: true
    description?: true
    status?: true
    paymentMethod?: true
    paymentId?: true
    pearlsAmount?: true
    fromUserId?: true
    toUserId?: true
    commissionAmount?: true
    referenceId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionCountAggregateInputType = {
    id?: true
    userId?: true
    gameId?: true
    type?: true
    amount?: true
    description?: true
    status?: true
    paymentMethod?: true
    paymentId?: true
    pearlsAmount?: true
    fromUserId?: true
    toUserId?: true
    commissionAmount?: true
    referenceId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaction to aggregate.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithAggregationInput | TransactionOrderByWithAggregationInput[]
    by: TransactionScalarFieldEnum[] | TransactionScalarFieldEnum
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _avg?: TransactionAvgAggregateInputType
    _sum?: TransactionSumAggregateInputType
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }

  export type TransactionGroupByOutputType = {
    id: string
    userId: string
    gameId: string | null
    type: string
    amount: Decimal
    description: string
    status: string
    paymentMethod: string | null
    paymentId: string | null
    pearlsAmount: Decimal | null
    fromUserId: string | null
    toUserId: string | null
    commissionAmount: Decimal | null
    referenceId: string | null
    createdAt: Date
    updatedAt: Date
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    gameId?: boolean
    type?: boolean
    amount?: boolean
    description?: boolean
    status?: boolean
    paymentMethod?: boolean
    paymentId?: boolean
    pearlsAmount?: boolean
    fromUserId?: boolean
    toUserId?: boolean
    commissionAmount?: boolean
    referenceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    fromUser?: boolean | Transaction$fromUserArgs<ExtArgs>
    toUser?: boolean | Transaction$toUserArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    gameId?: boolean
    type?: boolean
    amount?: boolean
    description?: boolean
    status?: boolean
    paymentMethod?: boolean
    paymentId?: boolean
    pearlsAmount?: boolean
    fromUserId?: boolean
    toUserId?: boolean
    commissionAmount?: boolean
    referenceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    fromUser?: boolean | Transaction$fromUserArgs<ExtArgs>
    toUser?: boolean | Transaction$toUserArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectScalar = {
    id?: boolean
    userId?: boolean
    gameId?: boolean
    type?: boolean
    amount?: boolean
    description?: boolean
    status?: boolean
    paymentMethod?: boolean
    paymentId?: boolean
    pearlsAmount?: boolean
    fromUserId?: boolean
    toUserId?: boolean
    commissionAmount?: boolean
    referenceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    fromUser?: boolean | Transaction$fromUserArgs<ExtArgs>
    toUser?: boolean | Transaction$toUserArgs<ExtArgs>
  }
  export type TransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    fromUser?: boolean | Transaction$fromUserArgs<ExtArgs>
    toUser?: boolean | Transaction$toUserArgs<ExtArgs>
  }

  export type $TransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transaction"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      fromUser: Prisma.$UserPayload<ExtArgs> | null
      toUser: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      gameId: string | null
      type: string
      amount: Prisma.Decimal
      description: string
      status: string
      paymentMethod: string | null
      paymentId: string | null
      pearlsAmount: Prisma.Decimal | null
      fromUserId: string | null
      toUserId: string | null
      commissionAmount: Prisma.Decimal | null
      referenceId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["transaction"]>
    composites: {}
  }

  type TransactionGetPayload<S extends boolean | null | undefined | TransactionDefaultArgs> = $Result.GetResult<Prisma.$TransactionPayload, S>

  type TransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TransactionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TransactionCountAggregateInputType | true
    }

  export interface TransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaction'], meta: { name: 'Transaction' } }
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionFindUniqueArgs>(args: SelectSubset<T, TransactionFindUniqueArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Transaction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionFindFirstArgs>(args?: SelectSubset<T, TransactionFindFirstArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Transaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransactionFindManyArgs>(args?: SelectSubset<T, TransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
     */
    create<T extends TransactionCreateArgs>(args: SelectSubset<T, TransactionCreateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Transactions.
     * @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionCreateManyArgs>(args?: SelectSubset<T, TransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transactions and returns the data saved in the database.
     * @param {TransactionCreateManyAndReturnArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transactions and only return the `id`
     * const transactionWithIdOnly = await prisma.transaction.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, TransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
     */
    delete<T extends TransactionDeleteArgs>(args: SelectSubset<T, TransactionDeleteArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionUpdateArgs>(args: SelectSubset<T, TransactionUpdateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionDeleteManyArgs>(args?: SelectSubset<T, TransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionUpdateManyArgs>(args: SelectSubset<T, TransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
     */
    upsert<T extends TransactionUpsertArgs>(args: SelectSubset<T, TransactionUpsertArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): Prisma.PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transaction model
   */
  readonly fields: TransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    fromUser<T extends Transaction$fromUserArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$fromUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    toUser<T extends Transaction$toUserArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$toUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transaction model
   */ 
  interface TransactionFieldRefs {
    readonly id: FieldRef<"Transaction", 'String'>
    readonly userId: FieldRef<"Transaction", 'String'>
    readonly gameId: FieldRef<"Transaction", 'String'>
    readonly type: FieldRef<"Transaction", 'String'>
    readonly amount: FieldRef<"Transaction", 'Decimal'>
    readonly description: FieldRef<"Transaction", 'String'>
    readonly status: FieldRef<"Transaction", 'String'>
    readonly paymentMethod: FieldRef<"Transaction", 'String'>
    readonly paymentId: FieldRef<"Transaction", 'String'>
    readonly pearlsAmount: FieldRef<"Transaction", 'Decimal'>
    readonly fromUserId: FieldRef<"Transaction", 'String'>
    readonly toUserId: FieldRef<"Transaction", 'String'>
    readonly commissionAmount: FieldRef<"Transaction", 'Decimal'>
    readonly referenceId: FieldRef<"Transaction", 'String'>
    readonly createdAt: FieldRef<"Transaction", 'DateTime'>
    readonly updatedAt: FieldRef<"Transaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Transaction findUnique
   */
  export type TransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findUniqueOrThrow
   */
  export type TransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findFirst
   */
  export type TransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findFirstOrThrow
   */
  export type TransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction create
   */
  export type TransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a Transaction.
     */
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }

  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
  }

  /**
   * Transaction createManyAndReturn
   */
  export type TransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaction update
   */
  export type TransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a Transaction.
     */
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
  }

  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     */
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     */
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }

  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter which Transaction to delete.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to delete
     */
    where?: TransactionWhereInput
  }

  /**
   * Transaction.fromUser
   */
  export type Transaction$fromUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Transaction.toUser
   */
  export type Transaction$toUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Transaction without action
   */
  export type TransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
  }


  /**
   * Model Wallet
   */

  export type AggregateWallet = {
    _count: WalletCountAggregateOutputType | null
    _avg: WalletAvgAggregateOutputType | null
    _sum: WalletSumAggregateOutputType | null
    _min: WalletMinAggregateOutputType | null
    _max: WalletMaxAggregateOutputType | null
  }

  export type WalletAvgAggregateOutputType = {
    balance: Decimal | null
    dailyLimit: Decimal | null
    monthlyLimit: Decimal | null
  }

  export type WalletSumAggregateOutputType = {
    balance: Decimal | null
    dailyLimit: Decimal | null
    monthlyLimit: Decimal | null
  }

  export type WalletMinAggregateOutputType = {
    id: string | null
    userId: string | null
    balance: Decimal | null
    dailyLimit: Decimal | null
    monthlyLimit: Decimal | null
    isActive: boolean | null
    isFrozen: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WalletMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    balance: Decimal | null
    dailyLimit: Decimal | null
    monthlyLimit: Decimal | null
    isActive: boolean | null
    isFrozen: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WalletCountAggregateOutputType = {
    id: number
    userId: number
    balance: number
    dailyLimit: number
    monthlyLimit: number
    isActive: number
    isFrozen: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WalletAvgAggregateInputType = {
    balance?: true
    dailyLimit?: true
    monthlyLimit?: true
  }

  export type WalletSumAggregateInputType = {
    balance?: true
    dailyLimit?: true
    monthlyLimit?: true
  }

  export type WalletMinAggregateInputType = {
    id?: true
    userId?: true
    balance?: true
    dailyLimit?: true
    monthlyLimit?: true
    isActive?: true
    isFrozen?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WalletMaxAggregateInputType = {
    id?: true
    userId?: true
    balance?: true
    dailyLimit?: true
    monthlyLimit?: true
    isActive?: true
    isFrozen?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WalletCountAggregateInputType = {
    id?: true
    userId?: true
    balance?: true
    dailyLimit?: true
    monthlyLimit?: true
    isActive?: true
    isFrozen?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WalletAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wallet to aggregate.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: WalletOrderByWithRelationInput | WalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Wallets
    **/
    _count?: true | WalletCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WalletAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WalletSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WalletMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WalletMaxAggregateInputType
  }

  export type GetWalletAggregateType<T extends WalletAggregateArgs> = {
        [P in keyof T & keyof AggregateWallet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWallet[P]>
      : GetScalarType<T[P], AggregateWallet[P]>
  }




  export type WalletGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WalletWhereInput
    orderBy?: WalletOrderByWithAggregationInput | WalletOrderByWithAggregationInput[]
    by: WalletScalarFieldEnum[] | WalletScalarFieldEnum
    having?: WalletScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WalletCountAggregateInputType | true
    _avg?: WalletAvgAggregateInputType
    _sum?: WalletSumAggregateInputType
    _min?: WalletMinAggregateInputType
    _max?: WalletMaxAggregateInputType
  }

  export type WalletGroupByOutputType = {
    id: string
    userId: string
    balance: Decimal
    dailyLimit: Decimal
    monthlyLimit: Decimal
    isActive: boolean
    isFrozen: boolean
    createdAt: Date
    updatedAt: Date
    _count: WalletCountAggregateOutputType | null
    _avg: WalletAvgAggregateOutputType | null
    _sum: WalletSumAggregateOutputType | null
    _min: WalletMinAggregateOutputType | null
    _max: WalletMaxAggregateOutputType | null
  }

  type GetWalletGroupByPayload<T extends WalletGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WalletGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WalletGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WalletGroupByOutputType[P]>
            : GetScalarType<T[P], WalletGroupByOutputType[P]>
        }
      >
    >


  export type WalletSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    balance?: boolean
    dailyLimit?: boolean
    monthlyLimit?: boolean
    isActive?: boolean
    isFrozen?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wallet"]>

  export type WalletSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    balance?: boolean
    dailyLimit?: boolean
    monthlyLimit?: boolean
    isActive?: boolean
    isFrozen?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wallet"]>

  export type WalletSelectScalar = {
    id?: boolean
    userId?: boolean
    balance?: boolean
    dailyLimit?: boolean
    monthlyLimit?: boolean
    isActive?: boolean
    isFrozen?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WalletInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WalletIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WalletPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Wallet"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      balance: Prisma.Decimal
      dailyLimit: Prisma.Decimal
      monthlyLimit: Prisma.Decimal
      isActive: boolean
      isFrozen: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["wallet"]>
    composites: {}
  }

  type WalletGetPayload<S extends boolean | null | undefined | WalletDefaultArgs> = $Result.GetResult<Prisma.$WalletPayload, S>

  type WalletCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WalletFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WalletCountAggregateInputType | true
    }

  export interface WalletDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Wallet'], meta: { name: 'Wallet' } }
    /**
     * Find zero or one Wallet that matches the filter.
     * @param {WalletFindUniqueArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WalletFindUniqueArgs>(args: SelectSubset<T, WalletFindUniqueArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Wallet that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WalletFindUniqueOrThrowArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WalletFindUniqueOrThrowArgs>(args: SelectSubset<T, WalletFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Wallet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletFindFirstArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WalletFindFirstArgs>(args?: SelectSubset<T, WalletFindFirstArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Wallet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletFindFirstOrThrowArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WalletFindFirstOrThrowArgs>(args?: SelectSubset<T, WalletFindFirstOrThrowArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Wallets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Wallets
     * const wallets = await prisma.wallet.findMany()
     * 
     * // Get first 10 Wallets
     * const wallets = await prisma.wallet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const walletWithIdOnly = await prisma.wallet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WalletFindManyArgs>(args?: SelectSubset<T, WalletFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Wallet.
     * @param {WalletCreateArgs} args - Arguments to create a Wallet.
     * @example
     * // Create one Wallet
     * const Wallet = await prisma.wallet.create({
     *   data: {
     *     // ... data to create a Wallet
     *   }
     * })
     * 
     */
    create<T extends WalletCreateArgs>(args: SelectSubset<T, WalletCreateArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Wallets.
     * @param {WalletCreateManyArgs} args - Arguments to create many Wallets.
     * @example
     * // Create many Wallets
     * const wallet = await prisma.wallet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WalletCreateManyArgs>(args?: SelectSubset<T, WalletCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Wallets and returns the data saved in the database.
     * @param {WalletCreateManyAndReturnArgs} args - Arguments to create many Wallets.
     * @example
     * // Create many Wallets
     * const wallet = await prisma.wallet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Wallets and only return the `id`
     * const walletWithIdOnly = await prisma.wallet.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WalletCreateManyAndReturnArgs>(args?: SelectSubset<T, WalletCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Wallet.
     * @param {WalletDeleteArgs} args - Arguments to delete one Wallet.
     * @example
     * // Delete one Wallet
     * const Wallet = await prisma.wallet.delete({
     *   where: {
     *     // ... filter to delete one Wallet
     *   }
     * })
     * 
     */
    delete<T extends WalletDeleteArgs>(args: SelectSubset<T, WalletDeleteArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Wallet.
     * @param {WalletUpdateArgs} args - Arguments to update one Wallet.
     * @example
     * // Update one Wallet
     * const wallet = await prisma.wallet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WalletUpdateArgs>(args: SelectSubset<T, WalletUpdateArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Wallets.
     * @param {WalletDeleteManyArgs} args - Arguments to filter Wallets to delete.
     * @example
     * // Delete a few Wallets
     * const { count } = await prisma.wallet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WalletDeleteManyArgs>(args?: SelectSubset<T, WalletDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Wallets
     * const wallet = await prisma.wallet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WalletUpdateManyArgs>(args: SelectSubset<T, WalletUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Wallet.
     * @param {WalletUpsertArgs} args - Arguments to update or create a Wallet.
     * @example
     * // Update or create a Wallet
     * const wallet = await prisma.wallet.upsert({
     *   create: {
     *     // ... data to create a Wallet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Wallet we want to update
     *   }
     * })
     */
    upsert<T extends WalletUpsertArgs>(args: SelectSubset<T, WalletUpsertArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Wallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletCountArgs} args - Arguments to filter Wallets to count.
     * @example
     * // Count the number of Wallets
     * const count = await prisma.wallet.count({
     *   where: {
     *     // ... the filter for the Wallets we want to count
     *   }
     * })
    **/
    count<T extends WalletCountArgs>(
      args?: Subset<T, WalletCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WalletCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Wallet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WalletAggregateArgs>(args: Subset<T, WalletAggregateArgs>): Prisma.PrismaPromise<GetWalletAggregateType<T>>

    /**
     * Group by Wallet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WalletGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WalletGroupByArgs['orderBy'] }
        : { orderBy?: WalletGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WalletGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWalletGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Wallet model
   */
  readonly fields: WalletFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Wallet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WalletClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Wallet model
   */ 
  interface WalletFieldRefs {
    readonly id: FieldRef<"Wallet", 'String'>
    readonly userId: FieldRef<"Wallet", 'String'>
    readonly balance: FieldRef<"Wallet", 'Decimal'>
    readonly dailyLimit: FieldRef<"Wallet", 'Decimal'>
    readonly monthlyLimit: FieldRef<"Wallet", 'Decimal'>
    readonly isActive: FieldRef<"Wallet", 'Boolean'>
    readonly isFrozen: FieldRef<"Wallet", 'Boolean'>
    readonly createdAt: FieldRef<"Wallet", 'DateTime'>
    readonly updatedAt: FieldRef<"Wallet", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Wallet findUnique
   */
  export type WalletFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where: WalletWhereUniqueInput
  }

  /**
   * Wallet findUniqueOrThrow
   */
  export type WalletFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where: WalletWhereUniqueInput
  }

  /**
   * Wallet findFirst
   */
  export type WalletFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: WalletOrderByWithRelationInput | WalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wallets.
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wallets.
     */
    distinct?: WalletScalarFieldEnum | WalletScalarFieldEnum[]
  }

  /**
   * Wallet findFirstOrThrow
   */
  export type WalletFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: WalletOrderByWithRelationInput | WalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wallets.
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wallets.
     */
    distinct?: WalletScalarFieldEnum | WalletScalarFieldEnum[]
  }

  /**
   * Wallet findMany
   */
  export type WalletFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallets to fetch.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: WalletOrderByWithRelationInput | WalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Wallets.
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    distinct?: WalletScalarFieldEnum | WalletScalarFieldEnum[]
  }

  /**
   * Wallet create
   */
  export type WalletCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * The data needed to create a Wallet.
     */
    data: XOR<WalletCreateInput, WalletUncheckedCreateInput>
  }

  /**
   * Wallet createMany
   */
  export type WalletCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Wallets.
     */
    data: WalletCreateManyInput | WalletCreateManyInput[]
  }

  /**
   * Wallet createManyAndReturn
   */
  export type WalletCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Wallets.
     */
    data: WalletCreateManyInput | WalletCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Wallet update
   */
  export type WalletUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * The data needed to update a Wallet.
     */
    data: XOR<WalletUpdateInput, WalletUncheckedUpdateInput>
    /**
     * Choose, which Wallet to update.
     */
    where: WalletWhereUniqueInput
  }

  /**
   * Wallet updateMany
   */
  export type WalletUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Wallets.
     */
    data: XOR<WalletUpdateManyMutationInput, WalletUncheckedUpdateManyInput>
    /**
     * Filter which Wallets to update
     */
    where?: WalletWhereInput
  }

  /**
   * Wallet upsert
   */
  export type WalletUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * The filter to search for the Wallet to update in case it exists.
     */
    where: WalletWhereUniqueInput
    /**
     * In case the Wallet found by the `where` argument doesn't exist, create a new Wallet with this data.
     */
    create: XOR<WalletCreateInput, WalletUncheckedCreateInput>
    /**
     * In case the Wallet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WalletUpdateInput, WalletUncheckedUpdateInput>
  }

  /**
   * Wallet delete
   */
  export type WalletDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter which Wallet to delete.
     */
    where: WalletWhereUniqueInput
  }

  /**
   * Wallet deleteMany
   */
  export type WalletDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wallets to delete
     */
    where?: WalletWhereInput
  }

  /**
   * Wallet without action
   */
  export type WalletDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
  }


  /**
   * Model DepositRequest
   */

  export type AggregateDepositRequest = {
    _count: DepositRequestCountAggregateOutputType | null
    _avg: DepositRequestAvgAggregateOutputType | null
    _sum: DepositRequestSumAggregateOutputType | null
    _min: DepositRequestMinAggregateOutputType | null
    _max: DepositRequestMaxAggregateOutputType | null
  }

  export type DepositRequestAvgAggregateOutputType = {
    amount: Decimal | null
    pearlsAmount: Decimal | null
    processingFee: number | null
  }

  export type DepositRequestSumAggregateOutputType = {
    amount: Decimal | null
    pearlsAmount: Decimal | null
    processingFee: number | null
  }

  export type DepositRequestMinAggregateOutputType = {
    id: string | null
    userId: string | null
    amount: Decimal | null
    pearlsAmount: Decimal | null
    currency: string | null
    paymentMethod: string | null
    referenceCode: string | null
    bankReference: string | null
    bankAccount: string | null
    bankAccountName: string | null
    status: string | null
    adminNotes: string | null
    validatedBy: string | null
    validatedAt: Date | null
    proofImage: string | null
    proofImageAdmin: string | null
    transactionId: string | null
    integrationMethod: string | null
    openpayTransactionId: string | null
    autoApprovalEligible: boolean | null
    processingFee: number | null
    createdAt: Date | null
    updatedAt: Date | null
    expiresAt: Date | null
  }

  export type DepositRequestMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    amount: Decimal | null
    pearlsAmount: Decimal | null
    currency: string | null
    paymentMethod: string | null
    referenceCode: string | null
    bankReference: string | null
    bankAccount: string | null
    bankAccountName: string | null
    status: string | null
    adminNotes: string | null
    validatedBy: string | null
    validatedAt: Date | null
    proofImage: string | null
    proofImageAdmin: string | null
    transactionId: string | null
    integrationMethod: string | null
    openpayTransactionId: string | null
    autoApprovalEligible: boolean | null
    processingFee: number | null
    createdAt: Date | null
    updatedAt: Date | null
    expiresAt: Date | null
  }

  export type DepositRequestCountAggregateOutputType = {
    id: number
    userId: number
    amount: number
    pearlsAmount: number
    currency: number
    paymentMethod: number
    referenceCode: number
    bankReference: number
    bankAccount: number
    bankAccountName: number
    status: number
    adminNotes: number
    validatedBy: number
    validatedAt: number
    proofImage: number
    proofImageAdmin: number
    transactionId: number
    integrationMethod: number
    openpayTransactionId: number
    autoApprovalEligible: number
    processingFee: number
    createdAt: number
    updatedAt: number
    expiresAt: number
    _all: number
  }


  export type DepositRequestAvgAggregateInputType = {
    amount?: true
    pearlsAmount?: true
    processingFee?: true
  }

  export type DepositRequestSumAggregateInputType = {
    amount?: true
    pearlsAmount?: true
    processingFee?: true
  }

  export type DepositRequestMinAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    pearlsAmount?: true
    currency?: true
    paymentMethod?: true
    referenceCode?: true
    bankReference?: true
    bankAccount?: true
    bankAccountName?: true
    status?: true
    adminNotes?: true
    validatedBy?: true
    validatedAt?: true
    proofImage?: true
    proofImageAdmin?: true
    transactionId?: true
    integrationMethod?: true
    openpayTransactionId?: true
    autoApprovalEligible?: true
    processingFee?: true
    createdAt?: true
    updatedAt?: true
    expiresAt?: true
  }

  export type DepositRequestMaxAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    pearlsAmount?: true
    currency?: true
    paymentMethod?: true
    referenceCode?: true
    bankReference?: true
    bankAccount?: true
    bankAccountName?: true
    status?: true
    adminNotes?: true
    validatedBy?: true
    validatedAt?: true
    proofImage?: true
    proofImageAdmin?: true
    transactionId?: true
    integrationMethod?: true
    openpayTransactionId?: true
    autoApprovalEligible?: true
    processingFee?: true
    createdAt?: true
    updatedAt?: true
    expiresAt?: true
  }

  export type DepositRequestCountAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    pearlsAmount?: true
    currency?: true
    paymentMethod?: true
    referenceCode?: true
    bankReference?: true
    bankAccount?: true
    bankAccountName?: true
    status?: true
    adminNotes?: true
    validatedBy?: true
    validatedAt?: true
    proofImage?: true
    proofImageAdmin?: true
    transactionId?: true
    integrationMethod?: true
    openpayTransactionId?: true
    autoApprovalEligible?: true
    processingFee?: true
    createdAt?: true
    updatedAt?: true
    expiresAt?: true
    _all?: true
  }

  export type DepositRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DepositRequest to aggregate.
     */
    where?: DepositRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepositRequests to fetch.
     */
    orderBy?: DepositRequestOrderByWithRelationInput | DepositRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepositRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepositRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepositRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DepositRequests
    **/
    _count?: true | DepositRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepositRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepositRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepositRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepositRequestMaxAggregateInputType
  }

  export type GetDepositRequestAggregateType<T extends DepositRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateDepositRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepositRequest[P]>
      : GetScalarType<T[P], AggregateDepositRequest[P]>
  }




  export type DepositRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepositRequestWhereInput
    orderBy?: DepositRequestOrderByWithAggregationInput | DepositRequestOrderByWithAggregationInput[]
    by: DepositRequestScalarFieldEnum[] | DepositRequestScalarFieldEnum
    having?: DepositRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepositRequestCountAggregateInputType | true
    _avg?: DepositRequestAvgAggregateInputType
    _sum?: DepositRequestSumAggregateInputType
    _min?: DepositRequestMinAggregateInputType
    _max?: DepositRequestMaxAggregateInputType
  }

  export type DepositRequestGroupByOutputType = {
    id: string
    userId: string
    amount: Decimal
    pearlsAmount: Decimal
    currency: string
    paymentMethod: string
    referenceCode: string
    bankReference: string | null
    bankAccount: string | null
    bankAccountName: string | null
    status: string
    adminNotes: string | null
    validatedBy: string | null
    validatedAt: Date | null
    proofImage: string | null
    proofImageAdmin: string | null
    transactionId: string | null
    integrationMethod: string
    openpayTransactionId: string | null
    autoApprovalEligible: boolean
    processingFee: number
    createdAt: Date
    updatedAt: Date
    expiresAt: Date
    _count: DepositRequestCountAggregateOutputType | null
    _avg: DepositRequestAvgAggregateOutputType | null
    _sum: DepositRequestSumAggregateOutputType | null
    _min: DepositRequestMinAggregateOutputType | null
    _max: DepositRequestMaxAggregateOutputType | null
  }

  type GetDepositRequestGroupByPayload<T extends DepositRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepositRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepositRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepositRequestGroupByOutputType[P]>
            : GetScalarType<T[P], DepositRequestGroupByOutputType[P]>
        }
      >
    >


  export type DepositRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    amount?: boolean
    pearlsAmount?: boolean
    currency?: boolean
    paymentMethod?: boolean
    referenceCode?: boolean
    bankReference?: boolean
    bankAccount?: boolean
    bankAccountName?: boolean
    status?: boolean
    adminNotes?: boolean
    validatedBy?: boolean
    validatedAt?: boolean
    proofImage?: boolean
    proofImageAdmin?: boolean
    transactionId?: boolean
    integrationMethod?: boolean
    openpayTransactionId?: boolean
    autoApprovalEligible?: boolean
    processingFee?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    expiresAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    openpayTransactions?: boolean | DepositRequest$openpayTransactionsArgs<ExtArgs>
    _count?: boolean | DepositRequestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["depositRequest"]>

  export type DepositRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    amount?: boolean
    pearlsAmount?: boolean
    currency?: boolean
    paymentMethod?: boolean
    referenceCode?: boolean
    bankReference?: boolean
    bankAccount?: boolean
    bankAccountName?: boolean
    status?: boolean
    adminNotes?: boolean
    validatedBy?: boolean
    validatedAt?: boolean
    proofImage?: boolean
    proofImageAdmin?: boolean
    transactionId?: boolean
    integrationMethod?: boolean
    openpayTransactionId?: boolean
    autoApprovalEligible?: boolean
    processingFee?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    expiresAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["depositRequest"]>

  export type DepositRequestSelectScalar = {
    id?: boolean
    userId?: boolean
    amount?: boolean
    pearlsAmount?: boolean
    currency?: boolean
    paymentMethod?: boolean
    referenceCode?: boolean
    bankReference?: boolean
    bankAccount?: boolean
    bankAccountName?: boolean
    status?: boolean
    adminNotes?: boolean
    validatedBy?: boolean
    validatedAt?: boolean
    proofImage?: boolean
    proofImageAdmin?: boolean
    transactionId?: boolean
    integrationMethod?: boolean
    openpayTransactionId?: boolean
    autoApprovalEligible?: boolean
    processingFee?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    expiresAt?: boolean
  }

  export type DepositRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    openpayTransactions?: boolean | DepositRequest$openpayTransactionsArgs<ExtArgs>
    _count?: boolean | DepositRequestCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepositRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DepositRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DepositRequest"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      openpayTransactions: Prisma.$OpenpayTransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      amount: Prisma.Decimal
      pearlsAmount: Prisma.Decimal
      currency: string
      paymentMethod: string
      referenceCode: string
      bankReference: string | null
      bankAccount: string | null
      bankAccountName: string | null
      status: string
      adminNotes: string | null
      validatedBy: string | null
      validatedAt: Date | null
      proofImage: string | null
      proofImageAdmin: string | null
      transactionId: string | null
      integrationMethod: string
      openpayTransactionId: string | null
      autoApprovalEligible: boolean
      processingFee: number
      createdAt: Date
      updatedAt: Date
      expiresAt: Date
    }, ExtArgs["result"]["depositRequest"]>
    composites: {}
  }

  type DepositRequestGetPayload<S extends boolean | null | undefined | DepositRequestDefaultArgs> = $Result.GetResult<Prisma.$DepositRequestPayload, S>

  type DepositRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DepositRequestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DepositRequestCountAggregateInputType | true
    }

  export interface DepositRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DepositRequest'], meta: { name: 'DepositRequest' } }
    /**
     * Find zero or one DepositRequest that matches the filter.
     * @param {DepositRequestFindUniqueArgs} args - Arguments to find a DepositRequest
     * @example
     * // Get one DepositRequest
     * const depositRequest = await prisma.depositRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepositRequestFindUniqueArgs>(args: SelectSubset<T, DepositRequestFindUniqueArgs<ExtArgs>>): Prisma__DepositRequestClient<$Result.GetResult<Prisma.$DepositRequestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DepositRequest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DepositRequestFindUniqueOrThrowArgs} args - Arguments to find a DepositRequest
     * @example
     * // Get one DepositRequest
     * const depositRequest = await prisma.depositRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepositRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, DepositRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepositRequestClient<$Result.GetResult<Prisma.$DepositRequestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DepositRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepositRequestFindFirstArgs} args - Arguments to find a DepositRequest
     * @example
     * // Get one DepositRequest
     * const depositRequest = await prisma.depositRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepositRequestFindFirstArgs>(args?: SelectSubset<T, DepositRequestFindFirstArgs<ExtArgs>>): Prisma__DepositRequestClient<$Result.GetResult<Prisma.$DepositRequestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DepositRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepositRequestFindFirstOrThrowArgs} args - Arguments to find a DepositRequest
     * @example
     * // Get one DepositRequest
     * const depositRequest = await prisma.depositRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepositRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, DepositRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepositRequestClient<$Result.GetResult<Prisma.$DepositRequestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DepositRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepositRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DepositRequests
     * const depositRequests = await prisma.depositRequest.findMany()
     * 
     * // Get first 10 DepositRequests
     * const depositRequests = await prisma.depositRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const depositRequestWithIdOnly = await prisma.depositRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepositRequestFindManyArgs>(args?: SelectSubset<T, DepositRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepositRequestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DepositRequest.
     * @param {DepositRequestCreateArgs} args - Arguments to create a DepositRequest.
     * @example
     * // Create one DepositRequest
     * const DepositRequest = await prisma.depositRequest.create({
     *   data: {
     *     // ... data to create a DepositRequest
     *   }
     * })
     * 
     */
    create<T extends DepositRequestCreateArgs>(args: SelectSubset<T, DepositRequestCreateArgs<ExtArgs>>): Prisma__DepositRequestClient<$Result.GetResult<Prisma.$DepositRequestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DepositRequests.
     * @param {DepositRequestCreateManyArgs} args - Arguments to create many DepositRequests.
     * @example
     * // Create many DepositRequests
     * const depositRequest = await prisma.depositRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepositRequestCreateManyArgs>(args?: SelectSubset<T, DepositRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DepositRequests and returns the data saved in the database.
     * @param {DepositRequestCreateManyAndReturnArgs} args - Arguments to create many DepositRequests.
     * @example
     * // Create many DepositRequests
     * const depositRequest = await prisma.depositRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DepositRequests and only return the `id`
     * const depositRequestWithIdOnly = await prisma.depositRequest.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepositRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, DepositRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepositRequestPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DepositRequest.
     * @param {DepositRequestDeleteArgs} args - Arguments to delete one DepositRequest.
     * @example
     * // Delete one DepositRequest
     * const DepositRequest = await prisma.depositRequest.delete({
     *   where: {
     *     // ... filter to delete one DepositRequest
     *   }
     * })
     * 
     */
    delete<T extends DepositRequestDeleteArgs>(args: SelectSubset<T, DepositRequestDeleteArgs<ExtArgs>>): Prisma__DepositRequestClient<$Result.GetResult<Prisma.$DepositRequestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DepositRequest.
     * @param {DepositRequestUpdateArgs} args - Arguments to update one DepositRequest.
     * @example
     * // Update one DepositRequest
     * const depositRequest = await prisma.depositRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepositRequestUpdateArgs>(args: SelectSubset<T, DepositRequestUpdateArgs<ExtArgs>>): Prisma__DepositRequestClient<$Result.GetResult<Prisma.$DepositRequestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DepositRequests.
     * @param {DepositRequestDeleteManyArgs} args - Arguments to filter DepositRequests to delete.
     * @example
     * // Delete a few DepositRequests
     * const { count } = await prisma.depositRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepositRequestDeleteManyArgs>(args?: SelectSubset<T, DepositRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DepositRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepositRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DepositRequests
     * const depositRequest = await prisma.depositRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepositRequestUpdateManyArgs>(args: SelectSubset<T, DepositRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DepositRequest.
     * @param {DepositRequestUpsertArgs} args - Arguments to update or create a DepositRequest.
     * @example
     * // Update or create a DepositRequest
     * const depositRequest = await prisma.depositRequest.upsert({
     *   create: {
     *     // ... data to create a DepositRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DepositRequest we want to update
     *   }
     * })
     */
    upsert<T extends DepositRequestUpsertArgs>(args: SelectSubset<T, DepositRequestUpsertArgs<ExtArgs>>): Prisma__DepositRequestClient<$Result.GetResult<Prisma.$DepositRequestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DepositRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepositRequestCountArgs} args - Arguments to filter DepositRequests to count.
     * @example
     * // Count the number of DepositRequests
     * const count = await prisma.depositRequest.count({
     *   where: {
     *     // ... the filter for the DepositRequests we want to count
     *   }
     * })
    **/
    count<T extends DepositRequestCountArgs>(
      args?: Subset<T, DepositRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepositRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DepositRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepositRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepositRequestAggregateArgs>(args: Subset<T, DepositRequestAggregateArgs>): Prisma.PrismaPromise<GetDepositRequestAggregateType<T>>

    /**
     * Group by DepositRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepositRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepositRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepositRequestGroupByArgs['orderBy'] }
        : { orderBy?: DepositRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepositRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepositRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DepositRequest model
   */
  readonly fields: DepositRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DepositRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepositRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    openpayTransactions<T extends DepositRequest$openpayTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, DepositRequest$openpayTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpenpayTransactionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DepositRequest model
   */ 
  interface DepositRequestFieldRefs {
    readonly id: FieldRef<"DepositRequest", 'String'>
    readonly userId: FieldRef<"DepositRequest", 'String'>
    readonly amount: FieldRef<"DepositRequest", 'Decimal'>
    readonly pearlsAmount: FieldRef<"DepositRequest", 'Decimal'>
    readonly currency: FieldRef<"DepositRequest", 'String'>
    readonly paymentMethod: FieldRef<"DepositRequest", 'String'>
    readonly referenceCode: FieldRef<"DepositRequest", 'String'>
    readonly bankReference: FieldRef<"DepositRequest", 'String'>
    readonly bankAccount: FieldRef<"DepositRequest", 'String'>
    readonly bankAccountName: FieldRef<"DepositRequest", 'String'>
    readonly status: FieldRef<"DepositRequest", 'String'>
    readonly adminNotes: FieldRef<"DepositRequest", 'String'>
    readonly validatedBy: FieldRef<"DepositRequest", 'String'>
    readonly validatedAt: FieldRef<"DepositRequest", 'DateTime'>
    readonly proofImage: FieldRef<"DepositRequest", 'String'>
    readonly proofImageAdmin: FieldRef<"DepositRequest", 'String'>
    readonly transactionId: FieldRef<"DepositRequest", 'String'>
    readonly integrationMethod: FieldRef<"DepositRequest", 'String'>
    readonly openpayTransactionId: FieldRef<"DepositRequest", 'String'>
    readonly autoApprovalEligible: FieldRef<"DepositRequest", 'Boolean'>
    readonly processingFee: FieldRef<"DepositRequest", 'Float'>
    readonly createdAt: FieldRef<"DepositRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"DepositRequest", 'DateTime'>
    readonly expiresAt: FieldRef<"DepositRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DepositRequest findUnique
   */
  export type DepositRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositRequest
     */
    select?: DepositRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositRequestInclude<ExtArgs> | null
    /**
     * Filter, which DepositRequest to fetch.
     */
    where: DepositRequestWhereUniqueInput
  }

  /**
   * DepositRequest findUniqueOrThrow
   */
  export type DepositRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositRequest
     */
    select?: DepositRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositRequestInclude<ExtArgs> | null
    /**
     * Filter, which DepositRequest to fetch.
     */
    where: DepositRequestWhereUniqueInput
  }

  /**
   * DepositRequest findFirst
   */
  export type DepositRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositRequest
     */
    select?: DepositRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositRequestInclude<ExtArgs> | null
    /**
     * Filter, which DepositRequest to fetch.
     */
    where?: DepositRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepositRequests to fetch.
     */
    orderBy?: DepositRequestOrderByWithRelationInput | DepositRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DepositRequests.
     */
    cursor?: DepositRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepositRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepositRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DepositRequests.
     */
    distinct?: DepositRequestScalarFieldEnum | DepositRequestScalarFieldEnum[]
  }

  /**
   * DepositRequest findFirstOrThrow
   */
  export type DepositRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositRequest
     */
    select?: DepositRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositRequestInclude<ExtArgs> | null
    /**
     * Filter, which DepositRequest to fetch.
     */
    where?: DepositRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepositRequests to fetch.
     */
    orderBy?: DepositRequestOrderByWithRelationInput | DepositRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DepositRequests.
     */
    cursor?: DepositRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepositRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepositRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DepositRequests.
     */
    distinct?: DepositRequestScalarFieldEnum | DepositRequestScalarFieldEnum[]
  }

  /**
   * DepositRequest findMany
   */
  export type DepositRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositRequest
     */
    select?: DepositRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositRequestInclude<ExtArgs> | null
    /**
     * Filter, which DepositRequests to fetch.
     */
    where?: DepositRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepositRequests to fetch.
     */
    orderBy?: DepositRequestOrderByWithRelationInput | DepositRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DepositRequests.
     */
    cursor?: DepositRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepositRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepositRequests.
     */
    skip?: number
    distinct?: DepositRequestScalarFieldEnum | DepositRequestScalarFieldEnum[]
  }

  /**
   * DepositRequest create
   */
  export type DepositRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositRequest
     */
    select?: DepositRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a DepositRequest.
     */
    data: XOR<DepositRequestCreateInput, DepositRequestUncheckedCreateInput>
  }

  /**
   * DepositRequest createMany
   */
  export type DepositRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DepositRequests.
     */
    data: DepositRequestCreateManyInput | DepositRequestCreateManyInput[]
  }

  /**
   * DepositRequest createManyAndReturn
   */
  export type DepositRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositRequest
     */
    select?: DepositRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DepositRequests.
     */
    data: DepositRequestCreateManyInput | DepositRequestCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DepositRequest update
   */
  export type DepositRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositRequest
     */
    select?: DepositRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a DepositRequest.
     */
    data: XOR<DepositRequestUpdateInput, DepositRequestUncheckedUpdateInput>
    /**
     * Choose, which DepositRequest to update.
     */
    where: DepositRequestWhereUniqueInput
  }

  /**
   * DepositRequest updateMany
   */
  export type DepositRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DepositRequests.
     */
    data: XOR<DepositRequestUpdateManyMutationInput, DepositRequestUncheckedUpdateManyInput>
    /**
     * Filter which DepositRequests to update
     */
    where?: DepositRequestWhereInput
  }

  /**
   * DepositRequest upsert
   */
  export type DepositRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositRequest
     */
    select?: DepositRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the DepositRequest to update in case it exists.
     */
    where: DepositRequestWhereUniqueInput
    /**
     * In case the DepositRequest found by the `where` argument doesn't exist, create a new DepositRequest with this data.
     */
    create: XOR<DepositRequestCreateInput, DepositRequestUncheckedCreateInput>
    /**
     * In case the DepositRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepositRequestUpdateInput, DepositRequestUncheckedUpdateInput>
  }

  /**
   * DepositRequest delete
   */
  export type DepositRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositRequest
     */
    select?: DepositRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositRequestInclude<ExtArgs> | null
    /**
     * Filter which DepositRequest to delete.
     */
    where: DepositRequestWhereUniqueInput
  }

  /**
   * DepositRequest deleteMany
   */
  export type DepositRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DepositRequests to delete
     */
    where?: DepositRequestWhereInput
  }

  /**
   * DepositRequest.openpayTransactions
   */
  export type DepositRequest$openpayTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayTransaction
     */
    select?: OpenpayTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayTransactionInclude<ExtArgs> | null
    where?: OpenpayTransactionWhereInput
    orderBy?: OpenpayTransactionOrderByWithRelationInput | OpenpayTransactionOrderByWithRelationInput[]
    cursor?: OpenpayTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OpenpayTransactionScalarFieldEnum | OpenpayTransactionScalarFieldEnum[]
  }

  /**
   * DepositRequest without action
   */
  export type DepositRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositRequest
     */
    select?: DepositRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositRequestInclude<ExtArgs> | null
  }


  /**
   * Model WithdrawalRequest
   */

  export type AggregateWithdrawalRequest = {
    _count: WithdrawalRequestCountAggregateOutputType | null
    _avg: WithdrawalRequestAvgAggregateOutputType | null
    _sum: WithdrawalRequestSumAggregateOutputType | null
    _min: WithdrawalRequestMinAggregateOutputType | null
    _max: WithdrawalRequestMaxAggregateOutputType | null
  }

  export type WithdrawalRequestAvgAggregateOutputType = {
    pearlsAmount: Decimal | null
    amountInSoles: Decimal | null
    commission: Decimal | null
    netAmount: Decimal | null
  }

  export type WithdrawalRequestSumAggregateOutputType = {
    pearlsAmount: Decimal | null
    amountInSoles: Decimal | null
    commission: Decimal | null
    netAmount: Decimal | null
  }

  export type WithdrawalRequestMinAggregateOutputType = {
    id: string | null
    userId: string | null
    pearlsAmount: Decimal | null
    amountInSoles: Decimal | null
    commission: Decimal | null
    netAmount: Decimal | null
    bankCode: string | null
    accountNumber: string | null
    accountType: string | null
    accountHolderName: string | null
    accountHolderDni: string | null
    status: string | null
    adminNotes: string | null
    processedBy: string | null
    processedAt: Date | null
    bankTransactionId: string | null
    transferProof: string | null
    referenceCode: string | null
    transactionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WithdrawalRequestMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    pearlsAmount: Decimal | null
    amountInSoles: Decimal | null
    commission: Decimal | null
    netAmount: Decimal | null
    bankCode: string | null
    accountNumber: string | null
    accountType: string | null
    accountHolderName: string | null
    accountHolderDni: string | null
    status: string | null
    adminNotes: string | null
    processedBy: string | null
    processedAt: Date | null
    bankTransactionId: string | null
    transferProof: string | null
    referenceCode: string | null
    transactionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WithdrawalRequestCountAggregateOutputType = {
    id: number
    userId: number
    pearlsAmount: number
    amountInSoles: number
    commission: number
    netAmount: number
    bankCode: number
    accountNumber: number
    accountType: number
    accountHolderName: number
    accountHolderDni: number
    status: number
    adminNotes: number
    processedBy: number
    processedAt: number
    bankTransactionId: number
    transferProof: number
    referenceCode: number
    transactionId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WithdrawalRequestAvgAggregateInputType = {
    pearlsAmount?: true
    amountInSoles?: true
    commission?: true
    netAmount?: true
  }

  export type WithdrawalRequestSumAggregateInputType = {
    pearlsAmount?: true
    amountInSoles?: true
    commission?: true
    netAmount?: true
  }

  export type WithdrawalRequestMinAggregateInputType = {
    id?: true
    userId?: true
    pearlsAmount?: true
    amountInSoles?: true
    commission?: true
    netAmount?: true
    bankCode?: true
    accountNumber?: true
    accountType?: true
    accountHolderName?: true
    accountHolderDni?: true
    status?: true
    adminNotes?: true
    processedBy?: true
    processedAt?: true
    bankTransactionId?: true
    transferProof?: true
    referenceCode?: true
    transactionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WithdrawalRequestMaxAggregateInputType = {
    id?: true
    userId?: true
    pearlsAmount?: true
    amountInSoles?: true
    commission?: true
    netAmount?: true
    bankCode?: true
    accountNumber?: true
    accountType?: true
    accountHolderName?: true
    accountHolderDni?: true
    status?: true
    adminNotes?: true
    processedBy?: true
    processedAt?: true
    bankTransactionId?: true
    transferProof?: true
    referenceCode?: true
    transactionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WithdrawalRequestCountAggregateInputType = {
    id?: true
    userId?: true
    pearlsAmount?: true
    amountInSoles?: true
    commission?: true
    netAmount?: true
    bankCode?: true
    accountNumber?: true
    accountType?: true
    accountHolderName?: true
    accountHolderDni?: true
    status?: true
    adminNotes?: true
    processedBy?: true
    processedAt?: true
    bankTransactionId?: true
    transferProof?: true
    referenceCode?: true
    transactionId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WithdrawalRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WithdrawalRequest to aggregate.
     */
    where?: WithdrawalRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WithdrawalRequests to fetch.
     */
    orderBy?: WithdrawalRequestOrderByWithRelationInput | WithdrawalRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WithdrawalRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WithdrawalRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WithdrawalRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WithdrawalRequests
    **/
    _count?: true | WithdrawalRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WithdrawalRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WithdrawalRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WithdrawalRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WithdrawalRequestMaxAggregateInputType
  }

  export type GetWithdrawalRequestAggregateType<T extends WithdrawalRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateWithdrawalRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWithdrawalRequest[P]>
      : GetScalarType<T[P], AggregateWithdrawalRequest[P]>
  }




  export type WithdrawalRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WithdrawalRequestWhereInput
    orderBy?: WithdrawalRequestOrderByWithAggregationInput | WithdrawalRequestOrderByWithAggregationInput[]
    by: WithdrawalRequestScalarFieldEnum[] | WithdrawalRequestScalarFieldEnum
    having?: WithdrawalRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WithdrawalRequestCountAggregateInputType | true
    _avg?: WithdrawalRequestAvgAggregateInputType
    _sum?: WithdrawalRequestSumAggregateInputType
    _min?: WithdrawalRequestMinAggregateInputType
    _max?: WithdrawalRequestMaxAggregateInputType
  }

  export type WithdrawalRequestGroupByOutputType = {
    id: string
    userId: string
    pearlsAmount: Decimal
    amountInSoles: Decimal
    commission: Decimal
    netAmount: Decimal
    bankCode: string
    accountNumber: string
    accountType: string
    accountHolderName: string
    accountHolderDni: string
    status: string
    adminNotes: string | null
    processedBy: string | null
    processedAt: Date | null
    bankTransactionId: string | null
    transferProof: string | null
    referenceCode: string
    transactionId: string | null
    createdAt: Date
    updatedAt: Date
    _count: WithdrawalRequestCountAggregateOutputType | null
    _avg: WithdrawalRequestAvgAggregateOutputType | null
    _sum: WithdrawalRequestSumAggregateOutputType | null
    _min: WithdrawalRequestMinAggregateOutputType | null
    _max: WithdrawalRequestMaxAggregateOutputType | null
  }

  type GetWithdrawalRequestGroupByPayload<T extends WithdrawalRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WithdrawalRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WithdrawalRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WithdrawalRequestGroupByOutputType[P]>
            : GetScalarType<T[P], WithdrawalRequestGroupByOutputType[P]>
        }
      >
    >


  export type WithdrawalRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    pearlsAmount?: boolean
    amountInSoles?: boolean
    commission?: boolean
    netAmount?: boolean
    bankCode?: boolean
    accountNumber?: boolean
    accountType?: boolean
    accountHolderName?: boolean
    accountHolderDni?: boolean
    status?: boolean
    adminNotes?: boolean
    processedBy?: boolean
    processedAt?: boolean
    bankTransactionId?: boolean
    transferProof?: boolean
    referenceCode?: boolean
    transactionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["withdrawalRequest"]>

  export type WithdrawalRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    pearlsAmount?: boolean
    amountInSoles?: boolean
    commission?: boolean
    netAmount?: boolean
    bankCode?: boolean
    accountNumber?: boolean
    accountType?: boolean
    accountHolderName?: boolean
    accountHolderDni?: boolean
    status?: boolean
    adminNotes?: boolean
    processedBy?: boolean
    processedAt?: boolean
    bankTransactionId?: boolean
    transferProof?: boolean
    referenceCode?: boolean
    transactionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["withdrawalRequest"]>

  export type WithdrawalRequestSelectScalar = {
    id?: boolean
    userId?: boolean
    pearlsAmount?: boolean
    amountInSoles?: boolean
    commission?: boolean
    netAmount?: boolean
    bankCode?: boolean
    accountNumber?: boolean
    accountType?: boolean
    accountHolderName?: boolean
    accountHolderDni?: boolean
    status?: boolean
    adminNotes?: boolean
    processedBy?: boolean
    processedAt?: boolean
    bankTransactionId?: boolean
    transferProof?: boolean
    referenceCode?: boolean
    transactionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WithdrawalRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WithdrawalRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WithdrawalRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WithdrawalRequest"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      pearlsAmount: Prisma.Decimal
      amountInSoles: Prisma.Decimal
      commission: Prisma.Decimal
      netAmount: Prisma.Decimal
      bankCode: string
      accountNumber: string
      accountType: string
      accountHolderName: string
      accountHolderDni: string
      status: string
      adminNotes: string | null
      processedBy: string | null
      processedAt: Date | null
      bankTransactionId: string | null
      transferProof: string | null
      referenceCode: string
      transactionId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["withdrawalRequest"]>
    composites: {}
  }

  type WithdrawalRequestGetPayload<S extends boolean | null | undefined | WithdrawalRequestDefaultArgs> = $Result.GetResult<Prisma.$WithdrawalRequestPayload, S>

  type WithdrawalRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WithdrawalRequestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WithdrawalRequestCountAggregateInputType | true
    }

  export interface WithdrawalRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WithdrawalRequest'], meta: { name: 'WithdrawalRequest' } }
    /**
     * Find zero or one WithdrawalRequest that matches the filter.
     * @param {WithdrawalRequestFindUniqueArgs} args - Arguments to find a WithdrawalRequest
     * @example
     * // Get one WithdrawalRequest
     * const withdrawalRequest = await prisma.withdrawalRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WithdrawalRequestFindUniqueArgs>(args: SelectSubset<T, WithdrawalRequestFindUniqueArgs<ExtArgs>>): Prisma__WithdrawalRequestClient<$Result.GetResult<Prisma.$WithdrawalRequestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WithdrawalRequest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WithdrawalRequestFindUniqueOrThrowArgs} args - Arguments to find a WithdrawalRequest
     * @example
     * // Get one WithdrawalRequest
     * const withdrawalRequest = await prisma.withdrawalRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WithdrawalRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, WithdrawalRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WithdrawalRequestClient<$Result.GetResult<Prisma.$WithdrawalRequestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WithdrawalRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WithdrawalRequestFindFirstArgs} args - Arguments to find a WithdrawalRequest
     * @example
     * // Get one WithdrawalRequest
     * const withdrawalRequest = await prisma.withdrawalRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WithdrawalRequestFindFirstArgs>(args?: SelectSubset<T, WithdrawalRequestFindFirstArgs<ExtArgs>>): Prisma__WithdrawalRequestClient<$Result.GetResult<Prisma.$WithdrawalRequestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WithdrawalRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WithdrawalRequestFindFirstOrThrowArgs} args - Arguments to find a WithdrawalRequest
     * @example
     * // Get one WithdrawalRequest
     * const withdrawalRequest = await prisma.withdrawalRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WithdrawalRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, WithdrawalRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__WithdrawalRequestClient<$Result.GetResult<Prisma.$WithdrawalRequestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WithdrawalRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WithdrawalRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WithdrawalRequests
     * const withdrawalRequests = await prisma.withdrawalRequest.findMany()
     * 
     * // Get first 10 WithdrawalRequests
     * const withdrawalRequests = await prisma.withdrawalRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const withdrawalRequestWithIdOnly = await prisma.withdrawalRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WithdrawalRequestFindManyArgs>(args?: SelectSubset<T, WithdrawalRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WithdrawalRequestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WithdrawalRequest.
     * @param {WithdrawalRequestCreateArgs} args - Arguments to create a WithdrawalRequest.
     * @example
     * // Create one WithdrawalRequest
     * const WithdrawalRequest = await prisma.withdrawalRequest.create({
     *   data: {
     *     // ... data to create a WithdrawalRequest
     *   }
     * })
     * 
     */
    create<T extends WithdrawalRequestCreateArgs>(args: SelectSubset<T, WithdrawalRequestCreateArgs<ExtArgs>>): Prisma__WithdrawalRequestClient<$Result.GetResult<Prisma.$WithdrawalRequestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WithdrawalRequests.
     * @param {WithdrawalRequestCreateManyArgs} args - Arguments to create many WithdrawalRequests.
     * @example
     * // Create many WithdrawalRequests
     * const withdrawalRequest = await prisma.withdrawalRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WithdrawalRequestCreateManyArgs>(args?: SelectSubset<T, WithdrawalRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WithdrawalRequests and returns the data saved in the database.
     * @param {WithdrawalRequestCreateManyAndReturnArgs} args - Arguments to create many WithdrawalRequests.
     * @example
     * // Create many WithdrawalRequests
     * const withdrawalRequest = await prisma.withdrawalRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WithdrawalRequests and only return the `id`
     * const withdrawalRequestWithIdOnly = await prisma.withdrawalRequest.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WithdrawalRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, WithdrawalRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WithdrawalRequestPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WithdrawalRequest.
     * @param {WithdrawalRequestDeleteArgs} args - Arguments to delete one WithdrawalRequest.
     * @example
     * // Delete one WithdrawalRequest
     * const WithdrawalRequest = await prisma.withdrawalRequest.delete({
     *   where: {
     *     // ... filter to delete one WithdrawalRequest
     *   }
     * })
     * 
     */
    delete<T extends WithdrawalRequestDeleteArgs>(args: SelectSubset<T, WithdrawalRequestDeleteArgs<ExtArgs>>): Prisma__WithdrawalRequestClient<$Result.GetResult<Prisma.$WithdrawalRequestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WithdrawalRequest.
     * @param {WithdrawalRequestUpdateArgs} args - Arguments to update one WithdrawalRequest.
     * @example
     * // Update one WithdrawalRequest
     * const withdrawalRequest = await prisma.withdrawalRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WithdrawalRequestUpdateArgs>(args: SelectSubset<T, WithdrawalRequestUpdateArgs<ExtArgs>>): Prisma__WithdrawalRequestClient<$Result.GetResult<Prisma.$WithdrawalRequestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WithdrawalRequests.
     * @param {WithdrawalRequestDeleteManyArgs} args - Arguments to filter WithdrawalRequests to delete.
     * @example
     * // Delete a few WithdrawalRequests
     * const { count } = await prisma.withdrawalRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WithdrawalRequestDeleteManyArgs>(args?: SelectSubset<T, WithdrawalRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WithdrawalRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WithdrawalRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WithdrawalRequests
     * const withdrawalRequest = await prisma.withdrawalRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WithdrawalRequestUpdateManyArgs>(args: SelectSubset<T, WithdrawalRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WithdrawalRequest.
     * @param {WithdrawalRequestUpsertArgs} args - Arguments to update or create a WithdrawalRequest.
     * @example
     * // Update or create a WithdrawalRequest
     * const withdrawalRequest = await prisma.withdrawalRequest.upsert({
     *   create: {
     *     // ... data to create a WithdrawalRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WithdrawalRequest we want to update
     *   }
     * })
     */
    upsert<T extends WithdrawalRequestUpsertArgs>(args: SelectSubset<T, WithdrawalRequestUpsertArgs<ExtArgs>>): Prisma__WithdrawalRequestClient<$Result.GetResult<Prisma.$WithdrawalRequestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WithdrawalRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WithdrawalRequestCountArgs} args - Arguments to filter WithdrawalRequests to count.
     * @example
     * // Count the number of WithdrawalRequests
     * const count = await prisma.withdrawalRequest.count({
     *   where: {
     *     // ... the filter for the WithdrawalRequests we want to count
     *   }
     * })
    **/
    count<T extends WithdrawalRequestCountArgs>(
      args?: Subset<T, WithdrawalRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WithdrawalRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WithdrawalRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WithdrawalRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WithdrawalRequestAggregateArgs>(args: Subset<T, WithdrawalRequestAggregateArgs>): Prisma.PrismaPromise<GetWithdrawalRequestAggregateType<T>>

    /**
     * Group by WithdrawalRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WithdrawalRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WithdrawalRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WithdrawalRequestGroupByArgs['orderBy'] }
        : { orderBy?: WithdrawalRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WithdrawalRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWithdrawalRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WithdrawalRequest model
   */
  readonly fields: WithdrawalRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WithdrawalRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WithdrawalRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WithdrawalRequest model
   */ 
  interface WithdrawalRequestFieldRefs {
    readonly id: FieldRef<"WithdrawalRequest", 'String'>
    readonly userId: FieldRef<"WithdrawalRequest", 'String'>
    readonly pearlsAmount: FieldRef<"WithdrawalRequest", 'Decimal'>
    readonly amountInSoles: FieldRef<"WithdrawalRequest", 'Decimal'>
    readonly commission: FieldRef<"WithdrawalRequest", 'Decimal'>
    readonly netAmount: FieldRef<"WithdrawalRequest", 'Decimal'>
    readonly bankCode: FieldRef<"WithdrawalRequest", 'String'>
    readonly accountNumber: FieldRef<"WithdrawalRequest", 'String'>
    readonly accountType: FieldRef<"WithdrawalRequest", 'String'>
    readonly accountHolderName: FieldRef<"WithdrawalRequest", 'String'>
    readonly accountHolderDni: FieldRef<"WithdrawalRequest", 'String'>
    readonly status: FieldRef<"WithdrawalRequest", 'String'>
    readonly adminNotes: FieldRef<"WithdrawalRequest", 'String'>
    readonly processedBy: FieldRef<"WithdrawalRequest", 'String'>
    readonly processedAt: FieldRef<"WithdrawalRequest", 'DateTime'>
    readonly bankTransactionId: FieldRef<"WithdrawalRequest", 'String'>
    readonly transferProof: FieldRef<"WithdrawalRequest", 'String'>
    readonly referenceCode: FieldRef<"WithdrawalRequest", 'String'>
    readonly transactionId: FieldRef<"WithdrawalRequest", 'String'>
    readonly createdAt: FieldRef<"WithdrawalRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"WithdrawalRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WithdrawalRequest findUnique
   */
  export type WithdrawalRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WithdrawalRequest
     */
    select?: WithdrawalRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WithdrawalRequestInclude<ExtArgs> | null
    /**
     * Filter, which WithdrawalRequest to fetch.
     */
    where: WithdrawalRequestWhereUniqueInput
  }

  /**
   * WithdrawalRequest findUniqueOrThrow
   */
  export type WithdrawalRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WithdrawalRequest
     */
    select?: WithdrawalRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WithdrawalRequestInclude<ExtArgs> | null
    /**
     * Filter, which WithdrawalRequest to fetch.
     */
    where: WithdrawalRequestWhereUniqueInput
  }

  /**
   * WithdrawalRequest findFirst
   */
  export type WithdrawalRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WithdrawalRequest
     */
    select?: WithdrawalRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WithdrawalRequestInclude<ExtArgs> | null
    /**
     * Filter, which WithdrawalRequest to fetch.
     */
    where?: WithdrawalRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WithdrawalRequests to fetch.
     */
    orderBy?: WithdrawalRequestOrderByWithRelationInput | WithdrawalRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WithdrawalRequests.
     */
    cursor?: WithdrawalRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WithdrawalRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WithdrawalRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WithdrawalRequests.
     */
    distinct?: WithdrawalRequestScalarFieldEnum | WithdrawalRequestScalarFieldEnum[]
  }

  /**
   * WithdrawalRequest findFirstOrThrow
   */
  export type WithdrawalRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WithdrawalRequest
     */
    select?: WithdrawalRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WithdrawalRequestInclude<ExtArgs> | null
    /**
     * Filter, which WithdrawalRequest to fetch.
     */
    where?: WithdrawalRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WithdrawalRequests to fetch.
     */
    orderBy?: WithdrawalRequestOrderByWithRelationInput | WithdrawalRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WithdrawalRequests.
     */
    cursor?: WithdrawalRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WithdrawalRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WithdrawalRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WithdrawalRequests.
     */
    distinct?: WithdrawalRequestScalarFieldEnum | WithdrawalRequestScalarFieldEnum[]
  }

  /**
   * WithdrawalRequest findMany
   */
  export type WithdrawalRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WithdrawalRequest
     */
    select?: WithdrawalRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WithdrawalRequestInclude<ExtArgs> | null
    /**
     * Filter, which WithdrawalRequests to fetch.
     */
    where?: WithdrawalRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WithdrawalRequests to fetch.
     */
    orderBy?: WithdrawalRequestOrderByWithRelationInput | WithdrawalRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WithdrawalRequests.
     */
    cursor?: WithdrawalRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WithdrawalRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WithdrawalRequests.
     */
    skip?: number
    distinct?: WithdrawalRequestScalarFieldEnum | WithdrawalRequestScalarFieldEnum[]
  }

  /**
   * WithdrawalRequest create
   */
  export type WithdrawalRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WithdrawalRequest
     */
    select?: WithdrawalRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WithdrawalRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a WithdrawalRequest.
     */
    data: XOR<WithdrawalRequestCreateInput, WithdrawalRequestUncheckedCreateInput>
  }

  /**
   * WithdrawalRequest createMany
   */
  export type WithdrawalRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WithdrawalRequests.
     */
    data: WithdrawalRequestCreateManyInput | WithdrawalRequestCreateManyInput[]
  }

  /**
   * WithdrawalRequest createManyAndReturn
   */
  export type WithdrawalRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WithdrawalRequest
     */
    select?: WithdrawalRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WithdrawalRequests.
     */
    data: WithdrawalRequestCreateManyInput | WithdrawalRequestCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WithdrawalRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WithdrawalRequest update
   */
  export type WithdrawalRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WithdrawalRequest
     */
    select?: WithdrawalRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WithdrawalRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a WithdrawalRequest.
     */
    data: XOR<WithdrawalRequestUpdateInput, WithdrawalRequestUncheckedUpdateInput>
    /**
     * Choose, which WithdrawalRequest to update.
     */
    where: WithdrawalRequestWhereUniqueInput
  }

  /**
   * WithdrawalRequest updateMany
   */
  export type WithdrawalRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WithdrawalRequests.
     */
    data: XOR<WithdrawalRequestUpdateManyMutationInput, WithdrawalRequestUncheckedUpdateManyInput>
    /**
     * Filter which WithdrawalRequests to update
     */
    where?: WithdrawalRequestWhereInput
  }

  /**
   * WithdrawalRequest upsert
   */
  export type WithdrawalRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WithdrawalRequest
     */
    select?: WithdrawalRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WithdrawalRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the WithdrawalRequest to update in case it exists.
     */
    where: WithdrawalRequestWhereUniqueInput
    /**
     * In case the WithdrawalRequest found by the `where` argument doesn't exist, create a new WithdrawalRequest with this data.
     */
    create: XOR<WithdrawalRequestCreateInput, WithdrawalRequestUncheckedCreateInput>
    /**
     * In case the WithdrawalRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WithdrawalRequestUpdateInput, WithdrawalRequestUncheckedUpdateInput>
  }

  /**
   * WithdrawalRequest delete
   */
  export type WithdrawalRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WithdrawalRequest
     */
    select?: WithdrawalRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WithdrawalRequestInclude<ExtArgs> | null
    /**
     * Filter which WithdrawalRequest to delete.
     */
    where: WithdrawalRequestWhereUniqueInput
  }

  /**
   * WithdrawalRequest deleteMany
   */
  export type WithdrawalRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WithdrawalRequests to delete
     */
    where?: WithdrawalRequestWhereInput
  }

  /**
   * WithdrawalRequest without action
   */
  export type WithdrawalRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WithdrawalRequest
     */
    select?: WithdrawalRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WithdrawalRequestInclude<ExtArgs> | null
  }


  /**
   * Model PaymentReference
   */

  export type AggregatePaymentReference = {
    _count: PaymentReferenceCountAggregateOutputType | null
    _avg: PaymentReferenceAvgAggregateOutputType | null
    _sum: PaymentReferenceSumAggregateOutputType | null
    _min: PaymentReferenceMinAggregateOutputType | null
    _max: PaymentReferenceMaxAggregateOutputType | null
  }

  export type PaymentReferenceAvgAggregateOutputType = {
    amount: Decimal | null
  }

  export type PaymentReferenceSumAggregateOutputType = {
    amount: Decimal | null
  }

  export type PaymentReferenceMinAggregateOutputType = {
    id: string | null
    code: string | null
    type: string | null
    userId: string | null
    amount: Decimal | null
    description: string | null
    metadata: string | null
    isUsed: boolean | null
    usedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    expiresAt: Date | null
  }

  export type PaymentReferenceMaxAggregateOutputType = {
    id: string | null
    code: string | null
    type: string | null
    userId: string | null
    amount: Decimal | null
    description: string | null
    metadata: string | null
    isUsed: boolean | null
    usedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    expiresAt: Date | null
  }

  export type PaymentReferenceCountAggregateOutputType = {
    id: number
    code: number
    type: number
    userId: number
    amount: number
    description: number
    metadata: number
    isUsed: number
    usedAt: number
    createdAt: number
    updatedAt: number
    expiresAt: number
    _all: number
  }


  export type PaymentReferenceAvgAggregateInputType = {
    amount?: true
  }

  export type PaymentReferenceSumAggregateInputType = {
    amount?: true
  }

  export type PaymentReferenceMinAggregateInputType = {
    id?: true
    code?: true
    type?: true
    userId?: true
    amount?: true
    description?: true
    metadata?: true
    isUsed?: true
    usedAt?: true
    createdAt?: true
    updatedAt?: true
    expiresAt?: true
  }

  export type PaymentReferenceMaxAggregateInputType = {
    id?: true
    code?: true
    type?: true
    userId?: true
    amount?: true
    description?: true
    metadata?: true
    isUsed?: true
    usedAt?: true
    createdAt?: true
    updatedAt?: true
    expiresAt?: true
  }

  export type PaymentReferenceCountAggregateInputType = {
    id?: true
    code?: true
    type?: true
    userId?: true
    amount?: true
    description?: true
    metadata?: true
    isUsed?: true
    usedAt?: true
    createdAt?: true
    updatedAt?: true
    expiresAt?: true
    _all?: true
  }

  export type PaymentReferenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentReference to aggregate.
     */
    where?: PaymentReferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentReferences to fetch.
     */
    orderBy?: PaymentReferenceOrderByWithRelationInput | PaymentReferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentReferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentReferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentReferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaymentReferences
    **/
    _count?: true | PaymentReferenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentReferenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentReferenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentReferenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentReferenceMaxAggregateInputType
  }

  export type GetPaymentReferenceAggregateType<T extends PaymentReferenceAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentReference]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentReference[P]>
      : GetScalarType<T[P], AggregatePaymentReference[P]>
  }




  export type PaymentReferenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentReferenceWhereInput
    orderBy?: PaymentReferenceOrderByWithAggregationInput | PaymentReferenceOrderByWithAggregationInput[]
    by: PaymentReferenceScalarFieldEnum[] | PaymentReferenceScalarFieldEnum
    having?: PaymentReferenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentReferenceCountAggregateInputType | true
    _avg?: PaymentReferenceAvgAggregateInputType
    _sum?: PaymentReferenceSumAggregateInputType
    _min?: PaymentReferenceMinAggregateInputType
    _max?: PaymentReferenceMaxAggregateInputType
  }

  export type PaymentReferenceGroupByOutputType = {
    id: string
    code: string
    type: string
    userId: string
    amount: Decimal
    description: string
    metadata: string | null
    isUsed: boolean
    usedAt: Date | null
    createdAt: Date
    updatedAt: Date
    expiresAt: Date
    _count: PaymentReferenceCountAggregateOutputType | null
    _avg: PaymentReferenceAvgAggregateOutputType | null
    _sum: PaymentReferenceSumAggregateOutputType | null
    _min: PaymentReferenceMinAggregateOutputType | null
    _max: PaymentReferenceMaxAggregateOutputType | null
  }

  type GetPaymentReferenceGroupByPayload<T extends PaymentReferenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentReferenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentReferenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentReferenceGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentReferenceGroupByOutputType[P]>
        }
      >
    >


  export type PaymentReferenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    type?: boolean
    userId?: boolean
    amount?: boolean
    description?: boolean
    metadata?: boolean
    isUsed?: boolean
    usedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    expiresAt?: boolean
  }, ExtArgs["result"]["paymentReference"]>

  export type PaymentReferenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    type?: boolean
    userId?: boolean
    amount?: boolean
    description?: boolean
    metadata?: boolean
    isUsed?: boolean
    usedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    expiresAt?: boolean
  }, ExtArgs["result"]["paymentReference"]>

  export type PaymentReferenceSelectScalar = {
    id?: boolean
    code?: boolean
    type?: boolean
    userId?: boolean
    amount?: boolean
    description?: boolean
    metadata?: boolean
    isUsed?: boolean
    usedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    expiresAt?: boolean
  }


  export type $PaymentReferencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaymentReference"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string
      type: string
      userId: string
      amount: Prisma.Decimal
      description: string
      metadata: string | null
      isUsed: boolean
      usedAt: Date | null
      createdAt: Date
      updatedAt: Date
      expiresAt: Date
    }, ExtArgs["result"]["paymentReference"]>
    composites: {}
  }

  type PaymentReferenceGetPayload<S extends boolean | null | undefined | PaymentReferenceDefaultArgs> = $Result.GetResult<Prisma.$PaymentReferencePayload, S>

  type PaymentReferenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaymentReferenceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaymentReferenceCountAggregateInputType | true
    }

  export interface PaymentReferenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentReference'], meta: { name: 'PaymentReference' } }
    /**
     * Find zero or one PaymentReference that matches the filter.
     * @param {PaymentReferenceFindUniqueArgs} args - Arguments to find a PaymentReference
     * @example
     * // Get one PaymentReference
     * const paymentReference = await prisma.paymentReference.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentReferenceFindUniqueArgs>(args: SelectSubset<T, PaymentReferenceFindUniqueArgs<ExtArgs>>): Prisma__PaymentReferenceClient<$Result.GetResult<Prisma.$PaymentReferencePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PaymentReference that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PaymentReferenceFindUniqueOrThrowArgs} args - Arguments to find a PaymentReference
     * @example
     * // Get one PaymentReference
     * const paymentReference = await prisma.paymentReference.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentReferenceFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentReferenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentReferenceClient<$Result.GetResult<Prisma.$PaymentReferencePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PaymentReference that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentReferenceFindFirstArgs} args - Arguments to find a PaymentReference
     * @example
     * // Get one PaymentReference
     * const paymentReference = await prisma.paymentReference.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentReferenceFindFirstArgs>(args?: SelectSubset<T, PaymentReferenceFindFirstArgs<ExtArgs>>): Prisma__PaymentReferenceClient<$Result.GetResult<Prisma.$PaymentReferencePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PaymentReference that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentReferenceFindFirstOrThrowArgs} args - Arguments to find a PaymentReference
     * @example
     * // Get one PaymentReference
     * const paymentReference = await prisma.paymentReference.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentReferenceFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentReferenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentReferenceClient<$Result.GetResult<Prisma.$PaymentReferencePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PaymentReferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentReferenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaymentReferences
     * const paymentReferences = await prisma.paymentReference.findMany()
     * 
     * // Get first 10 PaymentReferences
     * const paymentReferences = await prisma.paymentReference.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentReferenceWithIdOnly = await prisma.paymentReference.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentReferenceFindManyArgs>(args?: SelectSubset<T, PaymentReferenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentReferencePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PaymentReference.
     * @param {PaymentReferenceCreateArgs} args - Arguments to create a PaymentReference.
     * @example
     * // Create one PaymentReference
     * const PaymentReference = await prisma.paymentReference.create({
     *   data: {
     *     // ... data to create a PaymentReference
     *   }
     * })
     * 
     */
    create<T extends PaymentReferenceCreateArgs>(args: SelectSubset<T, PaymentReferenceCreateArgs<ExtArgs>>): Prisma__PaymentReferenceClient<$Result.GetResult<Prisma.$PaymentReferencePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PaymentReferences.
     * @param {PaymentReferenceCreateManyArgs} args - Arguments to create many PaymentReferences.
     * @example
     * // Create many PaymentReferences
     * const paymentReference = await prisma.paymentReference.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentReferenceCreateManyArgs>(args?: SelectSubset<T, PaymentReferenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PaymentReferences and returns the data saved in the database.
     * @param {PaymentReferenceCreateManyAndReturnArgs} args - Arguments to create many PaymentReferences.
     * @example
     * // Create many PaymentReferences
     * const paymentReference = await prisma.paymentReference.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PaymentReferences and only return the `id`
     * const paymentReferenceWithIdOnly = await prisma.paymentReference.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentReferenceCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentReferenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentReferencePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PaymentReference.
     * @param {PaymentReferenceDeleteArgs} args - Arguments to delete one PaymentReference.
     * @example
     * // Delete one PaymentReference
     * const PaymentReference = await prisma.paymentReference.delete({
     *   where: {
     *     // ... filter to delete one PaymentReference
     *   }
     * })
     * 
     */
    delete<T extends PaymentReferenceDeleteArgs>(args: SelectSubset<T, PaymentReferenceDeleteArgs<ExtArgs>>): Prisma__PaymentReferenceClient<$Result.GetResult<Prisma.$PaymentReferencePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PaymentReference.
     * @param {PaymentReferenceUpdateArgs} args - Arguments to update one PaymentReference.
     * @example
     * // Update one PaymentReference
     * const paymentReference = await prisma.paymentReference.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentReferenceUpdateArgs>(args: SelectSubset<T, PaymentReferenceUpdateArgs<ExtArgs>>): Prisma__PaymentReferenceClient<$Result.GetResult<Prisma.$PaymentReferencePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PaymentReferences.
     * @param {PaymentReferenceDeleteManyArgs} args - Arguments to filter PaymentReferences to delete.
     * @example
     * // Delete a few PaymentReferences
     * const { count } = await prisma.paymentReference.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentReferenceDeleteManyArgs>(args?: SelectSubset<T, PaymentReferenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentReferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentReferenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaymentReferences
     * const paymentReference = await prisma.paymentReference.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentReferenceUpdateManyArgs>(args: SelectSubset<T, PaymentReferenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PaymentReference.
     * @param {PaymentReferenceUpsertArgs} args - Arguments to update or create a PaymentReference.
     * @example
     * // Update or create a PaymentReference
     * const paymentReference = await prisma.paymentReference.upsert({
     *   create: {
     *     // ... data to create a PaymentReference
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaymentReference we want to update
     *   }
     * })
     */
    upsert<T extends PaymentReferenceUpsertArgs>(args: SelectSubset<T, PaymentReferenceUpsertArgs<ExtArgs>>): Prisma__PaymentReferenceClient<$Result.GetResult<Prisma.$PaymentReferencePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PaymentReferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentReferenceCountArgs} args - Arguments to filter PaymentReferences to count.
     * @example
     * // Count the number of PaymentReferences
     * const count = await prisma.paymentReference.count({
     *   where: {
     *     // ... the filter for the PaymentReferences we want to count
     *   }
     * })
    **/
    count<T extends PaymentReferenceCountArgs>(
      args?: Subset<T, PaymentReferenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentReferenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaymentReference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentReferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentReferenceAggregateArgs>(args: Subset<T, PaymentReferenceAggregateArgs>): Prisma.PrismaPromise<GetPaymentReferenceAggregateType<T>>

    /**
     * Group by PaymentReference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentReferenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentReferenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentReferenceGroupByArgs['orderBy'] }
        : { orderBy?: PaymentReferenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentReferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentReferenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaymentReference model
   */
  readonly fields: PaymentReferenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaymentReference.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentReferenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PaymentReference model
   */ 
  interface PaymentReferenceFieldRefs {
    readonly id: FieldRef<"PaymentReference", 'String'>
    readonly code: FieldRef<"PaymentReference", 'String'>
    readonly type: FieldRef<"PaymentReference", 'String'>
    readonly userId: FieldRef<"PaymentReference", 'String'>
    readonly amount: FieldRef<"PaymentReference", 'Decimal'>
    readonly description: FieldRef<"PaymentReference", 'String'>
    readonly metadata: FieldRef<"PaymentReference", 'String'>
    readonly isUsed: FieldRef<"PaymentReference", 'Boolean'>
    readonly usedAt: FieldRef<"PaymentReference", 'DateTime'>
    readonly createdAt: FieldRef<"PaymentReference", 'DateTime'>
    readonly updatedAt: FieldRef<"PaymentReference", 'DateTime'>
    readonly expiresAt: FieldRef<"PaymentReference", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PaymentReference findUnique
   */
  export type PaymentReferenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentReference
     */
    select?: PaymentReferenceSelect<ExtArgs> | null
    /**
     * Filter, which PaymentReference to fetch.
     */
    where: PaymentReferenceWhereUniqueInput
  }

  /**
   * PaymentReference findUniqueOrThrow
   */
  export type PaymentReferenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentReference
     */
    select?: PaymentReferenceSelect<ExtArgs> | null
    /**
     * Filter, which PaymentReference to fetch.
     */
    where: PaymentReferenceWhereUniqueInput
  }

  /**
   * PaymentReference findFirst
   */
  export type PaymentReferenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentReference
     */
    select?: PaymentReferenceSelect<ExtArgs> | null
    /**
     * Filter, which PaymentReference to fetch.
     */
    where?: PaymentReferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentReferences to fetch.
     */
    orderBy?: PaymentReferenceOrderByWithRelationInput | PaymentReferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentReferences.
     */
    cursor?: PaymentReferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentReferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentReferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentReferences.
     */
    distinct?: PaymentReferenceScalarFieldEnum | PaymentReferenceScalarFieldEnum[]
  }

  /**
   * PaymentReference findFirstOrThrow
   */
  export type PaymentReferenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentReference
     */
    select?: PaymentReferenceSelect<ExtArgs> | null
    /**
     * Filter, which PaymentReference to fetch.
     */
    where?: PaymentReferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentReferences to fetch.
     */
    orderBy?: PaymentReferenceOrderByWithRelationInput | PaymentReferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentReferences.
     */
    cursor?: PaymentReferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentReferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentReferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentReferences.
     */
    distinct?: PaymentReferenceScalarFieldEnum | PaymentReferenceScalarFieldEnum[]
  }

  /**
   * PaymentReference findMany
   */
  export type PaymentReferenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentReference
     */
    select?: PaymentReferenceSelect<ExtArgs> | null
    /**
     * Filter, which PaymentReferences to fetch.
     */
    where?: PaymentReferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentReferences to fetch.
     */
    orderBy?: PaymentReferenceOrderByWithRelationInput | PaymentReferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaymentReferences.
     */
    cursor?: PaymentReferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentReferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentReferences.
     */
    skip?: number
    distinct?: PaymentReferenceScalarFieldEnum | PaymentReferenceScalarFieldEnum[]
  }

  /**
   * PaymentReference create
   */
  export type PaymentReferenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentReference
     */
    select?: PaymentReferenceSelect<ExtArgs> | null
    /**
     * The data needed to create a PaymentReference.
     */
    data: XOR<PaymentReferenceCreateInput, PaymentReferenceUncheckedCreateInput>
  }

  /**
   * PaymentReference createMany
   */
  export type PaymentReferenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaymentReferences.
     */
    data: PaymentReferenceCreateManyInput | PaymentReferenceCreateManyInput[]
  }

  /**
   * PaymentReference createManyAndReturn
   */
  export type PaymentReferenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentReference
     */
    select?: PaymentReferenceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PaymentReferences.
     */
    data: PaymentReferenceCreateManyInput | PaymentReferenceCreateManyInput[]
  }

  /**
   * PaymentReference update
   */
  export type PaymentReferenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentReference
     */
    select?: PaymentReferenceSelect<ExtArgs> | null
    /**
     * The data needed to update a PaymentReference.
     */
    data: XOR<PaymentReferenceUpdateInput, PaymentReferenceUncheckedUpdateInput>
    /**
     * Choose, which PaymentReference to update.
     */
    where: PaymentReferenceWhereUniqueInput
  }

  /**
   * PaymentReference updateMany
   */
  export type PaymentReferenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaymentReferences.
     */
    data: XOR<PaymentReferenceUpdateManyMutationInput, PaymentReferenceUncheckedUpdateManyInput>
    /**
     * Filter which PaymentReferences to update
     */
    where?: PaymentReferenceWhereInput
  }

  /**
   * PaymentReference upsert
   */
  export type PaymentReferenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentReference
     */
    select?: PaymentReferenceSelect<ExtArgs> | null
    /**
     * The filter to search for the PaymentReference to update in case it exists.
     */
    where: PaymentReferenceWhereUniqueInput
    /**
     * In case the PaymentReference found by the `where` argument doesn't exist, create a new PaymentReference with this data.
     */
    create: XOR<PaymentReferenceCreateInput, PaymentReferenceUncheckedCreateInput>
    /**
     * In case the PaymentReference was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentReferenceUpdateInput, PaymentReferenceUncheckedUpdateInput>
  }

  /**
   * PaymentReference delete
   */
  export type PaymentReferenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentReference
     */
    select?: PaymentReferenceSelect<ExtArgs> | null
    /**
     * Filter which PaymentReference to delete.
     */
    where: PaymentReferenceWhereUniqueInput
  }

  /**
   * PaymentReference deleteMany
   */
  export type PaymentReferenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentReferences to delete
     */
    where?: PaymentReferenceWhereInput
  }

  /**
   * PaymentReference without action
   */
  export type PaymentReferenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentReference
     */
    select?: PaymentReferenceSelect<ExtArgs> | null
  }


  /**
   * Model BankConfiguration
   */

  export type AggregateBankConfiguration = {
    _count: BankConfigurationCountAggregateOutputType | null
    _avg: BankConfigurationAvgAggregateOutputType | null
    _sum: BankConfigurationSumAggregateOutputType | null
    _min: BankConfigurationMinAggregateOutputType | null
    _max: BankConfigurationMaxAggregateOutputType | null
  }

  export type BankConfigurationAvgAggregateOutputType = {
    minDeposit: Decimal | null
    maxDeposit: Decimal | null
    depositCommission: Decimal | null
  }

  export type BankConfigurationSumAggregateOutputType = {
    minDeposit: Decimal | null
    maxDeposit: Decimal | null
    depositCommission: Decimal | null
  }

  export type BankConfigurationMinAggregateOutputType = {
    id: string | null
    bankCode: string | null
    bankName: string | null
    accountNumber: string | null
    accountType: string | null
    accountHolderName: string | null
    cci: string | null
    isActive: boolean | null
    minDeposit: Decimal | null
    maxDeposit: Decimal | null
    depositCommission: Decimal | null
    instructions: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BankConfigurationMaxAggregateOutputType = {
    id: string | null
    bankCode: string | null
    bankName: string | null
    accountNumber: string | null
    accountType: string | null
    accountHolderName: string | null
    cci: string | null
    isActive: boolean | null
    minDeposit: Decimal | null
    maxDeposit: Decimal | null
    depositCommission: Decimal | null
    instructions: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BankConfigurationCountAggregateOutputType = {
    id: number
    bankCode: number
    bankName: number
    accountNumber: number
    accountType: number
    accountHolderName: number
    cci: number
    isActive: number
    minDeposit: number
    maxDeposit: number
    depositCommission: number
    instructions: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BankConfigurationAvgAggregateInputType = {
    minDeposit?: true
    maxDeposit?: true
    depositCommission?: true
  }

  export type BankConfigurationSumAggregateInputType = {
    minDeposit?: true
    maxDeposit?: true
    depositCommission?: true
  }

  export type BankConfigurationMinAggregateInputType = {
    id?: true
    bankCode?: true
    bankName?: true
    accountNumber?: true
    accountType?: true
    accountHolderName?: true
    cci?: true
    isActive?: true
    minDeposit?: true
    maxDeposit?: true
    depositCommission?: true
    instructions?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BankConfigurationMaxAggregateInputType = {
    id?: true
    bankCode?: true
    bankName?: true
    accountNumber?: true
    accountType?: true
    accountHolderName?: true
    cci?: true
    isActive?: true
    minDeposit?: true
    maxDeposit?: true
    depositCommission?: true
    instructions?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BankConfigurationCountAggregateInputType = {
    id?: true
    bankCode?: true
    bankName?: true
    accountNumber?: true
    accountType?: true
    accountHolderName?: true
    cci?: true
    isActive?: true
    minDeposit?: true
    maxDeposit?: true
    depositCommission?: true
    instructions?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BankConfigurationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BankConfiguration to aggregate.
     */
    where?: BankConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BankConfigurations to fetch.
     */
    orderBy?: BankConfigurationOrderByWithRelationInput | BankConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BankConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BankConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BankConfigurations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BankConfigurations
    **/
    _count?: true | BankConfigurationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BankConfigurationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BankConfigurationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BankConfigurationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BankConfigurationMaxAggregateInputType
  }

  export type GetBankConfigurationAggregateType<T extends BankConfigurationAggregateArgs> = {
        [P in keyof T & keyof AggregateBankConfiguration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBankConfiguration[P]>
      : GetScalarType<T[P], AggregateBankConfiguration[P]>
  }




  export type BankConfigurationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BankConfigurationWhereInput
    orderBy?: BankConfigurationOrderByWithAggregationInput | BankConfigurationOrderByWithAggregationInput[]
    by: BankConfigurationScalarFieldEnum[] | BankConfigurationScalarFieldEnum
    having?: BankConfigurationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BankConfigurationCountAggregateInputType | true
    _avg?: BankConfigurationAvgAggregateInputType
    _sum?: BankConfigurationSumAggregateInputType
    _min?: BankConfigurationMinAggregateInputType
    _max?: BankConfigurationMaxAggregateInputType
  }

  export type BankConfigurationGroupByOutputType = {
    id: string
    bankCode: string
    bankName: string
    accountNumber: string
    accountType: string
    accountHolderName: string
    cci: string | null
    isActive: boolean
    minDeposit: Decimal
    maxDeposit: Decimal
    depositCommission: Decimal
    instructions: string | null
    createdAt: Date
    updatedAt: Date
    _count: BankConfigurationCountAggregateOutputType | null
    _avg: BankConfigurationAvgAggregateOutputType | null
    _sum: BankConfigurationSumAggregateOutputType | null
    _min: BankConfigurationMinAggregateOutputType | null
    _max: BankConfigurationMaxAggregateOutputType | null
  }

  type GetBankConfigurationGroupByPayload<T extends BankConfigurationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BankConfigurationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BankConfigurationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BankConfigurationGroupByOutputType[P]>
            : GetScalarType<T[P], BankConfigurationGroupByOutputType[P]>
        }
      >
    >


  export type BankConfigurationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bankCode?: boolean
    bankName?: boolean
    accountNumber?: boolean
    accountType?: boolean
    accountHolderName?: boolean
    cci?: boolean
    isActive?: boolean
    minDeposit?: boolean
    maxDeposit?: boolean
    depositCommission?: boolean
    instructions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["bankConfiguration"]>

  export type BankConfigurationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bankCode?: boolean
    bankName?: boolean
    accountNumber?: boolean
    accountType?: boolean
    accountHolderName?: boolean
    cci?: boolean
    isActive?: boolean
    minDeposit?: boolean
    maxDeposit?: boolean
    depositCommission?: boolean
    instructions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["bankConfiguration"]>

  export type BankConfigurationSelectScalar = {
    id?: boolean
    bankCode?: boolean
    bankName?: boolean
    accountNumber?: boolean
    accountType?: boolean
    accountHolderName?: boolean
    cci?: boolean
    isActive?: boolean
    minDeposit?: boolean
    maxDeposit?: boolean
    depositCommission?: boolean
    instructions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $BankConfigurationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BankConfiguration"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      bankCode: string
      bankName: string
      accountNumber: string
      accountType: string
      accountHolderName: string
      cci: string | null
      isActive: boolean
      minDeposit: Prisma.Decimal
      maxDeposit: Prisma.Decimal
      depositCommission: Prisma.Decimal
      instructions: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["bankConfiguration"]>
    composites: {}
  }

  type BankConfigurationGetPayload<S extends boolean | null | undefined | BankConfigurationDefaultArgs> = $Result.GetResult<Prisma.$BankConfigurationPayload, S>

  type BankConfigurationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BankConfigurationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BankConfigurationCountAggregateInputType | true
    }

  export interface BankConfigurationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BankConfiguration'], meta: { name: 'BankConfiguration' } }
    /**
     * Find zero or one BankConfiguration that matches the filter.
     * @param {BankConfigurationFindUniqueArgs} args - Arguments to find a BankConfiguration
     * @example
     * // Get one BankConfiguration
     * const bankConfiguration = await prisma.bankConfiguration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BankConfigurationFindUniqueArgs>(args: SelectSubset<T, BankConfigurationFindUniqueArgs<ExtArgs>>): Prisma__BankConfigurationClient<$Result.GetResult<Prisma.$BankConfigurationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BankConfiguration that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BankConfigurationFindUniqueOrThrowArgs} args - Arguments to find a BankConfiguration
     * @example
     * // Get one BankConfiguration
     * const bankConfiguration = await prisma.bankConfiguration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BankConfigurationFindUniqueOrThrowArgs>(args: SelectSubset<T, BankConfigurationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BankConfigurationClient<$Result.GetResult<Prisma.$BankConfigurationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BankConfiguration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankConfigurationFindFirstArgs} args - Arguments to find a BankConfiguration
     * @example
     * // Get one BankConfiguration
     * const bankConfiguration = await prisma.bankConfiguration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BankConfigurationFindFirstArgs>(args?: SelectSubset<T, BankConfigurationFindFirstArgs<ExtArgs>>): Prisma__BankConfigurationClient<$Result.GetResult<Prisma.$BankConfigurationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BankConfiguration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankConfigurationFindFirstOrThrowArgs} args - Arguments to find a BankConfiguration
     * @example
     * // Get one BankConfiguration
     * const bankConfiguration = await prisma.bankConfiguration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BankConfigurationFindFirstOrThrowArgs>(args?: SelectSubset<T, BankConfigurationFindFirstOrThrowArgs<ExtArgs>>): Prisma__BankConfigurationClient<$Result.GetResult<Prisma.$BankConfigurationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BankConfigurations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankConfigurationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BankConfigurations
     * const bankConfigurations = await prisma.bankConfiguration.findMany()
     * 
     * // Get first 10 BankConfigurations
     * const bankConfigurations = await prisma.bankConfiguration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bankConfigurationWithIdOnly = await prisma.bankConfiguration.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BankConfigurationFindManyArgs>(args?: SelectSubset<T, BankConfigurationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BankConfigurationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BankConfiguration.
     * @param {BankConfigurationCreateArgs} args - Arguments to create a BankConfiguration.
     * @example
     * // Create one BankConfiguration
     * const BankConfiguration = await prisma.bankConfiguration.create({
     *   data: {
     *     // ... data to create a BankConfiguration
     *   }
     * })
     * 
     */
    create<T extends BankConfigurationCreateArgs>(args: SelectSubset<T, BankConfigurationCreateArgs<ExtArgs>>): Prisma__BankConfigurationClient<$Result.GetResult<Prisma.$BankConfigurationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BankConfigurations.
     * @param {BankConfigurationCreateManyArgs} args - Arguments to create many BankConfigurations.
     * @example
     * // Create many BankConfigurations
     * const bankConfiguration = await prisma.bankConfiguration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BankConfigurationCreateManyArgs>(args?: SelectSubset<T, BankConfigurationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BankConfigurations and returns the data saved in the database.
     * @param {BankConfigurationCreateManyAndReturnArgs} args - Arguments to create many BankConfigurations.
     * @example
     * // Create many BankConfigurations
     * const bankConfiguration = await prisma.bankConfiguration.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BankConfigurations and only return the `id`
     * const bankConfigurationWithIdOnly = await prisma.bankConfiguration.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BankConfigurationCreateManyAndReturnArgs>(args?: SelectSubset<T, BankConfigurationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BankConfigurationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BankConfiguration.
     * @param {BankConfigurationDeleteArgs} args - Arguments to delete one BankConfiguration.
     * @example
     * // Delete one BankConfiguration
     * const BankConfiguration = await prisma.bankConfiguration.delete({
     *   where: {
     *     // ... filter to delete one BankConfiguration
     *   }
     * })
     * 
     */
    delete<T extends BankConfigurationDeleteArgs>(args: SelectSubset<T, BankConfigurationDeleteArgs<ExtArgs>>): Prisma__BankConfigurationClient<$Result.GetResult<Prisma.$BankConfigurationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BankConfiguration.
     * @param {BankConfigurationUpdateArgs} args - Arguments to update one BankConfiguration.
     * @example
     * // Update one BankConfiguration
     * const bankConfiguration = await prisma.bankConfiguration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BankConfigurationUpdateArgs>(args: SelectSubset<T, BankConfigurationUpdateArgs<ExtArgs>>): Prisma__BankConfigurationClient<$Result.GetResult<Prisma.$BankConfigurationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BankConfigurations.
     * @param {BankConfigurationDeleteManyArgs} args - Arguments to filter BankConfigurations to delete.
     * @example
     * // Delete a few BankConfigurations
     * const { count } = await prisma.bankConfiguration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BankConfigurationDeleteManyArgs>(args?: SelectSubset<T, BankConfigurationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BankConfigurations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankConfigurationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BankConfigurations
     * const bankConfiguration = await prisma.bankConfiguration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BankConfigurationUpdateManyArgs>(args: SelectSubset<T, BankConfigurationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BankConfiguration.
     * @param {BankConfigurationUpsertArgs} args - Arguments to update or create a BankConfiguration.
     * @example
     * // Update or create a BankConfiguration
     * const bankConfiguration = await prisma.bankConfiguration.upsert({
     *   create: {
     *     // ... data to create a BankConfiguration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BankConfiguration we want to update
     *   }
     * })
     */
    upsert<T extends BankConfigurationUpsertArgs>(args: SelectSubset<T, BankConfigurationUpsertArgs<ExtArgs>>): Prisma__BankConfigurationClient<$Result.GetResult<Prisma.$BankConfigurationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BankConfigurations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankConfigurationCountArgs} args - Arguments to filter BankConfigurations to count.
     * @example
     * // Count the number of BankConfigurations
     * const count = await prisma.bankConfiguration.count({
     *   where: {
     *     // ... the filter for the BankConfigurations we want to count
     *   }
     * })
    **/
    count<T extends BankConfigurationCountArgs>(
      args?: Subset<T, BankConfigurationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BankConfigurationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BankConfiguration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankConfigurationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BankConfigurationAggregateArgs>(args: Subset<T, BankConfigurationAggregateArgs>): Prisma.PrismaPromise<GetBankConfigurationAggregateType<T>>

    /**
     * Group by BankConfiguration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankConfigurationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BankConfigurationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BankConfigurationGroupByArgs['orderBy'] }
        : { orderBy?: BankConfigurationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BankConfigurationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBankConfigurationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BankConfiguration model
   */
  readonly fields: BankConfigurationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BankConfiguration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BankConfigurationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BankConfiguration model
   */ 
  interface BankConfigurationFieldRefs {
    readonly id: FieldRef<"BankConfiguration", 'String'>
    readonly bankCode: FieldRef<"BankConfiguration", 'String'>
    readonly bankName: FieldRef<"BankConfiguration", 'String'>
    readonly accountNumber: FieldRef<"BankConfiguration", 'String'>
    readonly accountType: FieldRef<"BankConfiguration", 'String'>
    readonly accountHolderName: FieldRef<"BankConfiguration", 'String'>
    readonly cci: FieldRef<"BankConfiguration", 'String'>
    readonly isActive: FieldRef<"BankConfiguration", 'Boolean'>
    readonly minDeposit: FieldRef<"BankConfiguration", 'Decimal'>
    readonly maxDeposit: FieldRef<"BankConfiguration", 'Decimal'>
    readonly depositCommission: FieldRef<"BankConfiguration", 'Decimal'>
    readonly instructions: FieldRef<"BankConfiguration", 'String'>
    readonly createdAt: FieldRef<"BankConfiguration", 'DateTime'>
    readonly updatedAt: FieldRef<"BankConfiguration", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BankConfiguration findUnique
   */
  export type BankConfigurationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankConfiguration
     */
    select?: BankConfigurationSelect<ExtArgs> | null
    /**
     * Filter, which BankConfiguration to fetch.
     */
    where: BankConfigurationWhereUniqueInput
  }

  /**
   * BankConfiguration findUniqueOrThrow
   */
  export type BankConfigurationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankConfiguration
     */
    select?: BankConfigurationSelect<ExtArgs> | null
    /**
     * Filter, which BankConfiguration to fetch.
     */
    where: BankConfigurationWhereUniqueInput
  }

  /**
   * BankConfiguration findFirst
   */
  export type BankConfigurationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankConfiguration
     */
    select?: BankConfigurationSelect<ExtArgs> | null
    /**
     * Filter, which BankConfiguration to fetch.
     */
    where?: BankConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BankConfigurations to fetch.
     */
    orderBy?: BankConfigurationOrderByWithRelationInput | BankConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BankConfigurations.
     */
    cursor?: BankConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BankConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BankConfigurations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BankConfigurations.
     */
    distinct?: BankConfigurationScalarFieldEnum | BankConfigurationScalarFieldEnum[]
  }

  /**
   * BankConfiguration findFirstOrThrow
   */
  export type BankConfigurationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankConfiguration
     */
    select?: BankConfigurationSelect<ExtArgs> | null
    /**
     * Filter, which BankConfiguration to fetch.
     */
    where?: BankConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BankConfigurations to fetch.
     */
    orderBy?: BankConfigurationOrderByWithRelationInput | BankConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BankConfigurations.
     */
    cursor?: BankConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BankConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BankConfigurations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BankConfigurations.
     */
    distinct?: BankConfigurationScalarFieldEnum | BankConfigurationScalarFieldEnum[]
  }

  /**
   * BankConfiguration findMany
   */
  export type BankConfigurationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankConfiguration
     */
    select?: BankConfigurationSelect<ExtArgs> | null
    /**
     * Filter, which BankConfigurations to fetch.
     */
    where?: BankConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BankConfigurations to fetch.
     */
    orderBy?: BankConfigurationOrderByWithRelationInput | BankConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BankConfigurations.
     */
    cursor?: BankConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BankConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BankConfigurations.
     */
    skip?: number
    distinct?: BankConfigurationScalarFieldEnum | BankConfigurationScalarFieldEnum[]
  }

  /**
   * BankConfiguration create
   */
  export type BankConfigurationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankConfiguration
     */
    select?: BankConfigurationSelect<ExtArgs> | null
    /**
     * The data needed to create a BankConfiguration.
     */
    data: XOR<BankConfigurationCreateInput, BankConfigurationUncheckedCreateInput>
  }

  /**
   * BankConfiguration createMany
   */
  export type BankConfigurationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BankConfigurations.
     */
    data: BankConfigurationCreateManyInput | BankConfigurationCreateManyInput[]
  }

  /**
   * BankConfiguration createManyAndReturn
   */
  export type BankConfigurationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankConfiguration
     */
    select?: BankConfigurationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BankConfigurations.
     */
    data: BankConfigurationCreateManyInput | BankConfigurationCreateManyInput[]
  }

  /**
   * BankConfiguration update
   */
  export type BankConfigurationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankConfiguration
     */
    select?: BankConfigurationSelect<ExtArgs> | null
    /**
     * The data needed to update a BankConfiguration.
     */
    data: XOR<BankConfigurationUpdateInput, BankConfigurationUncheckedUpdateInput>
    /**
     * Choose, which BankConfiguration to update.
     */
    where: BankConfigurationWhereUniqueInput
  }

  /**
   * BankConfiguration updateMany
   */
  export type BankConfigurationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BankConfigurations.
     */
    data: XOR<BankConfigurationUpdateManyMutationInput, BankConfigurationUncheckedUpdateManyInput>
    /**
     * Filter which BankConfigurations to update
     */
    where?: BankConfigurationWhereInput
  }

  /**
   * BankConfiguration upsert
   */
  export type BankConfigurationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankConfiguration
     */
    select?: BankConfigurationSelect<ExtArgs> | null
    /**
     * The filter to search for the BankConfiguration to update in case it exists.
     */
    where: BankConfigurationWhereUniqueInput
    /**
     * In case the BankConfiguration found by the `where` argument doesn't exist, create a new BankConfiguration with this data.
     */
    create: XOR<BankConfigurationCreateInput, BankConfigurationUncheckedCreateInput>
    /**
     * In case the BankConfiguration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BankConfigurationUpdateInput, BankConfigurationUncheckedUpdateInput>
  }

  /**
   * BankConfiguration delete
   */
  export type BankConfigurationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankConfiguration
     */
    select?: BankConfigurationSelect<ExtArgs> | null
    /**
     * Filter which BankConfiguration to delete.
     */
    where: BankConfigurationWhereUniqueInput
  }

  /**
   * BankConfiguration deleteMany
   */
  export type BankConfigurationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BankConfigurations to delete
     */
    where?: BankConfigurationWhereInput
  }

  /**
   * BankConfiguration without action
   */
  export type BankConfigurationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankConfiguration
     */
    select?: BankConfigurationSelect<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    adminId: string | null
    action: string | null
    entity: string | null
    entityId: string | null
    oldValue: string | null
    newValue: string | null
    description: string | null
    ipAddress: string | null
    userAgent: string | null
    sessionId: string | null
    createdAt: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    adminId: string | null
    action: string | null
    entity: string | null
    entityId: string | null
    oldValue: string | null
    newValue: string | null
    description: string | null
    ipAddress: string | null
    userAgent: string | null
    sessionId: string | null
    createdAt: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    userId: number
    adminId: number
    action: number
    entity: number
    entityId: number
    oldValue: number
    newValue: number
    description: number
    ipAddress: number
    userAgent: number
    sessionId: number
    createdAt: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    userId?: true
    adminId?: true
    action?: true
    entity?: true
    entityId?: true
    oldValue?: true
    newValue?: true
    description?: true
    ipAddress?: true
    userAgent?: true
    sessionId?: true
    createdAt?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    userId?: true
    adminId?: true
    action?: true
    entity?: true
    entityId?: true
    oldValue?: true
    newValue?: true
    description?: true
    ipAddress?: true
    userAgent?: true
    sessionId?: true
    createdAt?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    userId?: true
    adminId?: true
    action?: true
    entity?: true
    entityId?: true
    oldValue?: true
    newValue?: true
    description?: true
    ipAddress?: true
    userAgent?: true
    sessionId?: true
    createdAt?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    userId: string | null
    adminId: string | null
    action: string
    entity: string
    entityId: string
    oldValue: string | null
    newValue: string | null
    description: string
    ipAddress: string | null
    userAgent: string | null
    sessionId: string | null
    createdAt: Date
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    adminId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    oldValue?: boolean
    newValue?: boolean
    description?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    sessionId?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    adminId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    oldValue?: boolean
    newValue?: boolean
    description?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    sessionId?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    userId?: boolean
    adminId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    oldValue?: boolean
    newValue?: boolean
    description?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    sessionId?: boolean
    createdAt?: boolean
  }


  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      adminId: string | null
      action: string
      entity: string
      entityId: string
      oldValue: string | null
      newValue: string | null
      description: string
      ipAddress: string | null
      userAgent: string | null
      sessionId: string | null
      createdAt: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */ 
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly userId: FieldRef<"AuditLog", 'String'>
    readonly adminId: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly entity: FieldRef<"AuditLog", 'String'>
    readonly entityId: FieldRef<"AuditLog", 'String'>
    readonly oldValue: FieldRef<"AuditLog", 'String'>
    readonly newValue: FieldRef<"AuditLog", 'String'>
    readonly description: FieldRef<"AuditLog", 'String'>
    readonly ipAddress: FieldRef<"AuditLog", 'String'>
    readonly userAgent: FieldRef<"AuditLog", 'String'>
    readonly sessionId: FieldRef<"AuditLog", 'String'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
  }


  /**
   * Model PaymentConfiguration
   */

  export type AggregatePaymentConfiguration = {
    _count: PaymentConfigurationCountAggregateOutputType | null
    _avg: PaymentConfigurationAvgAggregateOutputType | null
    _sum: PaymentConfigurationSumAggregateOutputType | null
    _min: PaymentConfigurationMinAggregateOutputType | null
    _max: PaymentConfigurationMaxAggregateOutputType | null
  }

  export type PaymentConfigurationAvgAggregateOutputType = {
    p2pTransferCommission: Decimal | null
    defaultDailyLimit: Decimal | null
    defaultMonthlyLimit: Decimal | null
    depositExpirationHours: number | null
    referenceExpirationHours: number | null
  }

  export type PaymentConfigurationSumAggregateOutputType = {
    p2pTransferCommission: Decimal | null
    defaultDailyLimit: Decimal | null
    defaultMonthlyLimit: Decimal | null
    depositExpirationHours: number | null
    referenceExpirationHours: number | null
  }

  export type PaymentConfigurationMinAggregateOutputType = {
    id: string | null
    p2pTransferEnabled: boolean | null
    p2pTransferCommission: Decimal | null
    defaultDailyLimit: Decimal | null
    defaultMonthlyLimit: Decimal | null
    depositExpirationHours: number | null
    referenceExpirationHours: number | null
    depositsEnabled: boolean | null
    withdrawalsEnabled: boolean | null
    transfersEnabled: boolean | null
    maintenanceMessage: string | null
    announcementMessage: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentConfigurationMaxAggregateOutputType = {
    id: string | null
    p2pTransferEnabled: boolean | null
    p2pTransferCommission: Decimal | null
    defaultDailyLimit: Decimal | null
    defaultMonthlyLimit: Decimal | null
    depositExpirationHours: number | null
    referenceExpirationHours: number | null
    depositsEnabled: boolean | null
    withdrawalsEnabled: boolean | null
    transfersEnabled: boolean | null
    maintenanceMessage: string | null
    announcementMessage: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentConfigurationCountAggregateOutputType = {
    id: number
    p2pTransferEnabled: number
    p2pTransferCommission: number
    defaultDailyLimit: number
    defaultMonthlyLimit: number
    depositExpirationHours: number
    referenceExpirationHours: number
    depositsEnabled: number
    withdrawalsEnabled: number
    transfersEnabled: number
    maintenanceMessage: number
    announcementMessage: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PaymentConfigurationAvgAggregateInputType = {
    p2pTransferCommission?: true
    defaultDailyLimit?: true
    defaultMonthlyLimit?: true
    depositExpirationHours?: true
    referenceExpirationHours?: true
  }

  export type PaymentConfigurationSumAggregateInputType = {
    p2pTransferCommission?: true
    defaultDailyLimit?: true
    defaultMonthlyLimit?: true
    depositExpirationHours?: true
    referenceExpirationHours?: true
  }

  export type PaymentConfigurationMinAggregateInputType = {
    id?: true
    p2pTransferEnabled?: true
    p2pTransferCommission?: true
    defaultDailyLimit?: true
    defaultMonthlyLimit?: true
    depositExpirationHours?: true
    referenceExpirationHours?: true
    depositsEnabled?: true
    withdrawalsEnabled?: true
    transfersEnabled?: true
    maintenanceMessage?: true
    announcementMessage?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentConfigurationMaxAggregateInputType = {
    id?: true
    p2pTransferEnabled?: true
    p2pTransferCommission?: true
    defaultDailyLimit?: true
    defaultMonthlyLimit?: true
    depositExpirationHours?: true
    referenceExpirationHours?: true
    depositsEnabled?: true
    withdrawalsEnabled?: true
    transfersEnabled?: true
    maintenanceMessage?: true
    announcementMessage?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentConfigurationCountAggregateInputType = {
    id?: true
    p2pTransferEnabled?: true
    p2pTransferCommission?: true
    defaultDailyLimit?: true
    defaultMonthlyLimit?: true
    depositExpirationHours?: true
    referenceExpirationHours?: true
    depositsEnabled?: true
    withdrawalsEnabled?: true
    transfersEnabled?: true
    maintenanceMessage?: true
    announcementMessage?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PaymentConfigurationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentConfiguration to aggregate.
     */
    where?: PaymentConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentConfigurations to fetch.
     */
    orderBy?: PaymentConfigurationOrderByWithRelationInput | PaymentConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentConfigurations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaymentConfigurations
    **/
    _count?: true | PaymentConfigurationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentConfigurationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentConfigurationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentConfigurationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentConfigurationMaxAggregateInputType
  }

  export type GetPaymentConfigurationAggregateType<T extends PaymentConfigurationAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentConfiguration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentConfiguration[P]>
      : GetScalarType<T[P], AggregatePaymentConfiguration[P]>
  }




  export type PaymentConfigurationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentConfigurationWhereInput
    orderBy?: PaymentConfigurationOrderByWithAggregationInput | PaymentConfigurationOrderByWithAggregationInput[]
    by: PaymentConfigurationScalarFieldEnum[] | PaymentConfigurationScalarFieldEnum
    having?: PaymentConfigurationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentConfigurationCountAggregateInputType | true
    _avg?: PaymentConfigurationAvgAggregateInputType
    _sum?: PaymentConfigurationSumAggregateInputType
    _min?: PaymentConfigurationMinAggregateInputType
    _max?: PaymentConfigurationMaxAggregateInputType
  }

  export type PaymentConfigurationGroupByOutputType = {
    id: string
    p2pTransferEnabled: boolean
    p2pTransferCommission: Decimal
    defaultDailyLimit: Decimal
    defaultMonthlyLimit: Decimal
    depositExpirationHours: number
    referenceExpirationHours: number
    depositsEnabled: boolean
    withdrawalsEnabled: boolean
    transfersEnabled: boolean
    maintenanceMessage: string | null
    announcementMessage: string | null
    createdAt: Date
    updatedAt: Date
    _count: PaymentConfigurationCountAggregateOutputType | null
    _avg: PaymentConfigurationAvgAggregateOutputType | null
    _sum: PaymentConfigurationSumAggregateOutputType | null
    _min: PaymentConfigurationMinAggregateOutputType | null
    _max: PaymentConfigurationMaxAggregateOutputType | null
  }

  type GetPaymentConfigurationGroupByPayload<T extends PaymentConfigurationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentConfigurationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentConfigurationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentConfigurationGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentConfigurationGroupByOutputType[P]>
        }
      >
    >


  export type PaymentConfigurationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    p2pTransferEnabled?: boolean
    p2pTransferCommission?: boolean
    defaultDailyLimit?: boolean
    defaultMonthlyLimit?: boolean
    depositExpirationHours?: boolean
    referenceExpirationHours?: boolean
    depositsEnabled?: boolean
    withdrawalsEnabled?: boolean
    transfersEnabled?: boolean
    maintenanceMessage?: boolean
    announcementMessage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["paymentConfiguration"]>

  export type PaymentConfigurationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    p2pTransferEnabled?: boolean
    p2pTransferCommission?: boolean
    defaultDailyLimit?: boolean
    defaultMonthlyLimit?: boolean
    depositExpirationHours?: boolean
    referenceExpirationHours?: boolean
    depositsEnabled?: boolean
    withdrawalsEnabled?: boolean
    transfersEnabled?: boolean
    maintenanceMessage?: boolean
    announcementMessage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["paymentConfiguration"]>

  export type PaymentConfigurationSelectScalar = {
    id?: boolean
    p2pTransferEnabled?: boolean
    p2pTransferCommission?: boolean
    defaultDailyLimit?: boolean
    defaultMonthlyLimit?: boolean
    depositExpirationHours?: boolean
    referenceExpirationHours?: boolean
    depositsEnabled?: boolean
    withdrawalsEnabled?: boolean
    transfersEnabled?: boolean
    maintenanceMessage?: boolean
    announcementMessage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $PaymentConfigurationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaymentConfiguration"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      p2pTransferEnabled: boolean
      p2pTransferCommission: Prisma.Decimal
      defaultDailyLimit: Prisma.Decimal
      defaultMonthlyLimit: Prisma.Decimal
      depositExpirationHours: number
      referenceExpirationHours: number
      depositsEnabled: boolean
      withdrawalsEnabled: boolean
      transfersEnabled: boolean
      maintenanceMessage: string | null
      announcementMessage: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["paymentConfiguration"]>
    composites: {}
  }

  type PaymentConfigurationGetPayload<S extends boolean | null | undefined | PaymentConfigurationDefaultArgs> = $Result.GetResult<Prisma.$PaymentConfigurationPayload, S>

  type PaymentConfigurationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaymentConfigurationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaymentConfigurationCountAggregateInputType | true
    }

  export interface PaymentConfigurationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentConfiguration'], meta: { name: 'PaymentConfiguration' } }
    /**
     * Find zero or one PaymentConfiguration that matches the filter.
     * @param {PaymentConfigurationFindUniqueArgs} args - Arguments to find a PaymentConfiguration
     * @example
     * // Get one PaymentConfiguration
     * const paymentConfiguration = await prisma.paymentConfiguration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentConfigurationFindUniqueArgs>(args: SelectSubset<T, PaymentConfigurationFindUniqueArgs<ExtArgs>>): Prisma__PaymentConfigurationClient<$Result.GetResult<Prisma.$PaymentConfigurationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PaymentConfiguration that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PaymentConfigurationFindUniqueOrThrowArgs} args - Arguments to find a PaymentConfiguration
     * @example
     * // Get one PaymentConfiguration
     * const paymentConfiguration = await prisma.paymentConfiguration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentConfigurationFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentConfigurationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentConfigurationClient<$Result.GetResult<Prisma.$PaymentConfigurationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PaymentConfiguration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentConfigurationFindFirstArgs} args - Arguments to find a PaymentConfiguration
     * @example
     * // Get one PaymentConfiguration
     * const paymentConfiguration = await prisma.paymentConfiguration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentConfigurationFindFirstArgs>(args?: SelectSubset<T, PaymentConfigurationFindFirstArgs<ExtArgs>>): Prisma__PaymentConfigurationClient<$Result.GetResult<Prisma.$PaymentConfigurationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PaymentConfiguration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentConfigurationFindFirstOrThrowArgs} args - Arguments to find a PaymentConfiguration
     * @example
     * // Get one PaymentConfiguration
     * const paymentConfiguration = await prisma.paymentConfiguration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentConfigurationFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentConfigurationFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentConfigurationClient<$Result.GetResult<Prisma.$PaymentConfigurationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PaymentConfigurations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentConfigurationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaymentConfigurations
     * const paymentConfigurations = await prisma.paymentConfiguration.findMany()
     * 
     * // Get first 10 PaymentConfigurations
     * const paymentConfigurations = await prisma.paymentConfiguration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentConfigurationWithIdOnly = await prisma.paymentConfiguration.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentConfigurationFindManyArgs>(args?: SelectSubset<T, PaymentConfigurationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentConfigurationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PaymentConfiguration.
     * @param {PaymentConfigurationCreateArgs} args - Arguments to create a PaymentConfiguration.
     * @example
     * // Create one PaymentConfiguration
     * const PaymentConfiguration = await prisma.paymentConfiguration.create({
     *   data: {
     *     // ... data to create a PaymentConfiguration
     *   }
     * })
     * 
     */
    create<T extends PaymentConfigurationCreateArgs>(args: SelectSubset<T, PaymentConfigurationCreateArgs<ExtArgs>>): Prisma__PaymentConfigurationClient<$Result.GetResult<Prisma.$PaymentConfigurationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PaymentConfigurations.
     * @param {PaymentConfigurationCreateManyArgs} args - Arguments to create many PaymentConfigurations.
     * @example
     * // Create many PaymentConfigurations
     * const paymentConfiguration = await prisma.paymentConfiguration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentConfigurationCreateManyArgs>(args?: SelectSubset<T, PaymentConfigurationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PaymentConfigurations and returns the data saved in the database.
     * @param {PaymentConfigurationCreateManyAndReturnArgs} args - Arguments to create many PaymentConfigurations.
     * @example
     * // Create many PaymentConfigurations
     * const paymentConfiguration = await prisma.paymentConfiguration.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PaymentConfigurations and only return the `id`
     * const paymentConfigurationWithIdOnly = await prisma.paymentConfiguration.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentConfigurationCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentConfigurationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentConfigurationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PaymentConfiguration.
     * @param {PaymentConfigurationDeleteArgs} args - Arguments to delete one PaymentConfiguration.
     * @example
     * // Delete one PaymentConfiguration
     * const PaymentConfiguration = await prisma.paymentConfiguration.delete({
     *   where: {
     *     // ... filter to delete one PaymentConfiguration
     *   }
     * })
     * 
     */
    delete<T extends PaymentConfigurationDeleteArgs>(args: SelectSubset<T, PaymentConfigurationDeleteArgs<ExtArgs>>): Prisma__PaymentConfigurationClient<$Result.GetResult<Prisma.$PaymentConfigurationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PaymentConfiguration.
     * @param {PaymentConfigurationUpdateArgs} args - Arguments to update one PaymentConfiguration.
     * @example
     * // Update one PaymentConfiguration
     * const paymentConfiguration = await prisma.paymentConfiguration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentConfigurationUpdateArgs>(args: SelectSubset<T, PaymentConfigurationUpdateArgs<ExtArgs>>): Prisma__PaymentConfigurationClient<$Result.GetResult<Prisma.$PaymentConfigurationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PaymentConfigurations.
     * @param {PaymentConfigurationDeleteManyArgs} args - Arguments to filter PaymentConfigurations to delete.
     * @example
     * // Delete a few PaymentConfigurations
     * const { count } = await prisma.paymentConfiguration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentConfigurationDeleteManyArgs>(args?: SelectSubset<T, PaymentConfigurationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentConfigurations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentConfigurationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaymentConfigurations
     * const paymentConfiguration = await prisma.paymentConfiguration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentConfigurationUpdateManyArgs>(args: SelectSubset<T, PaymentConfigurationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PaymentConfiguration.
     * @param {PaymentConfigurationUpsertArgs} args - Arguments to update or create a PaymentConfiguration.
     * @example
     * // Update or create a PaymentConfiguration
     * const paymentConfiguration = await prisma.paymentConfiguration.upsert({
     *   create: {
     *     // ... data to create a PaymentConfiguration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaymentConfiguration we want to update
     *   }
     * })
     */
    upsert<T extends PaymentConfigurationUpsertArgs>(args: SelectSubset<T, PaymentConfigurationUpsertArgs<ExtArgs>>): Prisma__PaymentConfigurationClient<$Result.GetResult<Prisma.$PaymentConfigurationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PaymentConfigurations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentConfigurationCountArgs} args - Arguments to filter PaymentConfigurations to count.
     * @example
     * // Count the number of PaymentConfigurations
     * const count = await prisma.paymentConfiguration.count({
     *   where: {
     *     // ... the filter for the PaymentConfigurations we want to count
     *   }
     * })
    **/
    count<T extends PaymentConfigurationCountArgs>(
      args?: Subset<T, PaymentConfigurationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentConfigurationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaymentConfiguration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentConfigurationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentConfigurationAggregateArgs>(args: Subset<T, PaymentConfigurationAggregateArgs>): Prisma.PrismaPromise<GetPaymentConfigurationAggregateType<T>>

    /**
     * Group by PaymentConfiguration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentConfigurationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentConfigurationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentConfigurationGroupByArgs['orderBy'] }
        : { orderBy?: PaymentConfigurationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentConfigurationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentConfigurationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaymentConfiguration model
   */
  readonly fields: PaymentConfigurationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaymentConfiguration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentConfigurationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PaymentConfiguration model
   */ 
  interface PaymentConfigurationFieldRefs {
    readonly id: FieldRef<"PaymentConfiguration", 'String'>
    readonly p2pTransferEnabled: FieldRef<"PaymentConfiguration", 'Boolean'>
    readonly p2pTransferCommission: FieldRef<"PaymentConfiguration", 'Decimal'>
    readonly defaultDailyLimit: FieldRef<"PaymentConfiguration", 'Decimal'>
    readonly defaultMonthlyLimit: FieldRef<"PaymentConfiguration", 'Decimal'>
    readonly depositExpirationHours: FieldRef<"PaymentConfiguration", 'Int'>
    readonly referenceExpirationHours: FieldRef<"PaymentConfiguration", 'Int'>
    readonly depositsEnabled: FieldRef<"PaymentConfiguration", 'Boolean'>
    readonly withdrawalsEnabled: FieldRef<"PaymentConfiguration", 'Boolean'>
    readonly transfersEnabled: FieldRef<"PaymentConfiguration", 'Boolean'>
    readonly maintenanceMessage: FieldRef<"PaymentConfiguration", 'String'>
    readonly announcementMessage: FieldRef<"PaymentConfiguration", 'String'>
    readonly createdAt: FieldRef<"PaymentConfiguration", 'DateTime'>
    readonly updatedAt: FieldRef<"PaymentConfiguration", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PaymentConfiguration findUnique
   */
  export type PaymentConfigurationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentConfiguration
     */
    select?: PaymentConfigurationSelect<ExtArgs> | null
    /**
     * Filter, which PaymentConfiguration to fetch.
     */
    where: PaymentConfigurationWhereUniqueInput
  }

  /**
   * PaymentConfiguration findUniqueOrThrow
   */
  export type PaymentConfigurationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentConfiguration
     */
    select?: PaymentConfigurationSelect<ExtArgs> | null
    /**
     * Filter, which PaymentConfiguration to fetch.
     */
    where: PaymentConfigurationWhereUniqueInput
  }

  /**
   * PaymentConfiguration findFirst
   */
  export type PaymentConfigurationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentConfiguration
     */
    select?: PaymentConfigurationSelect<ExtArgs> | null
    /**
     * Filter, which PaymentConfiguration to fetch.
     */
    where?: PaymentConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentConfigurations to fetch.
     */
    orderBy?: PaymentConfigurationOrderByWithRelationInput | PaymentConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentConfigurations.
     */
    cursor?: PaymentConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentConfigurations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentConfigurations.
     */
    distinct?: PaymentConfigurationScalarFieldEnum | PaymentConfigurationScalarFieldEnum[]
  }

  /**
   * PaymentConfiguration findFirstOrThrow
   */
  export type PaymentConfigurationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentConfiguration
     */
    select?: PaymentConfigurationSelect<ExtArgs> | null
    /**
     * Filter, which PaymentConfiguration to fetch.
     */
    where?: PaymentConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentConfigurations to fetch.
     */
    orderBy?: PaymentConfigurationOrderByWithRelationInput | PaymentConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentConfigurations.
     */
    cursor?: PaymentConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentConfigurations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentConfigurations.
     */
    distinct?: PaymentConfigurationScalarFieldEnum | PaymentConfigurationScalarFieldEnum[]
  }

  /**
   * PaymentConfiguration findMany
   */
  export type PaymentConfigurationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentConfiguration
     */
    select?: PaymentConfigurationSelect<ExtArgs> | null
    /**
     * Filter, which PaymentConfigurations to fetch.
     */
    where?: PaymentConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentConfigurations to fetch.
     */
    orderBy?: PaymentConfigurationOrderByWithRelationInput | PaymentConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaymentConfigurations.
     */
    cursor?: PaymentConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentConfigurations.
     */
    skip?: number
    distinct?: PaymentConfigurationScalarFieldEnum | PaymentConfigurationScalarFieldEnum[]
  }

  /**
   * PaymentConfiguration create
   */
  export type PaymentConfigurationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentConfiguration
     */
    select?: PaymentConfigurationSelect<ExtArgs> | null
    /**
     * The data needed to create a PaymentConfiguration.
     */
    data: XOR<PaymentConfigurationCreateInput, PaymentConfigurationUncheckedCreateInput>
  }

  /**
   * PaymentConfiguration createMany
   */
  export type PaymentConfigurationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaymentConfigurations.
     */
    data: PaymentConfigurationCreateManyInput | PaymentConfigurationCreateManyInput[]
  }

  /**
   * PaymentConfiguration createManyAndReturn
   */
  export type PaymentConfigurationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentConfiguration
     */
    select?: PaymentConfigurationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PaymentConfigurations.
     */
    data: PaymentConfigurationCreateManyInput | PaymentConfigurationCreateManyInput[]
  }

  /**
   * PaymentConfiguration update
   */
  export type PaymentConfigurationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentConfiguration
     */
    select?: PaymentConfigurationSelect<ExtArgs> | null
    /**
     * The data needed to update a PaymentConfiguration.
     */
    data: XOR<PaymentConfigurationUpdateInput, PaymentConfigurationUncheckedUpdateInput>
    /**
     * Choose, which PaymentConfiguration to update.
     */
    where: PaymentConfigurationWhereUniqueInput
  }

  /**
   * PaymentConfiguration updateMany
   */
  export type PaymentConfigurationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaymentConfigurations.
     */
    data: XOR<PaymentConfigurationUpdateManyMutationInput, PaymentConfigurationUncheckedUpdateManyInput>
    /**
     * Filter which PaymentConfigurations to update
     */
    where?: PaymentConfigurationWhereInput
  }

  /**
   * PaymentConfiguration upsert
   */
  export type PaymentConfigurationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentConfiguration
     */
    select?: PaymentConfigurationSelect<ExtArgs> | null
    /**
     * The filter to search for the PaymentConfiguration to update in case it exists.
     */
    where: PaymentConfigurationWhereUniqueInput
    /**
     * In case the PaymentConfiguration found by the `where` argument doesn't exist, create a new PaymentConfiguration with this data.
     */
    create: XOR<PaymentConfigurationCreateInput, PaymentConfigurationUncheckedCreateInput>
    /**
     * In case the PaymentConfiguration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentConfigurationUpdateInput, PaymentConfigurationUncheckedUpdateInput>
  }

  /**
   * PaymentConfiguration delete
   */
  export type PaymentConfigurationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentConfiguration
     */
    select?: PaymentConfigurationSelect<ExtArgs> | null
    /**
     * Filter which PaymentConfiguration to delete.
     */
    where: PaymentConfigurationWhereUniqueInput
  }

  /**
   * PaymentConfiguration deleteMany
   */
  export type PaymentConfigurationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentConfigurations to delete
     */
    where?: PaymentConfigurationWhereInput
  }

  /**
   * PaymentConfiguration without action
   */
  export type PaymentConfigurationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentConfiguration
     */
    select?: PaymentConfigurationSelect<ExtArgs> | null
  }


  /**
   * Model OpenpayCustomer
   */

  export type AggregateOpenpayCustomer = {
    _count: OpenpayCustomerCountAggregateOutputType | null
    _min: OpenpayCustomerMinAggregateOutputType | null
    _max: OpenpayCustomerMaxAggregateOutputType | null
  }

  export type OpenpayCustomerMinAggregateOutputType = {
    id: string | null
    userId: string | null
    openpayCustomerId: string | null
    email: string | null
    name: string | null
    phone: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OpenpayCustomerMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    openpayCustomerId: string | null
    email: string | null
    name: string | null
    phone: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OpenpayCustomerCountAggregateOutputType = {
    id: number
    userId: number
    openpayCustomerId: number
    email: number
    name: number
    phone: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OpenpayCustomerMinAggregateInputType = {
    id?: true
    userId?: true
    openpayCustomerId?: true
    email?: true
    name?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OpenpayCustomerMaxAggregateInputType = {
    id?: true
    userId?: true
    openpayCustomerId?: true
    email?: true
    name?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OpenpayCustomerCountAggregateInputType = {
    id?: true
    userId?: true
    openpayCustomerId?: true
    email?: true
    name?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OpenpayCustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OpenpayCustomer to aggregate.
     */
    where?: OpenpayCustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpenpayCustomers to fetch.
     */
    orderBy?: OpenpayCustomerOrderByWithRelationInput | OpenpayCustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OpenpayCustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpenpayCustomers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpenpayCustomers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OpenpayCustomers
    **/
    _count?: true | OpenpayCustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OpenpayCustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OpenpayCustomerMaxAggregateInputType
  }

  export type GetOpenpayCustomerAggregateType<T extends OpenpayCustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateOpenpayCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOpenpayCustomer[P]>
      : GetScalarType<T[P], AggregateOpenpayCustomer[P]>
  }




  export type OpenpayCustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OpenpayCustomerWhereInput
    orderBy?: OpenpayCustomerOrderByWithAggregationInput | OpenpayCustomerOrderByWithAggregationInput[]
    by: OpenpayCustomerScalarFieldEnum[] | OpenpayCustomerScalarFieldEnum
    having?: OpenpayCustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OpenpayCustomerCountAggregateInputType | true
    _min?: OpenpayCustomerMinAggregateInputType
    _max?: OpenpayCustomerMaxAggregateInputType
  }

  export type OpenpayCustomerGroupByOutputType = {
    id: string
    userId: string
    openpayCustomerId: string
    email: string
    name: string
    phone: string | null
    createdAt: Date
    updatedAt: Date
    _count: OpenpayCustomerCountAggregateOutputType | null
    _min: OpenpayCustomerMinAggregateOutputType | null
    _max: OpenpayCustomerMaxAggregateOutputType | null
  }

  type GetOpenpayCustomerGroupByPayload<T extends OpenpayCustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OpenpayCustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OpenpayCustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OpenpayCustomerGroupByOutputType[P]>
            : GetScalarType<T[P], OpenpayCustomerGroupByOutputType[P]>
        }
      >
    >


  export type OpenpayCustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    openpayCustomerId?: boolean
    email?: boolean
    name?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    paymentMethods?: boolean | OpenpayCustomer$paymentMethodsArgs<ExtArgs>
    transactions?: boolean | OpenpayCustomer$transactionsArgs<ExtArgs>
    _count?: boolean | OpenpayCustomerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["openpayCustomer"]>

  export type OpenpayCustomerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    openpayCustomerId?: boolean
    email?: boolean
    name?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["openpayCustomer"]>

  export type OpenpayCustomerSelectScalar = {
    id?: boolean
    userId?: boolean
    openpayCustomerId?: boolean
    email?: boolean
    name?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OpenpayCustomerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    paymentMethods?: boolean | OpenpayCustomer$paymentMethodsArgs<ExtArgs>
    transactions?: boolean | OpenpayCustomer$transactionsArgs<ExtArgs>
    _count?: boolean | OpenpayCustomerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OpenpayCustomerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $OpenpayCustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OpenpayCustomer"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      paymentMethods: Prisma.$OpenpayPaymentMethodPayload<ExtArgs>[]
      transactions: Prisma.$OpenpayTransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      openpayCustomerId: string
      email: string
      name: string
      phone: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["openpayCustomer"]>
    composites: {}
  }

  type OpenpayCustomerGetPayload<S extends boolean | null | undefined | OpenpayCustomerDefaultArgs> = $Result.GetResult<Prisma.$OpenpayCustomerPayload, S>

  type OpenpayCustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OpenpayCustomerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OpenpayCustomerCountAggregateInputType | true
    }

  export interface OpenpayCustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OpenpayCustomer'], meta: { name: 'OpenpayCustomer' } }
    /**
     * Find zero or one OpenpayCustomer that matches the filter.
     * @param {OpenpayCustomerFindUniqueArgs} args - Arguments to find a OpenpayCustomer
     * @example
     * // Get one OpenpayCustomer
     * const openpayCustomer = await prisma.openpayCustomer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OpenpayCustomerFindUniqueArgs>(args: SelectSubset<T, OpenpayCustomerFindUniqueArgs<ExtArgs>>): Prisma__OpenpayCustomerClient<$Result.GetResult<Prisma.$OpenpayCustomerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one OpenpayCustomer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OpenpayCustomerFindUniqueOrThrowArgs} args - Arguments to find a OpenpayCustomer
     * @example
     * // Get one OpenpayCustomer
     * const openpayCustomer = await prisma.openpayCustomer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OpenpayCustomerFindUniqueOrThrowArgs>(args: SelectSubset<T, OpenpayCustomerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OpenpayCustomerClient<$Result.GetResult<Prisma.$OpenpayCustomerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first OpenpayCustomer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenpayCustomerFindFirstArgs} args - Arguments to find a OpenpayCustomer
     * @example
     * // Get one OpenpayCustomer
     * const openpayCustomer = await prisma.openpayCustomer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OpenpayCustomerFindFirstArgs>(args?: SelectSubset<T, OpenpayCustomerFindFirstArgs<ExtArgs>>): Prisma__OpenpayCustomerClient<$Result.GetResult<Prisma.$OpenpayCustomerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first OpenpayCustomer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenpayCustomerFindFirstOrThrowArgs} args - Arguments to find a OpenpayCustomer
     * @example
     * // Get one OpenpayCustomer
     * const openpayCustomer = await prisma.openpayCustomer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OpenpayCustomerFindFirstOrThrowArgs>(args?: SelectSubset<T, OpenpayCustomerFindFirstOrThrowArgs<ExtArgs>>): Prisma__OpenpayCustomerClient<$Result.GetResult<Prisma.$OpenpayCustomerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more OpenpayCustomers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenpayCustomerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OpenpayCustomers
     * const openpayCustomers = await prisma.openpayCustomer.findMany()
     * 
     * // Get first 10 OpenpayCustomers
     * const openpayCustomers = await prisma.openpayCustomer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const openpayCustomerWithIdOnly = await prisma.openpayCustomer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OpenpayCustomerFindManyArgs>(args?: SelectSubset<T, OpenpayCustomerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpenpayCustomerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a OpenpayCustomer.
     * @param {OpenpayCustomerCreateArgs} args - Arguments to create a OpenpayCustomer.
     * @example
     * // Create one OpenpayCustomer
     * const OpenpayCustomer = await prisma.openpayCustomer.create({
     *   data: {
     *     // ... data to create a OpenpayCustomer
     *   }
     * })
     * 
     */
    create<T extends OpenpayCustomerCreateArgs>(args: SelectSubset<T, OpenpayCustomerCreateArgs<ExtArgs>>): Prisma__OpenpayCustomerClient<$Result.GetResult<Prisma.$OpenpayCustomerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many OpenpayCustomers.
     * @param {OpenpayCustomerCreateManyArgs} args - Arguments to create many OpenpayCustomers.
     * @example
     * // Create many OpenpayCustomers
     * const openpayCustomer = await prisma.openpayCustomer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OpenpayCustomerCreateManyArgs>(args?: SelectSubset<T, OpenpayCustomerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OpenpayCustomers and returns the data saved in the database.
     * @param {OpenpayCustomerCreateManyAndReturnArgs} args - Arguments to create many OpenpayCustomers.
     * @example
     * // Create many OpenpayCustomers
     * const openpayCustomer = await prisma.openpayCustomer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OpenpayCustomers and only return the `id`
     * const openpayCustomerWithIdOnly = await prisma.openpayCustomer.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OpenpayCustomerCreateManyAndReturnArgs>(args?: SelectSubset<T, OpenpayCustomerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpenpayCustomerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a OpenpayCustomer.
     * @param {OpenpayCustomerDeleteArgs} args - Arguments to delete one OpenpayCustomer.
     * @example
     * // Delete one OpenpayCustomer
     * const OpenpayCustomer = await prisma.openpayCustomer.delete({
     *   where: {
     *     // ... filter to delete one OpenpayCustomer
     *   }
     * })
     * 
     */
    delete<T extends OpenpayCustomerDeleteArgs>(args: SelectSubset<T, OpenpayCustomerDeleteArgs<ExtArgs>>): Prisma__OpenpayCustomerClient<$Result.GetResult<Prisma.$OpenpayCustomerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one OpenpayCustomer.
     * @param {OpenpayCustomerUpdateArgs} args - Arguments to update one OpenpayCustomer.
     * @example
     * // Update one OpenpayCustomer
     * const openpayCustomer = await prisma.openpayCustomer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OpenpayCustomerUpdateArgs>(args: SelectSubset<T, OpenpayCustomerUpdateArgs<ExtArgs>>): Prisma__OpenpayCustomerClient<$Result.GetResult<Prisma.$OpenpayCustomerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more OpenpayCustomers.
     * @param {OpenpayCustomerDeleteManyArgs} args - Arguments to filter OpenpayCustomers to delete.
     * @example
     * // Delete a few OpenpayCustomers
     * const { count } = await prisma.openpayCustomer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OpenpayCustomerDeleteManyArgs>(args?: SelectSubset<T, OpenpayCustomerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OpenpayCustomers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenpayCustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OpenpayCustomers
     * const openpayCustomer = await prisma.openpayCustomer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OpenpayCustomerUpdateManyArgs>(args: SelectSubset<T, OpenpayCustomerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OpenpayCustomer.
     * @param {OpenpayCustomerUpsertArgs} args - Arguments to update or create a OpenpayCustomer.
     * @example
     * // Update or create a OpenpayCustomer
     * const openpayCustomer = await prisma.openpayCustomer.upsert({
     *   create: {
     *     // ... data to create a OpenpayCustomer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OpenpayCustomer we want to update
     *   }
     * })
     */
    upsert<T extends OpenpayCustomerUpsertArgs>(args: SelectSubset<T, OpenpayCustomerUpsertArgs<ExtArgs>>): Prisma__OpenpayCustomerClient<$Result.GetResult<Prisma.$OpenpayCustomerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of OpenpayCustomers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenpayCustomerCountArgs} args - Arguments to filter OpenpayCustomers to count.
     * @example
     * // Count the number of OpenpayCustomers
     * const count = await prisma.openpayCustomer.count({
     *   where: {
     *     // ... the filter for the OpenpayCustomers we want to count
     *   }
     * })
    **/
    count<T extends OpenpayCustomerCountArgs>(
      args?: Subset<T, OpenpayCustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OpenpayCustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OpenpayCustomer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenpayCustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OpenpayCustomerAggregateArgs>(args: Subset<T, OpenpayCustomerAggregateArgs>): Prisma.PrismaPromise<GetOpenpayCustomerAggregateType<T>>

    /**
     * Group by OpenpayCustomer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenpayCustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OpenpayCustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OpenpayCustomerGroupByArgs['orderBy'] }
        : { orderBy?: OpenpayCustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OpenpayCustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOpenpayCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OpenpayCustomer model
   */
  readonly fields: OpenpayCustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OpenpayCustomer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OpenpayCustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    paymentMethods<T extends OpenpayCustomer$paymentMethodsArgs<ExtArgs> = {}>(args?: Subset<T, OpenpayCustomer$paymentMethodsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpenpayPaymentMethodPayload<ExtArgs>, T, "findMany"> | Null>
    transactions<T extends OpenpayCustomer$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, OpenpayCustomer$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpenpayTransactionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OpenpayCustomer model
   */ 
  interface OpenpayCustomerFieldRefs {
    readonly id: FieldRef<"OpenpayCustomer", 'String'>
    readonly userId: FieldRef<"OpenpayCustomer", 'String'>
    readonly openpayCustomerId: FieldRef<"OpenpayCustomer", 'String'>
    readonly email: FieldRef<"OpenpayCustomer", 'String'>
    readonly name: FieldRef<"OpenpayCustomer", 'String'>
    readonly phone: FieldRef<"OpenpayCustomer", 'String'>
    readonly createdAt: FieldRef<"OpenpayCustomer", 'DateTime'>
    readonly updatedAt: FieldRef<"OpenpayCustomer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OpenpayCustomer findUnique
   */
  export type OpenpayCustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayCustomer
     */
    select?: OpenpayCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayCustomerInclude<ExtArgs> | null
    /**
     * Filter, which OpenpayCustomer to fetch.
     */
    where: OpenpayCustomerWhereUniqueInput
  }

  /**
   * OpenpayCustomer findUniqueOrThrow
   */
  export type OpenpayCustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayCustomer
     */
    select?: OpenpayCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayCustomerInclude<ExtArgs> | null
    /**
     * Filter, which OpenpayCustomer to fetch.
     */
    where: OpenpayCustomerWhereUniqueInput
  }

  /**
   * OpenpayCustomer findFirst
   */
  export type OpenpayCustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayCustomer
     */
    select?: OpenpayCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayCustomerInclude<ExtArgs> | null
    /**
     * Filter, which OpenpayCustomer to fetch.
     */
    where?: OpenpayCustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpenpayCustomers to fetch.
     */
    orderBy?: OpenpayCustomerOrderByWithRelationInput | OpenpayCustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OpenpayCustomers.
     */
    cursor?: OpenpayCustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpenpayCustomers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpenpayCustomers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OpenpayCustomers.
     */
    distinct?: OpenpayCustomerScalarFieldEnum | OpenpayCustomerScalarFieldEnum[]
  }

  /**
   * OpenpayCustomer findFirstOrThrow
   */
  export type OpenpayCustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayCustomer
     */
    select?: OpenpayCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayCustomerInclude<ExtArgs> | null
    /**
     * Filter, which OpenpayCustomer to fetch.
     */
    where?: OpenpayCustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpenpayCustomers to fetch.
     */
    orderBy?: OpenpayCustomerOrderByWithRelationInput | OpenpayCustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OpenpayCustomers.
     */
    cursor?: OpenpayCustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpenpayCustomers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpenpayCustomers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OpenpayCustomers.
     */
    distinct?: OpenpayCustomerScalarFieldEnum | OpenpayCustomerScalarFieldEnum[]
  }

  /**
   * OpenpayCustomer findMany
   */
  export type OpenpayCustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayCustomer
     */
    select?: OpenpayCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayCustomerInclude<ExtArgs> | null
    /**
     * Filter, which OpenpayCustomers to fetch.
     */
    where?: OpenpayCustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpenpayCustomers to fetch.
     */
    orderBy?: OpenpayCustomerOrderByWithRelationInput | OpenpayCustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OpenpayCustomers.
     */
    cursor?: OpenpayCustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpenpayCustomers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpenpayCustomers.
     */
    skip?: number
    distinct?: OpenpayCustomerScalarFieldEnum | OpenpayCustomerScalarFieldEnum[]
  }

  /**
   * OpenpayCustomer create
   */
  export type OpenpayCustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayCustomer
     */
    select?: OpenpayCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayCustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a OpenpayCustomer.
     */
    data: XOR<OpenpayCustomerCreateInput, OpenpayCustomerUncheckedCreateInput>
  }

  /**
   * OpenpayCustomer createMany
   */
  export type OpenpayCustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OpenpayCustomers.
     */
    data: OpenpayCustomerCreateManyInput | OpenpayCustomerCreateManyInput[]
  }

  /**
   * OpenpayCustomer createManyAndReturn
   */
  export type OpenpayCustomerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayCustomer
     */
    select?: OpenpayCustomerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many OpenpayCustomers.
     */
    data: OpenpayCustomerCreateManyInput | OpenpayCustomerCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayCustomerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OpenpayCustomer update
   */
  export type OpenpayCustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayCustomer
     */
    select?: OpenpayCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayCustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a OpenpayCustomer.
     */
    data: XOR<OpenpayCustomerUpdateInput, OpenpayCustomerUncheckedUpdateInput>
    /**
     * Choose, which OpenpayCustomer to update.
     */
    where: OpenpayCustomerWhereUniqueInput
  }

  /**
   * OpenpayCustomer updateMany
   */
  export type OpenpayCustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OpenpayCustomers.
     */
    data: XOR<OpenpayCustomerUpdateManyMutationInput, OpenpayCustomerUncheckedUpdateManyInput>
    /**
     * Filter which OpenpayCustomers to update
     */
    where?: OpenpayCustomerWhereInput
  }

  /**
   * OpenpayCustomer upsert
   */
  export type OpenpayCustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayCustomer
     */
    select?: OpenpayCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayCustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the OpenpayCustomer to update in case it exists.
     */
    where: OpenpayCustomerWhereUniqueInput
    /**
     * In case the OpenpayCustomer found by the `where` argument doesn't exist, create a new OpenpayCustomer with this data.
     */
    create: XOR<OpenpayCustomerCreateInput, OpenpayCustomerUncheckedCreateInput>
    /**
     * In case the OpenpayCustomer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OpenpayCustomerUpdateInput, OpenpayCustomerUncheckedUpdateInput>
  }

  /**
   * OpenpayCustomer delete
   */
  export type OpenpayCustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayCustomer
     */
    select?: OpenpayCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayCustomerInclude<ExtArgs> | null
    /**
     * Filter which OpenpayCustomer to delete.
     */
    where: OpenpayCustomerWhereUniqueInput
  }

  /**
   * OpenpayCustomer deleteMany
   */
  export type OpenpayCustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OpenpayCustomers to delete
     */
    where?: OpenpayCustomerWhereInput
  }

  /**
   * OpenpayCustomer.paymentMethods
   */
  export type OpenpayCustomer$paymentMethodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayPaymentMethod
     */
    select?: OpenpayPaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayPaymentMethodInclude<ExtArgs> | null
    where?: OpenpayPaymentMethodWhereInput
    orderBy?: OpenpayPaymentMethodOrderByWithRelationInput | OpenpayPaymentMethodOrderByWithRelationInput[]
    cursor?: OpenpayPaymentMethodWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OpenpayPaymentMethodScalarFieldEnum | OpenpayPaymentMethodScalarFieldEnum[]
  }

  /**
   * OpenpayCustomer.transactions
   */
  export type OpenpayCustomer$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayTransaction
     */
    select?: OpenpayTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayTransactionInclude<ExtArgs> | null
    where?: OpenpayTransactionWhereInput
    orderBy?: OpenpayTransactionOrderByWithRelationInput | OpenpayTransactionOrderByWithRelationInput[]
    cursor?: OpenpayTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OpenpayTransactionScalarFieldEnum | OpenpayTransactionScalarFieldEnum[]
  }

  /**
   * OpenpayCustomer without action
   */
  export type OpenpayCustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayCustomer
     */
    select?: OpenpayCustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayCustomerInclude<ExtArgs> | null
  }


  /**
   * Model OpenpayTransaction
   */

  export type AggregateOpenpayTransaction = {
    _count: OpenpayTransactionCountAggregateOutputType | null
    _avg: OpenpayTransactionAvgAggregateOutputType | null
    _sum: OpenpayTransactionSumAggregateOutputType | null
    _min: OpenpayTransactionMinAggregateOutputType | null
    _max: OpenpayTransactionMaxAggregateOutputType | null
  }

  export type OpenpayTransactionAvgAggregateOutputType = {
    amount: number | null
    riskScore: number | null
  }

  export type OpenpayTransactionSumAggregateOutputType = {
    amount: number | null
    riskScore: number | null
  }

  export type OpenpayTransactionMinAggregateOutputType = {
    id: string | null
    depositRequestId: string | null
    openpayTransactionId: string | null
    openpayChargeId: string | null
    amount: number | null
    currency: string | null
    paymentMethod: string | null
    paymentMethodDetails: string | null
    openpayStatus: string | null
    openpayErrorCode: string | null
    openpayErrorMessage: string | null
    customerId: string | null
    customerEmail: string | null
    customerPhone: string | null
    authorizationCode: string | null
    operationType: string | null
    deviceSessionId: string | null
    riskScore: number | null
    fraudIndicators: string | null
    ipAddress: string | null
    userAgent: string | null
    chargedAt: Date | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OpenpayTransactionMaxAggregateOutputType = {
    id: string | null
    depositRequestId: string | null
    openpayTransactionId: string | null
    openpayChargeId: string | null
    amount: number | null
    currency: string | null
    paymentMethod: string | null
    paymentMethodDetails: string | null
    openpayStatus: string | null
    openpayErrorCode: string | null
    openpayErrorMessage: string | null
    customerId: string | null
    customerEmail: string | null
    customerPhone: string | null
    authorizationCode: string | null
    operationType: string | null
    deviceSessionId: string | null
    riskScore: number | null
    fraudIndicators: string | null
    ipAddress: string | null
    userAgent: string | null
    chargedAt: Date | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OpenpayTransactionCountAggregateOutputType = {
    id: number
    depositRequestId: number
    openpayTransactionId: number
    openpayChargeId: number
    amount: number
    currency: number
    paymentMethod: number
    paymentMethodDetails: number
    openpayStatus: number
    openpayErrorCode: number
    openpayErrorMessage: number
    customerId: number
    customerEmail: number
    customerPhone: number
    authorizationCode: number
    operationType: number
    deviceSessionId: number
    riskScore: number
    fraudIndicators: number
    ipAddress: number
    userAgent: number
    chargedAt: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OpenpayTransactionAvgAggregateInputType = {
    amount?: true
    riskScore?: true
  }

  export type OpenpayTransactionSumAggregateInputType = {
    amount?: true
    riskScore?: true
  }

  export type OpenpayTransactionMinAggregateInputType = {
    id?: true
    depositRequestId?: true
    openpayTransactionId?: true
    openpayChargeId?: true
    amount?: true
    currency?: true
    paymentMethod?: true
    paymentMethodDetails?: true
    openpayStatus?: true
    openpayErrorCode?: true
    openpayErrorMessage?: true
    customerId?: true
    customerEmail?: true
    customerPhone?: true
    authorizationCode?: true
    operationType?: true
    deviceSessionId?: true
    riskScore?: true
    fraudIndicators?: true
    ipAddress?: true
    userAgent?: true
    chargedAt?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OpenpayTransactionMaxAggregateInputType = {
    id?: true
    depositRequestId?: true
    openpayTransactionId?: true
    openpayChargeId?: true
    amount?: true
    currency?: true
    paymentMethod?: true
    paymentMethodDetails?: true
    openpayStatus?: true
    openpayErrorCode?: true
    openpayErrorMessage?: true
    customerId?: true
    customerEmail?: true
    customerPhone?: true
    authorizationCode?: true
    operationType?: true
    deviceSessionId?: true
    riskScore?: true
    fraudIndicators?: true
    ipAddress?: true
    userAgent?: true
    chargedAt?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OpenpayTransactionCountAggregateInputType = {
    id?: true
    depositRequestId?: true
    openpayTransactionId?: true
    openpayChargeId?: true
    amount?: true
    currency?: true
    paymentMethod?: true
    paymentMethodDetails?: true
    openpayStatus?: true
    openpayErrorCode?: true
    openpayErrorMessage?: true
    customerId?: true
    customerEmail?: true
    customerPhone?: true
    authorizationCode?: true
    operationType?: true
    deviceSessionId?: true
    riskScore?: true
    fraudIndicators?: true
    ipAddress?: true
    userAgent?: true
    chargedAt?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OpenpayTransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OpenpayTransaction to aggregate.
     */
    where?: OpenpayTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpenpayTransactions to fetch.
     */
    orderBy?: OpenpayTransactionOrderByWithRelationInput | OpenpayTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OpenpayTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpenpayTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpenpayTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OpenpayTransactions
    **/
    _count?: true | OpenpayTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OpenpayTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OpenpayTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OpenpayTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OpenpayTransactionMaxAggregateInputType
  }

  export type GetOpenpayTransactionAggregateType<T extends OpenpayTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateOpenpayTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOpenpayTransaction[P]>
      : GetScalarType<T[P], AggregateOpenpayTransaction[P]>
  }




  export type OpenpayTransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OpenpayTransactionWhereInput
    orderBy?: OpenpayTransactionOrderByWithAggregationInput | OpenpayTransactionOrderByWithAggregationInput[]
    by: OpenpayTransactionScalarFieldEnum[] | OpenpayTransactionScalarFieldEnum
    having?: OpenpayTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OpenpayTransactionCountAggregateInputType | true
    _avg?: OpenpayTransactionAvgAggregateInputType
    _sum?: OpenpayTransactionSumAggregateInputType
    _min?: OpenpayTransactionMinAggregateInputType
    _max?: OpenpayTransactionMaxAggregateInputType
  }

  export type OpenpayTransactionGroupByOutputType = {
    id: string
    depositRequestId: string
    openpayTransactionId: string
    openpayChargeId: string | null
    amount: number
    currency: string
    paymentMethod: string
    paymentMethodDetails: string | null
    openpayStatus: string
    openpayErrorCode: string | null
    openpayErrorMessage: string | null
    customerId: string
    customerEmail: string
    customerPhone: string | null
    authorizationCode: string | null
    operationType: string | null
    deviceSessionId: string | null
    riskScore: number | null
    fraudIndicators: string | null
    ipAddress: string | null
    userAgent: string | null
    chargedAt: Date | null
    expiresAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: OpenpayTransactionCountAggregateOutputType | null
    _avg: OpenpayTransactionAvgAggregateOutputType | null
    _sum: OpenpayTransactionSumAggregateOutputType | null
    _min: OpenpayTransactionMinAggregateOutputType | null
    _max: OpenpayTransactionMaxAggregateOutputType | null
  }

  type GetOpenpayTransactionGroupByPayload<T extends OpenpayTransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OpenpayTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OpenpayTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OpenpayTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], OpenpayTransactionGroupByOutputType[P]>
        }
      >
    >


  export type OpenpayTransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    depositRequestId?: boolean
    openpayTransactionId?: boolean
    openpayChargeId?: boolean
    amount?: boolean
    currency?: boolean
    paymentMethod?: boolean
    paymentMethodDetails?: boolean
    openpayStatus?: boolean
    openpayErrorCode?: boolean
    openpayErrorMessage?: boolean
    customerId?: boolean
    customerEmail?: boolean
    customerPhone?: boolean
    authorizationCode?: boolean
    operationType?: boolean
    deviceSessionId?: boolean
    riskScore?: boolean
    fraudIndicators?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    chargedAt?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    depositRequest?: boolean | DepositRequestDefaultArgs<ExtArgs>
    customer?: boolean | OpenpayCustomerDefaultArgs<ExtArgs>
    webhookEvents?: boolean | OpenpayTransaction$webhookEventsArgs<ExtArgs>
    _count?: boolean | OpenpayTransactionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["openpayTransaction"]>

  export type OpenpayTransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    depositRequestId?: boolean
    openpayTransactionId?: boolean
    openpayChargeId?: boolean
    amount?: boolean
    currency?: boolean
    paymentMethod?: boolean
    paymentMethodDetails?: boolean
    openpayStatus?: boolean
    openpayErrorCode?: boolean
    openpayErrorMessage?: boolean
    customerId?: boolean
    customerEmail?: boolean
    customerPhone?: boolean
    authorizationCode?: boolean
    operationType?: boolean
    deviceSessionId?: boolean
    riskScore?: boolean
    fraudIndicators?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    chargedAt?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    depositRequest?: boolean | DepositRequestDefaultArgs<ExtArgs>
    customer?: boolean | OpenpayCustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["openpayTransaction"]>

  export type OpenpayTransactionSelectScalar = {
    id?: boolean
    depositRequestId?: boolean
    openpayTransactionId?: boolean
    openpayChargeId?: boolean
    amount?: boolean
    currency?: boolean
    paymentMethod?: boolean
    paymentMethodDetails?: boolean
    openpayStatus?: boolean
    openpayErrorCode?: boolean
    openpayErrorMessage?: boolean
    customerId?: boolean
    customerEmail?: boolean
    customerPhone?: boolean
    authorizationCode?: boolean
    operationType?: boolean
    deviceSessionId?: boolean
    riskScore?: boolean
    fraudIndicators?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    chargedAt?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OpenpayTransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    depositRequest?: boolean | DepositRequestDefaultArgs<ExtArgs>
    customer?: boolean | OpenpayCustomerDefaultArgs<ExtArgs>
    webhookEvents?: boolean | OpenpayTransaction$webhookEventsArgs<ExtArgs>
    _count?: boolean | OpenpayTransactionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OpenpayTransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    depositRequest?: boolean | DepositRequestDefaultArgs<ExtArgs>
    customer?: boolean | OpenpayCustomerDefaultArgs<ExtArgs>
  }

  export type $OpenpayTransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OpenpayTransaction"
    objects: {
      depositRequest: Prisma.$DepositRequestPayload<ExtArgs>
      customer: Prisma.$OpenpayCustomerPayload<ExtArgs>
      webhookEvents: Prisma.$OpenpayWebhookEventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      depositRequestId: string
      openpayTransactionId: string
      openpayChargeId: string | null
      amount: number
      currency: string
      paymentMethod: string
      paymentMethodDetails: string | null
      openpayStatus: string
      openpayErrorCode: string | null
      openpayErrorMessage: string | null
      customerId: string
      customerEmail: string
      customerPhone: string | null
      authorizationCode: string | null
      operationType: string | null
      deviceSessionId: string | null
      riskScore: number | null
      fraudIndicators: string | null
      ipAddress: string | null
      userAgent: string | null
      chargedAt: Date | null
      expiresAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["openpayTransaction"]>
    composites: {}
  }

  type OpenpayTransactionGetPayload<S extends boolean | null | undefined | OpenpayTransactionDefaultArgs> = $Result.GetResult<Prisma.$OpenpayTransactionPayload, S>

  type OpenpayTransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OpenpayTransactionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OpenpayTransactionCountAggregateInputType | true
    }

  export interface OpenpayTransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OpenpayTransaction'], meta: { name: 'OpenpayTransaction' } }
    /**
     * Find zero or one OpenpayTransaction that matches the filter.
     * @param {OpenpayTransactionFindUniqueArgs} args - Arguments to find a OpenpayTransaction
     * @example
     * // Get one OpenpayTransaction
     * const openpayTransaction = await prisma.openpayTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OpenpayTransactionFindUniqueArgs>(args: SelectSubset<T, OpenpayTransactionFindUniqueArgs<ExtArgs>>): Prisma__OpenpayTransactionClient<$Result.GetResult<Prisma.$OpenpayTransactionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one OpenpayTransaction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OpenpayTransactionFindUniqueOrThrowArgs} args - Arguments to find a OpenpayTransaction
     * @example
     * // Get one OpenpayTransaction
     * const openpayTransaction = await prisma.openpayTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OpenpayTransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, OpenpayTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OpenpayTransactionClient<$Result.GetResult<Prisma.$OpenpayTransactionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first OpenpayTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenpayTransactionFindFirstArgs} args - Arguments to find a OpenpayTransaction
     * @example
     * // Get one OpenpayTransaction
     * const openpayTransaction = await prisma.openpayTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OpenpayTransactionFindFirstArgs>(args?: SelectSubset<T, OpenpayTransactionFindFirstArgs<ExtArgs>>): Prisma__OpenpayTransactionClient<$Result.GetResult<Prisma.$OpenpayTransactionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first OpenpayTransaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenpayTransactionFindFirstOrThrowArgs} args - Arguments to find a OpenpayTransaction
     * @example
     * // Get one OpenpayTransaction
     * const openpayTransaction = await prisma.openpayTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OpenpayTransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, OpenpayTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__OpenpayTransactionClient<$Result.GetResult<Prisma.$OpenpayTransactionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more OpenpayTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenpayTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OpenpayTransactions
     * const openpayTransactions = await prisma.openpayTransaction.findMany()
     * 
     * // Get first 10 OpenpayTransactions
     * const openpayTransactions = await prisma.openpayTransaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const openpayTransactionWithIdOnly = await prisma.openpayTransaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OpenpayTransactionFindManyArgs>(args?: SelectSubset<T, OpenpayTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpenpayTransactionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a OpenpayTransaction.
     * @param {OpenpayTransactionCreateArgs} args - Arguments to create a OpenpayTransaction.
     * @example
     * // Create one OpenpayTransaction
     * const OpenpayTransaction = await prisma.openpayTransaction.create({
     *   data: {
     *     // ... data to create a OpenpayTransaction
     *   }
     * })
     * 
     */
    create<T extends OpenpayTransactionCreateArgs>(args: SelectSubset<T, OpenpayTransactionCreateArgs<ExtArgs>>): Prisma__OpenpayTransactionClient<$Result.GetResult<Prisma.$OpenpayTransactionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many OpenpayTransactions.
     * @param {OpenpayTransactionCreateManyArgs} args - Arguments to create many OpenpayTransactions.
     * @example
     * // Create many OpenpayTransactions
     * const openpayTransaction = await prisma.openpayTransaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OpenpayTransactionCreateManyArgs>(args?: SelectSubset<T, OpenpayTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OpenpayTransactions and returns the data saved in the database.
     * @param {OpenpayTransactionCreateManyAndReturnArgs} args - Arguments to create many OpenpayTransactions.
     * @example
     * // Create many OpenpayTransactions
     * const openpayTransaction = await prisma.openpayTransaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OpenpayTransactions and only return the `id`
     * const openpayTransactionWithIdOnly = await prisma.openpayTransaction.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OpenpayTransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, OpenpayTransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpenpayTransactionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a OpenpayTransaction.
     * @param {OpenpayTransactionDeleteArgs} args - Arguments to delete one OpenpayTransaction.
     * @example
     * // Delete one OpenpayTransaction
     * const OpenpayTransaction = await prisma.openpayTransaction.delete({
     *   where: {
     *     // ... filter to delete one OpenpayTransaction
     *   }
     * })
     * 
     */
    delete<T extends OpenpayTransactionDeleteArgs>(args: SelectSubset<T, OpenpayTransactionDeleteArgs<ExtArgs>>): Prisma__OpenpayTransactionClient<$Result.GetResult<Prisma.$OpenpayTransactionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one OpenpayTransaction.
     * @param {OpenpayTransactionUpdateArgs} args - Arguments to update one OpenpayTransaction.
     * @example
     * // Update one OpenpayTransaction
     * const openpayTransaction = await prisma.openpayTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OpenpayTransactionUpdateArgs>(args: SelectSubset<T, OpenpayTransactionUpdateArgs<ExtArgs>>): Prisma__OpenpayTransactionClient<$Result.GetResult<Prisma.$OpenpayTransactionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more OpenpayTransactions.
     * @param {OpenpayTransactionDeleteManyArgs} args - Arguments to filter OpenpayTransactions to delete.
     * @example
     * // Delete a few OpenpayTransactions
     * const { count } = await prisma.openpayTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OpenpayTransactionDeleteManyArgs>(args?: SelectSubset<T, OpenpayTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OpenpayTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenpayTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OpenpayTransactions
     * const openpayTransaction = await prisma.openpayTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OpenpayTransactionUpdateManyArgs>(args: SelectSubset<T, OpenpayTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OpenpayTransaction.
     * @param {OpenpayTransactionUpsertArgs} args - Arguments to update or create a OpenpayTransaction.
     * @example
     * // Update or create a OpenpayTransaction
     * const openpayTransaction = await prisma.openpayTransaction.upsert({
     *   create: {
     *     // ... data to create a OpenpayTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OpenpayTransaction we want to update
     *   }
     * })
     */
    upsert<T extends OpenpayTransactionUpsertArgs>(args: SelectSubset<T, OpenpayTransactionUpsertArgs<ExtArgs>>): Prisma__OpenpayTransactionClient<$Result.GetResult<Prisma.$OpenpayTransactionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of OpenpayTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenpayTransactionCountArgs} args - Arguments to filter OpenpayTransactions to count.
     * @example
     * // Count the number of OpenpayTransactions
     * const count = await prisma.openpayTransaction.count({
     *   where: {
     *     // ... the filter for the OpenpayTransactions we want to count
     *   }
     * })
    **/
    count<T extends OpenpayTransactionCountArgs>(
      args?: Subset<T, OpenpayTransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OpenpayTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OpenpayTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenpayTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OpenpayTransactionAggregateArgs>(args: Subset<T, OpenpayTransactionAggregateArgs>): Prisma.PrismaPromise<GetOpenpayTransactionAggregateType<T>>

    /**
     * Group by OpenpayTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenpayTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OpenpayTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OpenpayTransactionGroupByArgs['orderBy'] }
        : { orderBy?: OpenpayTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OpenpayTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOpenpayTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OpenpayTransaction model
   */
  readonly fields: OpenpayTransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OpenpayTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OpenpayTransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    depositRequest<T extends DepositRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepositRequestDefaultArgs<ExtArgs>>): Prisma__DepositRequestClient<$Result.GetResult<Prisma.$DepositRequestPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    customer<T extends OpenpayCustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OpenpayCustomerDefaultArgs<ExtArgs>>): Prisma__OpenpayCustomerClient<$Result.GetResult<Prisma.$OpenpayCustomerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    webhookEvents<T extends OpenpayTransaction$webhookEventsArgs<ExtArgs> = {}>(args?: Subset<T, OpenpayTransaction$webhookEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpenpayWebhookEventPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OpenpayTransaction model
   */ 
  interface OpenpayTransactionFieldRefs {
    readonly id: FieldRef<"OpenpayTransaction", 'String'>
    readonly depositRequestId: FieldRef<"OpenpayTransaction", 'String'>
    readonly openpayTransactionId: FieldRef<"OpenpayTransaction", 'String'>
    readonly openpayChargeId: FieldRef<"OpenpayTransaction", 'String'>
    readonly amount: FieldRef<"OpenpayTransaction", 'Float'>
    readonly currency: FieldRef<"OpenpayTransaction", 'String'>
    readonly paymentMethod: FieldRef<"OpenpayTransaction", 'String'>
    readonly paymentMethodDetails: FieldRef<"OpenpayTransaction", 'String'>
    readonly openpayStatus: FieldRef<"OpenpayTransaction", 'String'>
    readonly openpayErrorCode: FieldRef<"OpenpayTransaction", 'String'>
    readonly openpayErrorMessage: FieldRef<"OpenpayTransaction", 'String'>
    readonly customerId: FieldRef<"OpenpayTransaction", 'String'>
    readonly customerEmail: FieldRef<"OpenpayTransaction", 'String'>
    readonly customerPhone: FieldRef<"OpenpayTransaction", 'String'>
    readonly authorizationCode: FieldRef<"OpenpayTransaction", 'String'>
    readonly operationType: FieldRef<"OpenpayTransaction", 'String'>
    readonly deviceSessionId: FieldRef<"OpenpayTransaction", 'String'>
    readonly riskScore: FieldRef<"OpenpayTransaction", 'Float'>
    readonly fraudIndicators: FieldRef<"OpenpayTransaction", 'String'>
    readonly ipAddress: FieldRef<"OpenpayTransaction", 'String'>
    readonly userAgent: FieldRef<"OpenpayTransaction", 'String'>
    readonly chargedAt: FieldRef<"OpenpayTransaction", 'DateTime'>
    readonly expiresAt: FieldRef<"OpenpayTransaction", 'DateTime'>
    readonly createdAt: FieldRef<"OpenpayTransaction", 'DateTime'>
    readonly updatedAt: FieldRef<"OpenpayTransaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OpenpayTransaction findUnique
   */
  export type OpenpayTransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayTransaction
     */
    select?: OpenpayTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayTransactionInclude<ExtArgs> | null
    /**
     * Filter, which OpenpayTransaction to fetch.
     */
    where: OpenpayTransactionWhereUniqueInput
  }

  /**
   * OpenpayTransaction findUniqueOrThrow
   */
  export type OpenpayTransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayTransaction
     */
    select?: OpenpayTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayTransactionInclude<ExtArgs> | null
    /**
     * Filter, which OpenpayTransaction to fetch.
     */
    where: OpenpayTransactionWhereUniqueInput
  }

  /**
   * OpenpayTransaction findFirst
   */
  export type OpenpayTransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayTransaction
     */
    select?: OpenpayTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayTransactionInclude<ExtArgs> | null
    /**
     * Filter, which OpenpayTransaction to fetch.
     */
    where?: OpenpayTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpenpayTransactions to fetch.
     */
    orderBy?: OpenpayTransactionOrderByWithRelationInput | OpenpayTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OpenpayTransactions.
     */
    cursor?: OpenpayTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpenpayTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpenpayTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OpenpayTransactions.
     */
    distinct?: OpenpayTransactionScalarFieldEnum | OpenpayTransactionScalarFieldEnum[]
  }

  /**
   * OpenpayTransaction findFirstOrThrow
   */
  export type OpenpayTransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayTransaction
     */
    select?: OpenpayTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayTransactionInclude<ExtArgs> | null
    /**
     * Filter, which OpenpayTransaction to fetch.
     */
    where?: OpenpayTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpenpayTransactions to fetch.
     */
    orderBy?: OpenpayTransactionOrderByWithRelationInput | OpenpayTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OpenpayTransactions.
     */
    cursor?: OpenpayTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpenpayTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpenpayTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OpenpayTransactions.
     */
    distinct?: OpenpayTransactionScalarFieldEnum | OpenpayTransactionScalarFieldEnum[]
  }

  /**
   * OpenpayTransaction findMany
   */
  export type OpenpayTransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayTransaction
     */
    select?: OpenpayTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayTransactionInclude<ExtArgs> | null
    /**
     * Filter, which OpenpayTransactions to fetch.
     */
    where?: OpenpayTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpenpayTransactions to fetch.
     */
    orderBy?: OpenpayTransactionOrderByWithRelationInput | OpenpayTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OpenpayTransactions.
     */
    cursor?: OpenpayTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpenpayTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpenpayTransactions.
     */
    skip?: number
    distinct?: OpenpayTransactionScalarFieldEnum | OpenpayTransactionScalarFieldEnum[]
  }

  /**
   * OpenpayTransaction create
   */
  export type OpenpayTransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayTransaction
     */
    select?: OpenpayTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayTransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a OpenpayTransaction.
     */
    data: XOR<OpenpayTransactionCreateInput, OpenpayTransactionUncheckedCreateInput>
  }

  /**
   * OpenpayTransaction createMany
   */
  export type OpenpayTransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OpenpayTransactions.
     */
    data: OpenpayTransactionCreateManyInput | OpenpayTransactionCreateManyInput[]
  }

  /**
   * OpenpayTransaction createManyAndReturn
   */
  export type OpenpayTransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayTransaction
     */
    select?: OpenpayTransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many OpenpayTransactions.
     */
    data: OpenpayTransactionCreateManyInput | OpenpayTransactionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayTransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OpenpayTransaction update
   */
  export type OpenpayTransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayTransaction
     */
    select?: OpenpayTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayTransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a OpenpayTransaction.
     */
    data: XOR<OpenpayTransactionUpdateInput, OpenpayTransactionUncheckedUpdateInput>
    /**
     * Choose, which OpenpayTransaction to update.
     */
    where: OpenpayTransactionWhereUniqueInput
  }

  /**
   * OpenpayTransaction updateMany
   */
  export type OpenpayTransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OpenpayTransactions.
     */
    data: XOR<OpenpayTransactionUpdateManyMutationInput, OpenpayTransactionUncheckedUpdateManyInput>
    /**
     * Filter which OpenpayTransactions to update
     */
    where?: OpenpayTransactionWhereInput
  }

  /**
   * OpenpayTransaction upsert
   */
  export type OpenpayTransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayTransaction
     */
    select?: OpenpayTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayTransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the OpenpayTransaction to update in case it exists.
     */
    where: OpenpayTransactionWhereUniqueInput
    /**
     * In case the OpenpayTransaction found by the `where` argument doesn't exist, create a new OpenpayTransaction with this data.
     */
    create: XOR<OpenpayTransactionCreateInput, OpenpayTransactionUncheckedCreateInput>
    /**
     * In case the OpenpayTransaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OpenpayTransactionUpdateInput, OpenpayTransactionUncheckedUpdateInput>
  }

  /**
   * OpenpayTransaction delete
   */
  export type OpenpayTransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayTransaction
     */
    select?: OpenpayTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayTransactionInclude<ExtArgs> | null
    /**
     * Filter which OpenpayTransaction to delete.
     */
    where: OpenpayTransactionWhereUniqueInput
  }

  /**
   * OpenpayTransaction deleteMany
   */
  export type OpenpayTransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OpenpayTransactions to delete
     */
    where?: OpenpayTransactionWhereInput
  }

  /**
   * OpenpayTransaction.webhookEvents
   */
  export type OpenpayTransaction$webhookEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayWebhookEvent
     */
    select?: OpenpayWebhookEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayWebhookEventInclude<ExtArgs> | null
    where?: OpenpayWebhookEventWhereInput
    orderBy?: OpenpayWebhookEventOrderByWithRelationInput | OpenpayWebhookEventOrderByWithRelationInput[]
    cursor?: OpenpayWebhookEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OpenpayWebhookEventScalarFieldEnum | OpenpayWebhookEventScalarFieldEnum[]
  }

  /**
   * OpenpayTransaction without action
   */
  export type OpenpayTransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayTransaction
     */
    select?: OpenpayTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayTransactionInclude<ExtArgs> | null
  }


  /**
   * Model OpenpayWebhookEvent
   */

  export type AggregateOpenpayWebhookEvent = {
    _count: OpenpayWebhookEventCountAggregateOutputType | null
    _min: OpenpayWebhookEventMinAggregateOutputType | null
    _max: OpenpayWebhookEventMaxAggregateOutputType | null
  }

  export type OpenpayWebhookEventMinAggregateOutputType = {
    id: string | null
    openpayEventId: string | null
    eventType: string | null
    transactionId: string | null
    webhookSignature: string | null
    payload: string | null
    processedAt: Date | null
    processingStatus: string | null
    errorMessage: string | null
    createdAt: Date | null
  }

  export type OpenpayWebhookEventMaxAggregateOutputType = {
    id: string | null
    openpayEventId: string | null
    eventType: string | null
    transactionId: string | null
    webhookSignature: string | null
    payload: string | null
    processedAt: Date | null
    processingStatus: string | null
    errorMessage: string | null
    createdAt: Date | null
  }

  export type OpenpayWebhookEventCountAggregateOutputType = {
    id: number
    openpayEventId: number
    eventType: number
    transactionId: number
    webhookSignature: number
    payload: number
    processedAt: number
    processingStatus: number
    errorMessage: number
    createdAt: number
    _all: number
  }


  export type OpenpayWebhookEventMinAggregateInputType = {
    id?: true
    openpayEventId?: true
    eventType?: true
    transactionId?: true
    webhookSignature?: true
    payload?: true
    processedAt?: true
    processingStatus?: true
    errorMessage?: true
    createdAt?: true
  }

  export type OpenpayWebhookEventMaxAggregateInputType = {
    id?: true
    openpayEventId?: true
    eventType?: true
    transactionId?: true
    webhookSignature?: true
    payload?: true
    processedAt?: true
    processingStatus?: true
    errorMessage?: true
    createdAt?: true
  }

  export type OpenpayWebhookEventCountAggregateInputType = {
    id?: true
    openpayEventId?: true
    eventType?: true
    transactionId?: true
    webhookSignature?: true
    payload?: true
    processedAt?: true
    processingStatus?: true
    errorMessage?: true
    createdAt?: true
    _all?: true
  }

  export type OpenpayWebhookEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OpenpayWebhookEvent to aggregate.
     */
    where?: OpenpayWebhookEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpenpayWebhookEvents to fetch.
     */
    orderBy?: OpenpayWebhookEventOrderByWithRelationInput | OpenpayWebhookEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OpenpayWebhookEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpenpayWebhookEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpenpayWebhookEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OpenpayWebhookEvents
    **/
    _count?: true | OpenpayWebhookEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OpenpayWebhookEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OpenpayWebhookEventMaxAggregateInputType
  }

  export type GetOpenpayWebhookEventAggregateType<T extends OpenpayWebhookEventAggregateArgs> = {
        [P in keyof T & keyof AggregateOpenpayWebhookEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOpenpayWebhookEvent[P]>
      : GetScalarType<T[P], AggregateOpenpayWebhookEvent[P]>
  }




  export type OpenpayWebhookEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OpenpayWebhookEventWhereInput
    orderBy?: OpenpayWebhookEventOrderByWithAggregationInput | OpenpayWebhookEventOrderByWithAggregationInput[]
    by: OpenpayWebhookEventScalarFieldEnum[] | OpenpayWebhookEventScalarFieldEnum
    having?: OpenpayWebhookEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OpenpayWebhookEventCountAggregateInputType | true
    _min?: OpenpayWebhookEventMinAggregateInputType
    _max?: OpenpayWebhookEventMaxAggregateInputType
  }

  export type OpenpayWebhookEventGroupByOutputType = {
    id: string
    openpayEventId: string
    eventType: string
    transactionId: string | null
    webhookSignature: string
    payload: string
    processedAt: Date | null
    processingStatus: string
    errorMessage: string | null
    createdAt: Date
    _count: OpenpayWebhookEventCountAggregateOutputType | null
    _min: OpenpayWebhookEventMinAggregateOutputType | null
    _max: OpenpayWebhookEventMaxAggregateOutputType | null
  }

  type GetOpenpayWebhookEventGroupByPayload<T extends OpenpayWebhookEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OpenpayWebhookEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OpenpayWebhookEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OpenpayWebhookEventGroupByOutputType[P]>
            : GetScalarType<T[P], OpenpayWebhookEventGroupByOutputType[P]>
        }
      >
    >


  export type OpenpayWebhookEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    openpayEventId?: boolean
    eventType?: boolean
    transactionId?: boolean
    webhookSignature?: boolean
    payload?: boolean
    processedAt?: boolean
    processingStatus?: boolean
    errorMessage?: boolean
    createdAt?: boolean
    transaction?: boolean | OpenpayWebhookEvent$transactionArgs<ExtArgs>
  }, ExtArgs["result"]["openpayWebhookEvent"]>

  export type OpenpayWebhookEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    openpayEventId?: boolean
    eventType?: boolean
    transactionId?: boolean
    webhookSignature?: boolean
    payload?: boolean
    processedAt?: boolean
    processingStatus?: boolean
    errorMessage?: boolean
    createdAt?: boolean
    transaction?: boolean | OpenpayWebhookEvent$transactionArgs<ExtArgs>
  }, ExtArgs["result"]["openpayWebhookEvent"]>

  export type OpenpayWebhookEventSelectScalar = {
    id?: boolean
    openpayEventId?: boolean
    eventType?: boolean
    transactionId?: boolean
    webhookSignature?: boolean
    payload?: boolean
    processedAt?: boolean
    processingStatus?: boolean
    errorMessage?: boolean
    createdAt?: boolean
  }

  export type OpenpayWebhookEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transaction?: boolean | OpenpayWebhookEvent$transactionArgs<ExtArgs>
  }
  export type OpenpayWebhookEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transaction?: boolean | OpenpayWebhookEvent$transactionArgs<ExtArgs>
  }

  export type $OpenpayWebhookEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OpenpayWebhookEvent"
    objects: {
      transaction: Prisma.$OpenpayTransactionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      openpayEventId: string
      eventType: string
      transactionId: string | null
      webhookSignature: string
      payload: string
      processedAt: Date | null
      processingStatus: string
      errorMessage: string | null
      createdAt: Date
    }, ExtArgs["result"]["openpayWebhookEvent"]>
    composites: {}
  }

  type OpenpayWebhookEventGetPayload<S extends boolean | null | undefined | OpenpayWebhookEventDefaultArgs> = $Result.GetResult<Prisma.$OpenpayWebhookEventPayload, S>

  type OpenpayWebhookEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OpenpayWebhookEventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OpenpayWebhookEventCountAggregateInputType | true
    }

  export interface OpenpayWebhookEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OpenpayWebhookEvent'], meta: { name: 'OpenpayWebhookEvent' } }
    /**
     * Find zero or one OpenpayWebhookEvent that matches the filter.
     * @param {OpenpayWebhookEventFindUniqueArgs} args - Arguments to find a OpenpayWebhookEvent
     * @example
     * // Get one OpenpayWebhookEvent
     * const openpayWebhookEvent = await prisma.openpayWebhookEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OpenpayWebhookEventFindUniqueArgs>(args: SelectSubset<T, OpenpayWebhookEventFindUniqueArgs<ExtArgs>>): Prisma__OpenpayWebhookEventClient<$Result.GetResult<Prisma.$OpenpayWebhookEventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one OpenpayWebhookEvent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OpenpayWebhookEventFindUniqueOrThrowArgs} args - Arguments to find a OpenpayWebhookEvent
     * @example
     * // Get one OpenpayWebhookEvent
     * const openpayWebhookEvent = await prisma.openpayWebhookEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OpenpayWebhookEventFindUniqueOrThrowArgs>(args: SelectSubset<T, OpenpayWebhookEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OpenpayWebhookEventClient<$Result.GetResult<Prisma.$OpenpayWebhookEventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first OpenpayWebhookEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenpayWebhookEventFindFirstArgs} args - Arguments to find a OpenpayWebhookEvent
     * @example
     * // Get one OpenpayWebhookEvent
     * const openpayWebhookEvent = await prisma.openpayWebhookEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OpenpayWebhookEventFindFirstArgs>(args?: SelectSubset<T, OpenpayWebhookEventFindFirstArgs<ExtArgs>>): Prisma__OpenpayWebhookEventClient<$Result.GetResult<Prisma.$OpenpayWebhookEventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first OpenpayWebhookEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenpayWebhookEventFindFirstOrThrowArgs} args - Arguments to find a OpenpayWebhookEvent
     * @example
     * // Get one OpenpayWebhookEvent
     * const openpayWebhookEvent = await prisma.openpayWebhookEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OpenpayWebhookEventFindFirstOrThrowArgs>(args?: SelectSubset<T, OpenpayWebhookEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__OpenpayWebhookEventClient<$Result.GetResult<Prisma.$OpenpayWebhookEventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more OpenpayWebhookEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenpayWebhookEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OpenpayWebhookEvents
     * const openpayWebhookEvents = await prisma.openpayWebhookEvent.findMany()
     * 
     * // Get first 10 OpenpayWebhookEvents
     * const openpayWebhookEvents = await prisma.openpayWebhookEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const openpayWebhookEventWithIdOnly = await prisma.openpayWebhookEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OpenpayWebhookEventFindManyArgs>(args?: SelectSubset<T, OpenpayWebhookEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpenpayWebhookEventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a OpenpayWebhookEvent.
     * @param {OpenpayWebhookEventCreateArgs} args - Arguments to create a OpenpayWebhookEvent.
     * @example
     * // Create one OpenpayWebhookEvent
     * const OpenpayWebhookEvent = await prisma.openpayWebhookEvent.create({
     *   data: {
     *     // ... data to create a OpenpayWebhookEvent
     *   }
     * })
     * 
     */
    create<T extends OpenpayWebhookEventCreateArgs>(args: SelectSubset<T, OpenpayWebhookEventCreateArgs<ExtArgs>>): Prisma__OpenpayWebhookEventClient<$Result.GetResult<Prisma.$OpenpayWebhookEventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many OpenpayWebhookEvents.
     * @param {OpenpayWebhookEventCreateManyArgs} args - Arguments to create many OpenpayWebhookEvents.
     * @example
     * // Create many OpenpayWebhookEvents
     * const openpayWebhookEvent = await prisma.openpayWebhookEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OpenpayWebhookEventCreateManyArgs>(args?: SelectSubset<T, OpenpayWebhookEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OpenpayWebhookEvents and returns the data saved in the database.
     * @param {OpenpayWebhookEventCreateManyAndReturnArgs} args - Arguments to create many OpenpayWebhookEvents.
     * @example
     * // Create many OpenpayWebhookEvents
     * const openpayWebhookEvent = await prisma.openpayWebhookEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OpenpayWebhookEvents and only return the `id`
     * const openpayWebhookEventWithIdOnly = await prisma.openpayWebhookEvent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OpenpayWebhookEventCreateManyAndReturnArgs>(args?: SelectSubset<T, OpenpayWebhookEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpenpayWebhookEventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a OpenpayWebhookEvent.
     * @param {OpenpayWebhookEventDeleteArgs} args - Arguments to delete one OpenpayWebhookEvent.
     * @example
     * // Delete one OpenpayWebhookEvent
     * const OpenpayWebhookEvent = await prisma.openpayWebhookEvent.delete({
     *   where: {
     *     // ... filter to delete one OpenpayWebhookEvent
     *   }
     * })
     * 
     */
    delete<T extends OpenpayWebhookEventDeleteArgs>(args: SelectSubset<T, OpenpayWebhookEventDeleteArgs<ExtArgs>>): Prisma__OpenpayWebhookEventClient<$Result.GetResult<Prisma.$OpenpayWebhookEventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one OpenpayWebhookEvent.
     * @param {OpenpayWebhookEventUpdateArgs} args - Arguments to update one OpenpayWebhookEvent.
     * @example
     * // Update one OpenpayWebhookEvent
     * const openpayWebhookEvent = await prisma.openpayWebhookEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OpenpayWebhookEventUpdateArgs>(args: SelectSubset<T, OpenpayWebhookEventUpdateArgs<ExtArgs>>): Prisma__OpenpayWebhookEventClient<$Result.GetResult<Prisma.$OpenpayWebhookEventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more OpenpayWebhookEvents.
     * @param {OpenpayWebhookEventDeleteManyArgs} args - Arguments to filter OpenpayWebhookEvents to delete.
     * @example
     * // Delete a few OpenpayWebhookEvents
     * const { count } = await prisma.openpayWebhookEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OpenpayWebhookEventDeleteManyArgs>(args?: SelectSubset<T, OpenpayWebhookEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OpenpayWebhookEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenpayWebhookEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OpenpayWebhookEvents
     * const openpayWebhookEvent = await prisma.openpayWebhookEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OpenpayWebhookEventUpdateManyArgs>(args: SelectSubset<T, OpenpayWebhookEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OpenpayWebhookEvent.
     * @param {OpenpayWebhookEventUpsertArgs} args - Arguments to update or create a OpenpayWebhookEvent.
     * @example
     * // Update or create a OpenpayWebhookEvent
     * const openpayWebhookEvent = await prisma.openpayWebhookEvent.upsert({
     *   create: {
     *     // ... data to create a OpenpayWebhookEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OpenpayWebhookEvent we want to update
     *   }
     * })
     */
    upsert<T extends OpenpayWebhookEventUpsertArgs>(args: SelectSubset<T, OpenpayWebhookEventUpsertArgs<ExtArgs>>): Prisma__OpenpayWebhookEventClient<$Result.GetResult<Prisma.$OpenpayWebhookEventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of OpenpayWebhookEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenpayWebhookEventCountArgs} args - Arguments to filter OpenpayWebhookEvents to count.
     * @example
     * // Count the number of OpenpayWebhookEvents
     * const count = await prisma.openpayWebhookEvent.count({
     *   where: {
     *     // ... the filter for the OpenpayWebhookEvents we want to count
     *   }
     * })
    **/
    count<T extends OpenpayWebhookEventCountArgs>(
      args?: Subset<T, OpenpayWebhookEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OpenpayWebhookEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OpenpayWebhookEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenpayWebhookEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OpenpayWebhookEventAggregateArgs>(args: Subset<T, OpenpayWebhookEventAggregateArgs>): Prisma.PrismaPromise<GetOpenpayWebhookEventAggregateType<T>>

    /**
     * Group by OpenpayWebhookEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenpayWebhookEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OpenpayWebhookEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OpenpayWebhookEventGroupByArgs['orderBy'] }
        : { orderBy?: OpenpayWebhookEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OpenpayWebhookEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOpenpayWebhookEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OpenpayWebhookEvent model
   */
  readonly fields: OpenpayWebhookEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OpenpayWebhookEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OpenpayWebhookEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    transaction<T extends OpenpayWebhookEvent$transactionArgs<ExtArgs> = {}>(args?: Subset<T, OpenpayWebhookEvent$transactionArgs<ExtArgs>>): Prisma__OpenpayTransactionClient<$Result.GetResult<Prisma.$OpenpayTransactionPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OpenpayWebhookEvent model
   */ 
  interface OpenpayWebhookEventFieldRefs {
    readonly id: FieldRef<"OpenpayWebhookEvent", 'String'>
    readonly openpayEventId: FieldRef<"OpenpayWebhookEvent", 'String'>
    readonly eventType: FieldRef<"OpenpayWebhookEvent", 'String'>
    readonly transactionId: FieldRef<"OpenpayWebhookEvent", 'String'>
    readonly webhookSignature: FieldRef<"OpenpayWebhookEvent", 'String'>
    readonly payload: FieldRef<"OpenpayWebhookEvent", 'String'>
    readonly processedAt: FieldRef<"OpenpayWebhookEvent", 'DateTime'>
    readonly processingStatus: FieldRef<"OpenpayWebhookEvent", 'String'>
    readonly errorMessage: FieldRef<"OpenpayWebhookEvent", 'String'>
    readonly createdAt: FieldRef<"OpenpayWebhookEvent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OpenpayWebhookEvent findUnique
   */
  export type OpenpayWebhookEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayWebhookEvent
     */
    select?: OpenpayWebhookEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayWebhookEventInclude<ExtArgs> | null
    /**
     * Filter, which OpenpayWebhookEvent to fetch.
     */
    where: OpenpayWebhookEventWhereUniqueInput
  }

  /**
   * OpenpayWebhookEvent findUniqueOrThrow
   */
  export type OpenpayWebhookEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayWebhookEvent
     */
    select?: OpenpayWebhookEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayWebhookEventInclude<ExtArgs> | null
    /**
     * Filter, which OpenpayWebhookEvent to fetch.
     */
    where: OpenpayWebhookEventWhereUniqueInput
  }

  /**
   * OpenpayWebhookEvent findFirst
   */
  export type OpenpayWebhookEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayWebhookEvent
     */
    select?: OpenpayWebhookEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayWebhookEventInclude<ExtArgs> | null
    /**
     * Filter, which OpenpayWebhookEvent to fetch.
     */
    where?: OpenpayWebhookEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpenpayWebhookEvents to fetch.
     */
    orderBy?: OpenpayWebhookEventOrderByWithRelationInput | OpenpayWebhookEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OpenpayWebhookEvents.
     */
    cursor?: OpenpayWebhookEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpenpayWebhookEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpenpayWebhookEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OpenpayWebhookEvents.
     */
    distinct?: OpenpayWebhookEventScalarFieldEnum | OpenpayWebhookEventScalarFieldEnum[]
  }

  /**
   * OpenpayWebhookEvent findFirstOrThrow
   */
  export type OpenpayWebhookEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayWebhookEvent
     */
    select?: OpenpayWebhookEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayWebhookEventInclude<ExtArgs> | null
    /**
     * Filter, which OpenpayWebhookEvent to fetch.
     */
    where?: OpenpayWebhookEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpenpayWebhookEvents to fetch.
     */
    orderBy?: OpenpayWebhookEventOrderByWithRelationInput | OpenpayWebhookEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OpenpayWebhookEvents.
     */
    cursor?: OpenpayWebhookEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpenpayWebhookEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpenpayWebhookEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OpenpayWebhookEvents.
     */
    distinct?: OpenpayWebhookEventScalarFieldEnum | OpenpayWebhookEventScalarFieldEnum[]
  }

  /**
   * OpenpayWebhookEvent findMany
   */
  export type OpenpayWebhookEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayWebhookEvent
     */
    select?: OpenpayWebhookEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayWebhookEventInclude<ExtArgs> | null
    /**
     * Filter, which OpenpayWebhookEvents to fetch.
     */
    where?: OpenpayWebhookEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpenpayWebhookEvents to fetch.
     */
    orderBy?: OpenpayWebhookEventOrderByWithRelationInput | OpenpayWebhookEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OpenpayWebhookEvents.
     */
    cursor?: OpenpayWebhookEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpenpayWebhookEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpenpayWebhookEvents.
     */
    skip?: number
    distinct?: OpenpayWebhookEventScalarFieldEnum | OpenpayWebhookEventScalarFieldEnum[]
  }

  /**
   * OpenpayWebhookEvent create
   */
  export type OpenpayWebhookEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayWebhookEvent
     */
    select?: OpenpayWebhookEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayWebhookEventInclude<ExtArgs> | null
    /**
     * The data needed to create a OpenpayWebhookEvent.
     */
    data: XOR<OpenpayWebhookEventCreateInput, OpenpayWebhookEventUncheckedCreateInput>
  }

  /**
   * OpenpayWebhookEvent createMany
   */
  export type OpenpayWebhookEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OpenpayWebhookEvents.
     */
    data: OpenpayWebhookEventCreateManyInput | OpenpayWebhookEventCreateManyInput[]
  }

  /**
   * OpenpayWebhookEvent createManyAndReturn
   */
  export type OpenpayWebhookEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayWebhookEvent
     */
    select?: OpenpayWebhookEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many OpenpayWebhookEvents.
     */
    data: OpenpayWebhookEventCreateManyInput | OpenpayWebhookEventCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayWebhookEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OpenpayWebhookEvent update
   */
  export type OpenpayWebhookEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayWebhookEvent
     */
    select?: OpenpayWebhookEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayWebhookEventInclude<ExtArgs> | null
    /**
     * The data needed to update a OpenpayWebhookEvent.
     */
    data: XOR<OpenpayWebhookEventUpdateInput, OpenpayWebhookEventUncheckedUpdateInput>
    /**
     * Choose, which OpenpayWebhookEvent to update.
     */
    where: OpenpayWebhookEventWhereUniqueInput
  }

  /**
   * OpenpayWebhookEvent updateMany
   */
  export type OpenpayWebhookEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OpenpayWebhookEvents.
     */
    data: XOR<OpenpayWebhookEventUpdateManyMutationInput, OpenpayWebhookEventUncheckedUpdateManyInput>
    /**
     * Filter which OpenpayWebhookEvents to update
     */
    where?: OpenpayWebhookEventWhereInput
  }

  /**
   * OpenpayWebhookEvent upsert
   */
  export type OpenpayWebhookEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayWebhookEvent
     */
    select?: OpenpayWebhookEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayWebhookEventInclude<ExtArgs> | null
    /**
     * The filter to search for the OpenpayWebhookEvent to update in case it exists.
     */
    where: OpenpayWebhookEventWhereUniqueInput
    /**
     * In case the OpenpayWebhookEvent found by the `where` argument doesn't exist, create a new OpenpayWebhookEvent with this data.
     */
    create: XOR<OpenpayWebhookEventCreateInput, OpenpayWebhookEventUncheckedCreateInput>
    /**
     * In case the OpenpayWebhookEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OpenpayWebhookEventUpdateInput, OpenpayWebhookEventUncheckedUpdateInput>
  }

  /**
   * OpenpayWebhookEvent delete
   */
  export type OpenpayWebhookEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayWebhookEvent
     */
    select?: OpenpayWebhookEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayWebhookEventInclude<ExtArgs> | null
    /**
     * Filter which OpenpayWebhookEvent to delete.
     */
    where: OpenpayWebhookEventWhereUniqueInput
  }

  /**
   * OpenpayWebhookEvent deleteMany
   */
  export type OpenpayWebhookEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OpenpayWebhookEvents to delete
     */
    where?: OpenpayWebhookEventWhereInput
  }

  /**
   * OpenpayWebhookEvent.transaction
   */
  export type OpenpayWebhookEvent$transactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayTransaction
     */
    select?: OpenpayTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayTransactionInclude<ExtArgs> | null
    where?: OpenpayTransactionWhereInput
  }

  /**
   * OpenpayWebhookEvent without action
   */
  export type OpenpayWebhookEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayWebhookEvent
     */
    select?: OpenpayWebhookEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayWebhookEventInclude<ExtArgs> | null
  }


  /**
   * Model OpenpayPaymentMethod
   */

  export type AggregateOpenpayPaymentMethod = {
    _count: OpenpayPaymentMethodCountAggregateOutputType | null
    _min: OpenpayPaymentMethodMinAggregateOutputType | null
    _max: OpenpayPaymentMethodMaxAggregateOutputType | null
  }

  export type OpenpayPaymentMethodMinAggregateOutputType = {
    id: string | null
    customerId: string | null
    openpayCardId: string | null
    cardType: string | null
    cardBrand: string | null
    cardNumberMasked: string | null
    cardHolderName: string | null
    expirationMonth: string | null
    expirationYear: string | null
    isActive: boolean | null
    isDefault: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OpenpayPaymentMethodMaxAggregateOutputType = {
    id: string | null
    customerId: string | null
    openpayCardId: string | null
    cardType: string | null
    cardBrand: string | null
    cardNumberMasked: string | null
    cardHolderName: string | null
    expirationMonth: string | null
    expirationYear: string | null
    isActive: boolean | null
    isDefault: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OpenpayPaymentMethodCountAggregateOutputType = {
    id: number
    customerId: number
    openpayCardId: number
    cardType: number
    cardBrand: number
    cardNumberMasked: number
    cardHolderName: number
    expirationMonth: number
    expirationYear: number
    isActive: number
    isDefault: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OpenpayPaymentMethodMinAggregateInputType = {
    id?: true
    customerId?: true
    openpayCardId?: true
    cardType?: true
    cardBrand?: true
    cardNumberMasked?: true
    cardHolderName?: true
    expirationMonth?: true
    expirationYear?: true
    isActive?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OpenpayPaymentMethodMaxAggregateInputType = {
    id?: true
    customerId?: true
    openpayCardId?: true
    cardType?: true
    cardBrand?: true
    cardNumberMasked?: true
    cardHolderName?: true
    expirationMonth?: true
    expirationYear?: true
    isActive?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OpenpayPaymentMethodCountAggregateInputType = {
    id?: true
    customerId?: true
    openpayCardId?: true
    cardType?: true
    cardBrand?: true
    cardNumberMasked?: true
    cardHolderName?: true
    expirationMonth?: true
    expirationYear?: true
    isActive?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OpenpayPaymentMethodAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OpenpayPaymentMethod to aggregate.
     */
    where?: OpenpayPaymentMethodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpenpayPaymentMethods to fetch.
     */
    orderBy?: OpenpayPaymentMethodOrderByWithRelationInput | OpenpayPaymentMethodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OpenpayPaymentMethodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpenpayPaymentMethods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpenpayPaymentMethods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OpenpayPaymentMethods
    **/
    _count?: true | OpenpayPaymentMethodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OpenpayPaymentMethodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OpenpayPaymentMethodMaxAggregateInputType
  }

  export type GetOpenpayPaymentMethodAggregateType<T extends OpenpayPaymentMethodAggregateArgs> = {
        [P in keyof T & keyof AggregateOpenpayPaymentMethod]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOpenpayPaymentMethod[P]>
      : GetScalarType<T[P], AggregateOpenpayPaymentMethod[P]>
  }




  export type OpenpayPaymentMethodGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OpenpayPaymentMethodWhereInput
    orderBy?: OpenpayPaymentMethodOrderByWithAggregationInput | OpenpayPaymentMethodOrderByWithAggregationInput[]
    by: OpenpayPaymentMethodScalarFieldEnum[] | OpenpayPaymentMethodScalarFieldEnum
    having?: OpenpayPaymentMethodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OpenpayPaymentMethodCountAggregateInputType | true
    _min?: OpenpayPaymentMethodMinAggregateInputType
    _max?: OpenpayPaymentMethodMaxAggregateInputType
  }

  export type OpenpayPaymentMethodGroupByOutputType = {
    id: string
    customerId: string
    openpayCardId: string | null
    cardType: string | null
    cardBrand: string | null
    cardNumberMasked: string | null
    cardHolderName: string | null
    expirationMonth: string | null
    expirationYear: string | null
    isActive: boolean
    isDefault: boolean
    createdAt: Date
    updatedAt: Date
    _count: OpenpayPaymentMethodCountAggregateOutputType | null
    _min: OpenpayPaymentMethodMinAggregateOutputType | null
    _max: OpenpayPaymentMethodMaxAggregateOutputType | null
  }

  type GetOpenpayPaymentMethodGroupByPayload<T extends OpenpayPaymentMethodGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OpenpayPaymentMethodGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OpenpayPaymentMethodGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OpenpayPaymentMethodGroupByOutputType[P]>
            : GetScalarType<T[P], OpenpayPaymentMethodGroupByOutputType[P]>
        }
      >
    >


  export type OpenpayPaymentMethodSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    openpayCardId?: boolean
    cardType?: boolean
    cardBrand?: boolean
    cardNumberMasked?: boolean
    cardHolderName?: boolean
    expirationMonth?: boolean
    expirationYear?: boolean
    isActive?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | OpenpayCustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["openpayPaymentMethod"]>

  export type OpenpayPaymentMethodSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    openpayCardId?: boolean
    cardType?: boolean
    cardBrand?: boolean
    cardNumberMasked?: boolean
    cardHolderName?: boolean
    expirationMonth?: boolean
    expirationYear?: boolean
    isActive?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | OpenpayCustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["openpayPaymentMethod"]>

  export type OpenpayPaymentMethodSelectScalar = {
    id?: boolean
    customerId?: boolean
    openpayCardId?: boolean
    cardType?: boolean
    cardBrand?: boolean
    cardNumberMasked?: boolean
    cardHolderName?: boolean
    expirationMonth?: boolean
    expirationYear?: boolean
    isActive?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OpenpayPaymentMethodInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | OpenpayCustomerDefaultArgs<ExtArgs>
  }
  export type OpenpayPaymentMethodIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | OpenpayCustomerDefaultArgs<ExtArgs>
  }

  export type $OpenpayPaymentMethodPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OpenpayPaymentMethod"
    objects: {
      customer: Prisma.$OpenpayCustomerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      customerId: string
      openpayCardId: string | null
      cardType: string | null
      cardBrand: string | null
      cardNumberMasked: string | null
      cardHolderName: string | null
      expirationMonth: string | null
      expirationYear: string | null
      isActive: boolean
      isDefault: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["openpayPaymentMethod"]>
    composites: {}
  }

  type OpenpayPaymentMethodGetPayload<S extends boolean | null | undefined | OpenpayPaymentMethodDefaultArgs> = $Result.GetResult<Prisma.$OpenpayPaymentMethodPayload, S>

  type OpenpayPaymentMethodCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OpenpayPaymentMethodFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OpenpayPaymentMethodCountAggregateInputType | true
    }

  export interface OpenpayPaymentMethodDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OpenpayPaymentMethod'], meta: { name: 'OpenpayPaymentMethod' } }
    /**
     * Find zero or one OpenpayPaymentMethod that matches the filter.
     * @param {OpenpayPaymentMethodFindUniqueArgs} args - Arguments to find a OpenpayPaymentMethod
     * @example
     * // Get one OpenpayPaymentMethod
     * const openpayPaymentMethod = await prisma.openpayPaymentMethod.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OpenpayPaymentMethodFindUniqueArgs>(args: SelectSubset<T, OpenpayPaymentMethodFindUniqueArgs<ExtArgs>>): Prisma__OpenpayPaymentMethodClient<$Result.GetResult<Prisma.$OpenpayPaymentMethodPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one OpenpayPaymentMethod that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OpenpayPaymentMethodFindUniqueOrThrowArgs} args - Arguments to find a OpenpayPaymentMethod
     * @example
     * // Get one OpenpayPaymentMethod
     * const openpayPaymentMethod = await prisma.openpayPaymentMethod.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OpenpayPaymentMethodFindUniqueOrThrowArgs>(args: SelectSubset<T, OpenpayPaymentMethodFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OpenpayPaymentMethodClient<$Result.GetResult<Prisma.$OpenpayPaymentMethodPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first OpenpayPaymentMethod that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenpayPaymentMethodFindFirstArgs} args - Arguments to find a OpenpayPaymentMethod
     * @example
     * // Get one OpenpayPaymentMethod
     * const openpayPaymentMethod = await prisma.openpayPaymentMethod.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OpenpayPaymentMethodFindFirstArgs>(args?: SelectSubset<T, OpenpayPaymentMethodFindFirstArgs<ExtArgs>>): Prisma__OpenpayPaymentMethodClient<$Result.GetResult<Prisma.$OpenpayPaymentMethodPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first OpenpayPaymentMethod that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenpayPaymentMethodFindFirstOrThrowArgs} args - Arguments to find a OpenpayPaymentMethod
     * @example
     * // Get one OpenpayPaymentMethod
     * const openpayPaymentMethod = await prisma.openpayPaymentMethod.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OpenpayPaymentMethodFindFirstOrThrowArgs>(args?: SelectSubset<T, OpenpayPaymentMethodFindFirstOrThrowArgs<ExtArgs>>): Prisma__OpenpayPaymentMethodClient<$Result.GetResult<Prisma.$OpenpayPaymentMethodPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more OpenpayPaymentMethods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenpayPaymentMethodFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OpenpayPaymentMethods
     * const openpayPaymentMethods = await prisma.openpayPaymentMethod.findMany()
     * 
     * // Get first 10 OpenpayPaymentMethods
     * const openpayPaymentMethods = await prisma.openpayPaymentMethod.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const openpayPaymentMethodWithIdOnly = await prisma.openpayPaymentMethod.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OpenpayPaymentMethodFindManyArgs>(args?: SelectSubset<T, OpenpayPaymentMethodFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpenpayPaymentMethodPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a OpenpayPaymentMethod.
     * @param {OpenpayPaymentMethodCreateArgs} args - Arguments to create a OpenpayPaymentMethod.
     * @example
     * // Create one OpenpayPaymentMethod
     * const OpenpayPaymentMethod = await prisma.openpayPaymentMethod.create({
     *   data: {
     *     // ... data to create a OpenpayPaymentMethod
     *   }
     * })
     * 
     */
    create<T extends OpenpayPaymentMethodCreateArgs>(args: SelectSubset<T, OpenpayPaymentMethodCreateArgs<ExtArgs>>): Prisma__OpenpayPaymentMethodClient<$Result.GetResult<Prisma.$OpenpayPaymentMethodPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many OpenpayPaymentMethods.
     * @param {OpenpayPaymentMethodCreateManyArgs} args - Arguments to create many OpenpayPaymentMethods.
     * @example
     * // Create many OpenpayPaymentMethods
     * const openpayPaymentMethod = await prisma.openpayPaymentMethod.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OpenpayPaymentMethodCreateManyArgs>(args?: SelectSubset<T, OpenpayPaymentMethodCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OpenpayPaymentMethods and returns the data saved in the database.
     * @param {OpenpayPaymentMethodCreateManyAndReturnArgs} args - Arguments to create many OpenpayPaymentMethods.
     * @example
     * // Create many OpenpayPaymentMethods
     * const openpayPaymentMethod = await prisma.openpayPaymentMethod.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OpenpayPaymentMethods and only return the `id`
     * const openpayPaymentMethodWithIdOnly = await prisma.openpayPaymentMethod.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OpenpayPaymentMethodCreateManyAndReturnArgs>(args?: SelectSubset<T, OpenpayPaymentMethodCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpenpayPaymentMethodPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a OpenpayPaymentMethod.
     * @param {OpenpayPaymentMethodDeleteArgs} args - Arguments to delete one OpenpayPaymentMethod.
     * @example
     * // Delete one OpenpayPaymentMethod
     * const OpenpayPaymentMethod = await prisma.openpayPaymentMethod.delete({
     *   where: {
     *     // ... filter to delete one OpenpayPaymentMethod
     *   }
     * })
     * 
     */
    delete<T extends OpenpayPaymentMethodDeleteArgs>(args: SelectSubset<T, OpenpayPaymentMethodDeleteArgs<ExtArgs>>): Prisma__OpenpayPaymentMethodClient<$Result.GetResult<Prisma.$OpenpayPaymentMethodPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one OpenpayPaymentMethod.
     * @param {OpenpayPaymentMethodUpdateArgs} args - Arguments to update one OpenpayPaymentMethod.
     * @example
     * // Update one OpenpayPaymentMethod
     * const openpayPaymentMethod = await prisma.openpayPaymentMethod.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OpenpayPaymentMethodUpdateArgs>(args: SelectSubset<T, OpenpayPaymentMethodUpdateArgs<ExtArgs>>): Prisma__OpenpayPaymentMethodClient<$Result.GetResult<Prisma.$OpenpayPaymentMethodPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more OpenpayPaymentMethods.
     * @param {OpenpayPaymentMethodDeleteManyArgs} args - Arguments to filter OpenpayPaymentMethods to delete.
     * @example
     * // Delete a few OpenpayPaymentMethods
     * const { count } = await prisma.openpayPaymentMethod.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OpenpayPaymentMethodDeleteManyArgs>(args?: SelectSubset<T, OpenpayPaymentMethodDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OpenpayPaymentMethods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenpayPaymentMethodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OpenpayPaymentMethods
     * const openpayPaymentMethod = await prisma.openpayPaymentMethod.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OpenpayPaymentMethodUpdateManyArgs>(args: SelectSubset<T, OpenpayPaymentMethodUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OpenpayPaymentMethod.
     * @param {OpenpayPaymentMethodUpsertArgs} args - Arguments to update or create a OpenpayPaymentMethod.
     * @example
     * // Update or create a OpenpayPaymentMethod
     * const openpayPaymentMethod = await prisma.openpayPaymentMethod.upsert({
     *   create: {
     *     // ... data to create a OpenpayPaymentMethod
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OpenpayPaymentMethod we want to update
     *   }
     * })
     */
    upsert<T extends OpenpayPaymentMethodUpsertArgs>(args: SelectSubset<T, OpenpayPaymentMethodUpsertArgs<ExtArgs>>): Prisma__OpenpayPaymentMethodClient<$Result.GetResult<Prisma.$OpenpayPaymentMethodPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of OpenpayPaymentMethods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenpayPaymentMethodCountArgs} args - Arguments to filter OpenpayPaymentMethods to count.
     * @example
     * // Count the number of OpenpayPaymentMethods
     * const count = await prisma.openpayPaymentMethod.count({
     *   where: {
     *     // ... the filter for the OpenpayPaymentMethods we want to count
     *   }
     * })
    **/
    count<T extends OpenpayPaymentMethodCountArgs>(
      args?: Subset<T, OpenpayPaymentMethodCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OpenpayPaymentMethodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OpenpayPaymentMethod.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenpayPaymentMethodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OpenpayPaymentMethodAggregateArgs>(args: Subset<T, OpenpayPaymentMethodAggregateArgs>): Prisma.PrismaPromise<GetOpenpayPaymentMethodAggregateType<T>>

    /**
     * Group by OpenpayPaymentMethod.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenpayPaymentMethodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OpenpayPaymentMethodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OpenpayPaymentMethodGroupByArgs['orderBy'] }
        : { orderBy?: OpenpayPaymentMethodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OpenpayPaymentMethodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOpenpayPaymentMethodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OpenpayPaymentMethod model
   */
  readonly fields: OpenpayPaymentMethodFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OpenpayPaymentMethod.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OpenpayPaymentMethodClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends OpenpayCustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OpenpayCustomerDefaultArgs<ExtArgs>>): Prisma__OpenpayCustomerClient<$Result.GetResult<Prisma.$OpenpayCustomerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OpenpayPaymentMethod model
   */ 
  interface OpenpayPaymentMethodFieldRefs {
    readonly id: FieldRef<"OpenpayPaymentMethod", 'String'>
    readonly customerId: FieldRef<"OpenpayPaymentMethod", 'String'>
    readonly openpayCardId: FieldRef<"OpenpayPaymentMethod", 'String'>
    readonly cardType: FieldRef<"OpenpayPaymentMethod", 'String'>
    readonly cardBrand: FieldRef<"OpenpayPaymentMethod", 'String'>
    readonly cardNumberMasked: FieldRef<"OpenpayPaymentMethod", 'String'>
    readonly cardHolderName: FieldRef<"OpenpayPaymentMethod", 'String'>
    readonly expirationMonth: FieldRef<"OpenpayPaymentMethod", 'String'>
    readonly expirationYear: FieldRef<"OpenpayPaymentMethod", 'String'>
    readonly isActive: FieldRef<"OpenpayPaymentMethod", 'Boolean'>
    readonly isDefault: FieldRef<"OpenpayPaymentMethod", 'Boolean'>
    readonly createdAt: FieldRef<"OpenpayPaymentMethod", 'DateTime'>
    readonly updatedAt: FieldRef<"OpenpayPaymentMethod", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OpenpayPaymentMethod findUnique
   */
  export type OpenpayPaymentMethodFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayPaymentMethod
     */
    select?: OpenpayPaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayPaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which OpenpayPaymentMethod to fetch.
     */
    where: OpenpayPaymentMethodWhereUniqueInput
  }

  /**
   * OpenpayPaymentMethod findUniqueOrThrow
   */
  export type OpenpayPaymentMethodFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayPaymentMethod
     */
    select?: OpenpayPaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayPaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which OpenpayPaymentMethod to fetch.
     */
    where: OpenpayPaymentMethodWhereUniqueInput
  }

  /**
   * OpenpayPaymentMethod findFirst
   */
  export type OpenpayPaymentMethodFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayPaymentMethod
     */
    select?: OpenpayPaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayPaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which OpenpayPaymentMethod to fetch.
     */
    where?: OpenpayPaymentMethodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpenpayPaymentMethods to fetch.
     */
    orderBy?: OpenpayPaymentMethodOrderByWithRelationInput | OpenpayPaymentMethodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OpenpayPaymentMethods.
     */
    cursor?: OpenpayPaymentMethodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpenpayPaymentMethods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpenpayPaymentMethods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OpenpayPaymentMethods.
     */
    distinct?: OpenpayPaymentMethodScalarFieldEnum | OpenpayPaymentMethodScalarFieldEnum[]
  }

  /**
   * OpenpayPaymentMethod findFirstOrThrow
   */
  export type OpenpayPaymentMethodFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayPaymentMethod
     */
    select?: OpenpayPaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayPaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which OpenpayPaymentMethod to fetch.
     */
    where?: OpenpayPaymentMethodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpenpayPaymentMethods to fetch.
     */
    orderBy?: OpenpayPaymentMethodOrderByWithRelationInput | OpenpayPaymentMethodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OpenpayPaymentMethods.
     */
    cursor?: OpenpayPaymentMethodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpenpayPaymentMethods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpenpayPaymentMethods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OpenpayPaymentMethods.
     */
    distinct?: OpenpayPaymentMethodScalarFieldEnum | OpenpayPaymentMethodScalarFieldEnum[]
  }

  /**
   * OpenpayPaymentMethod findMany
   */
  export type OpenpayPaymentMethodFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayPaymentMethod
     */
    select?: OpenpayPaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayPaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which OpenpayPaymentMethods to fetch.
     */
    where?: OpenpayPaymentMethodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpenpayPaymentMethods to fetch.
     */
    orderBy?: OpenpayPaymentMethodOrderByWithRelationInput | OpenpayPaymentMethodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OpenpayPaymentMethods.
     */
    cursor?: OpenpayPaymentMethodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpenpayPaymentMethods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpenpayPaymentMethods.
     */
    skip?: number
    distinct?: OpenpayPaymentMethodScalarFieldEnum | OpenpayPaymentMethodScalarFieldEnum[]
  }

  /**
   * OpenpayPaymentMethod create
   */
  export type OpenpayPaymentMethodCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayPaymentMethod
     */
    select?: OpenpayPaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayPaymentMethodInclude<ExtArgs> | null
    /**
     * The data needed to create a OpenpayPaymentMethod.
     */
    data: XOR<OpenpayPaymentMethodCreateInput, OpenpayPaymentMethodUncheckedCreateInput>
  }

  /**
   * OpenpayPaymentMethod createMany
   */
  export type OpenpayPaymentMethodCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OpenpayPaymentMethods.
     */
    data: OpenpayPaymentMethodCreateManyInput | OpenpayPaymentMethodCreateManyInput[]
  }

  /**
   * OpenpayPaymentMethod createManyAndReturn
   */
  export type OpenpayPaymentMethodCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayPaymentMethod
     */
    select?: OpenpayPaymentMethodSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many OpenpayPaymentMethods.
     */
    data: OpenpayPaymentMethodCreateManyInput | OpenpayPaymentMethodCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayPaymentMethodIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OpenpayPaymentMethod update
   */
  export type OpenpayPaymentMethodUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayPaymentMethod
     */
    select?: OpenpayPaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayPaymentMethodInclude<ExtArgs> | null
    /**
     * The data needed to update a OpenpayPaymentMethod.
     */
    data: XOR<OpenpayPaymentMethodUpdateInput, OpenpayPaymentMethodUncheckedUpdateInput>
    /**
     * Choose, which OpenpayPaymentMethod to update.
     */
    where: OpenpayPaymentMethodWhereUniqueInput
  }

  /**
   * OpenpayPaymentMethod updateMany
   */
  export type OpenpayPaymentMethodUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OpenpayPaymentMethods.
     */
    data: XOR<OpenpayPaymentMethodUpdateManyMutationInput, OpenpayPaymentMethodUncheckedUpdateManyInput>
    /**
     * Filter which OpenpayPaymentMethods to update
     */
    where?: OpenpayPaymentMethodWhereInput
  }

  /**
   * OpenpayPaymentMethod upsert
   */
  export type OpenpayPaymentMethodUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayPaymentMethod
     */
    select?: OpenpayPaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayPaymentMethodInclude<ExtArgs> | null
    /**
     * The filter to search for the OpenpayPaymentMethod to update in case it exists.
     */
    where: OpenpayPaymentMethodWhereUniqueInput
    /**
     * In case the OpenpayPaymentMethod found by the `where` argument doesn't exist, create a new OpenpayPaymentMethod with this data.
     */
    create: XOR<OpenpayPaymentMethodCreateInput, OpenpayPaymentMethodUncheckedCreateInput>
    /**
     * In case the OpenpayPaymentMethod was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OpenpayPaymentMethodUpdateInput, OpenpayPaymentMethodUncheckedUpdateInput>
  }

  /**
   * OpenpayPaymentMethod delete
   */
  export type OpenpayPaymentMethodDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayPaymentMethod
     */
    select?: OpenpayPaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayPaymentMethodInclude<ExtArgs> | null
    /**
     * Filter which OpenpayPaymentMethod to delete.
     */
    where: OpenpayPaymentMethodWhereUniqueInput
  }

  /**
   * OpenpayPaymentMethod deleteMany
   */
  export type OpenpayPaymentMethodDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OpenpayPaymentMethods to delete
     */
    where?: OpenpayPaymentMethodWhereInput
  }

  /**
   * OpenpayPaymentMethod without action
   */
  export type OpenpayPaymentMethodDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenpayPaymentMethod
     */
    select?: OpenpayPaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenpayPaymentMethodInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    password: 'password',
    role: 'role',
    balance: 'balance',
    pearlsBalance: 'pearlsBalance',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isActive: 'isActive',
    isVerified: 'isVerified',
    fullName: 'fullName',
    phone: 'phone',
    dni: 'dni',
    birthDate: 'birthDate'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const GameScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    maxPlayers: 'maxPlayers',
    cardPrice: 'cardPrice',
    totalPrize: 'totalPrize',
    status: 'status',
    scheduledAt: 'scheduledAt',
    startedAt: 'startedAt',
    endedAt: 'endedAt',
    ballsDrawn: 'ballsDrawn',
    currentBall: 'currentBall',
    winningCards: 'winningCards',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GameScalarFieldEnum = (typeof GameScalarFieldEnum)[keyof typeof GameScalarFieldEnum]


  export const GameParticipantScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    gameId: 'gameId',
    joinedAt: 'joinedAt',
    cardsCount: 'cardsCount',
    totalSpent: 'totalSpent',
    hasWon: 'hasWon',
    prizeWon: 'prizeWon'
  };

  export type GameParticipantScalarFieldEnum = (typeof GameParticipantScalarFieldEnum)[keyof typeof GameParticipantScalarFieldEnum]


  export const BingoCardScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    gameId: 'gameId',
    cardNumber: 'cardNumber',
    isActive: 'isActive',
    markedNumbers: 'markedNumbers',
    isWinner: 'isWinner',
    winningPattern: 'winningPattern',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BingoCardScalarFieldEnum = (typeof BingoCardScalarFieldEnum)[keyof typeof BingoCardScalarFieldEnum]


  export const CardNumberScalarFieldEnum: {
    id: 'id',
    cardId: 'cardId',
    position: 'position',
    column: 'column',
    number: 'number',
    isMarked: 'isMarked',
    isFree: 'isFree'
  };

  export type CardNumberScalarFieldEnum = (typeof CardNumberScalarFieldEnum)[keyof typeof CardNumberScalarFieldEnum]


  export const TransactionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    gameId: 'gameId',
    type: 'type',
    amount: 'amount',
    description: 'description',
    status: 'status',
    paymentMethod: 'paymentMethod',
    paymentId: 'paymentId',
    pearlsAmount: 'pearlsAmount',
    fromUserId: 'fromUserId',
    toUserId: 'toUserId',
    commissionAmount: 'commissionAmount',
    referenceId: 'referenceId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  export const WalletScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    balance: 'balance',
    dailyLimit: 'dailyLimit',
    monthlyLimit: 'monthlyLimit',
    isActive: 'isActive',
    isFrozen: 'isFrozen',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WalletScalarFieldEnum = (typeof WalletScalarFieldEnum)[keyof typeof WalletScalarFieldEnum]


  export const DepositRequestScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    amount: 'amount',
    pearlsAmount: 'pearlsAmount',
    currency: 'currency',
    paymentMethod: 'paymentMethod',
    referenceCode: 'referenceCode',
    bankReference: 'bankReference',
    bankAccount: 'bankAccount',
    bankAccountName: 'bankAccountName',
    status: 'status',
    adminNotes: 'adminNotes',
    validatedBy: 'validatedBy',
    validatedAt: 'validatedAt',
    proofImage: 'proofImage',
    proofImageAdmin: 'proofImageAdmin',
    transactionId: 'transactionId',
    integrationMethod: 'integrationMethod',
    openpayTransactionId: 'openpayTransactionId',
    autoApprovalEligible: 'autoApprovalEligible',
    processingFee: 'processingFee',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    expiresAt: 'expiresAt'
  };

  export type DepositRequestScalarFieldEnum = (typeof DepositRequestScalarFieldEnum)[keyof typeof DepositRequestScalarFieldEnum]


  export const WithdrawalRequestScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    pearlsAmount: 'pearlsAmount',
    amountInSoles: 'amountInSoles',
    commission: 'commission',
    netAmount: 'netAmount',
    bankCode: 'bankCode',
    accountNumber: 'accountNumber',
    accountType: 'accountType',
    accountHolderName: 'accountHolderName',
    accountHolderDni: 'accountHolderDni',
    status: 'status',
    adminNotes: 'adminNotes',
    processedBy: 'processedBy',
    processedAt: 'processedAt',
    bankTransactionId: 'bankTransactionId',
    transferProof: 'transferProof',
    referenceCode: 'referenceCode',
    transactionId: 'transactionId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WithdrawalRequestScalarFieldEnum = (typeof WithdrawalRequestScalarFieldEnum)[keyof typeof WithdrawalRequestScalarFieldEnum]


  export const PaymentReferenceScalarFieldEnum: {
    id: 'id',
    code: 'code',
    type: 'type',
    userId: 'userId',
    amount: 'amount',
    description: 'description',
    metadata: 'metadata',
    isUsed: 'isUsed',
    usedAt: 'usedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    expiresAt: 'expiresAt'
  };

  export type PaymentReferenceScalarFieldEnum = (typeof PaymentReferenceScalarFieldEnum)[keyof typeof PaymentReferenceScalarFieldEnum]


  export const BankConfigurationScalarFieldEnum: {
    id: 'id',
    bankCode: 'bankCode',
    bankName: 'bankName',
    accountNumber: 'accountNumber',
    accountType: 'accountType',
    accountHolderName: 'accountHolderName',
    cci: 'cci',
    isActive: 'isActive',
    minDeposit: 'minDeposit',
    maxDeposit: 'maxDeposit',
    depositCommission: 'depositCommission',
    instructions: 'instructions',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BankConfigurationScalarFieldEnum = (typeof BankConfigurationScalarFieldEnum)[keyof typeof BankConfigurationScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    adminId: 'adminId',
    action: 'action',
    entity: 'entity',
    entityId: 'entityId',
    oldValue: 'oldValue',
    newValue: 'newValue',
    description: 'description',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    sessionId: 'sessionId',
    createdAt: 'createdAt'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const PaymentConfigurationScalarFieldEnum: {
    id: 'id',
    p2pTransferEnabled: 'p2pTransferEnabled',
    p2pTransferCommission: 'p2pTransferCommission',
    defaultDailyLimit: 'defaultDailyLimit',
    defaultMonthlyLimit: 'defaultMonthlyLimit',
    depositExpirationHours: 'depositExpirationHours',
    referenceExpirationHours: 'referenceExpirationHours',
    depositsEnabled: 'depositsEnabled',
    withdrawalsEnabled: 'withdrawalsEnabled',
    transfersEnabled: 'transfersEnabled',
    maintenanceMessage: 'maintenanceMessage',
    announcementMessage: 'announcementMessage',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PaymentConfigurationScalarFieldEnum = (typeof PaymentConfigurationScalarFieldEnum)[keyof typeof PaymentConfigurationScalarFieldEnum]


  export const OpenpayCustomerScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    openpayCustomerId: 'openpayCustomerId',
    email: 'email',
    name: 'name',
    phone: 'phone',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OpenpayCustomerScalarFieldEnum = (typeof OpenpayCustomerScalarFieldEnum)[keyof typeof OpenpayCustomerScalarFieldEnum]


  export const OpenpayTransactionScalarFieldEnum: {
    id: 'id',
    depositRequestId: 'depositRequestId',
    openpayTransactionId: 'openpayTransactionId',
    openpayChargeId: 'openpayChargeId',
    amount: 'amount',
    currency: 'currency',
    paymentMethod: 'paymentMethod',
    paymentMethodDetails: 'paymentMethodDetails',
    openpayStatus: 'openpayStatus',
    openpayErrorCode: 'openpayErrorCode',
    openpayErrorMessage: 'openpayErrorMessage',
    customerId: 'customerId',
    customerEmail: 'customerEmail',
    customerPhone: 'customerPhone',
    authorizationCode: 'authorizationCode',
    operationType: 'operationType',
    deviceSessionId: 'deviceSessionId',
    riskScore: 'riskScore',
    fraudIndicators: 'fraudIndicators',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    chargedAt: 'chargedAt',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OpenpayTransactionScalarFieldEnum = (typeof OpenpayTransactionScalarFieldEnum)[keyof typeof OpenpayTransactionScalarFieldEnum]


  export const OpenpayWebhookEventScalarFieldEnum: {
    id: 'id',
    openpayEventId: 'openpayEventId',
    eventType: 'eventType',
    transactionId: 'transactionId',
    webhookSignature: 'webhookSignature',
    payload: 'payload',
    processedAt: 'processedAt',
    processingStatus: 'processingStatus',
    errorMessage: 'errorMessage',
    createdAt: 'createdAt'
  };

  export type OpenpayWebhookEventScalarFieldEnum = (typeof OpenpayWebhookEventScalarFieldEnum)[keyof typeof OpenpayWebhookEventScalarFieldEnum]


  export const OpenpayPaymentMethodScalarFieldEnum: {
    id: 'id',
    customerId: 'customerId',
    openpayCardId: 'openpayCardId',
    cardType: 'cardType',
    cardBrand: 'cardBrand',
    cardNumberMasked: 'cardNumberMasked',
    cardHolderName: 'cardHolderName',
    expirationMonth: 'expirationMonth',
    expirationYear: 'expirationYear',
    isActive: 'isActive',
    isDefault: 'isDefault',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OpenpayPaymentMethodScalarFieldEnum = (typeof OpenpayPaymentMethodScalarFieldEnum)[keyof typeof OpenpayPaymentMethodScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    balance?: DecimalFilter<"User"> | Decimal | DecimalJsLike | number | string
    pearlsBalance?: DecimalFilter<"User"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    isActive?: BoolFilter<"User"> | boolean
    isVerified?: BoolFilter<"User"> | boolean
    fullName?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    dni?: StringNullableFilter<"User"> | string | null
    birthDate?: DateTimeNullableFilter<"User"> | Date | string | null
    gameParticipations?: GameParticipantListRelationFilter
    bingoCards?: BingoCardListRelationFilter
    transactions?: TransactionListRelationFilter
    wallet?: XOR<WalletNullableRelationFilter, WalletWhereInput> | null
    depositRequests?: DepositRequestListRelationFilter
    withdrawalRequests?: WithdrawalRequestListRelationFilter
    sentTransfers?: TransactionListRelationFilter
    receivedTransfers?: TransactionListRelationFilter
    openpayCustomer?: XOR<OpenpayCustomerNullableRelationFilter, OpenpayCustomerWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    balance?: SortOrder
    pearlsBalance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    isVerified?: SortOrder
    fullName?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    dni?: SortOrderInput | SortOrder
    birthDate?: SortOrderInput | SortOrder
    gameParticipations?: GameParticipantOrderByRelationAggregateInput
    bingoCards?: BingoCardOrderByRelationAggregateInput
    transactions?: TransactionOrderByRelationAggregateInput
    wallet?: WalletOrderByWithRelationInput
    depositRequests?: DepositRequestOrderByRelationAggregateInput
    withdrawalRequests?: WithdrawalRequestOrderByRelationAggregateInput
    sentTransfers?: TransactionOrderByRelationAggregateInput
    receivedTransfers?: TransactionOrderByRelationAggregateInput
    openpayCustomer?: OpenpayCustomerOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    dni?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    balance?: DecimalFilter<"User"> | Decimal | DecimalJsLike | number | string
    pearlsBalance?: DecimalFilter<"User"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    isActive?: BoolFilter<"User"> | boolean
    isVerified?: BoolFilter<"User"> | boolean
    fullName?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    birthDate?: DateTimeNullableFilter<"User"> | Date | string | null
    gameParticipations?: GameParticipantListRelationFilter
    bingoCards?: BingoCardListRelationFilter
    transactions?: TransactionListRelationFilter
    wallet?: XOR<WalletNullableRelationFilter, WalletWhereInput> | null
    depositRequests?: DepositRequestListRelationFilter
    withdrawalRequests?: WithdrawalRequestListRelationFilter
    sentTransfers?: TransactionListRelationFilter
    receivedTransfers?: TransactionListRelationFilter
    openpayCustomer?: XOR<OpenpayCustomerNullableRelationFilter, OpenpayCustomerWhereInput> | null
  }, "id" | "email" | "username" | "dni">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    balance?: SortOrder
    pearlsBalance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    isVerified?: SortOrder
    fullName?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    dni?: SortOrderInput | SortOrder
    birthDate?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    balance?: DecimalWithAggregatesFilter<"User"> | Decimal | DecimalJsLike | number | string
    pearlsBalance?: DecimalWithAggregatesFilter<"User"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    isVerified?: BoolWithAggregatesFilter<"User"> | boolean
    fullName?: StringNullableWithAggregatesFilter<"User"> | string | null
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    dni?: StringNullableWithAggregatesFilter<"User"> | string | null
    birthDate?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type GameWhereInput = {
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    id?: StringFilter<"Game"> | string
    title?: StringFilter<"Game"> | string
    description?: StringNullableFilter<"Game"> | string | null
    maxPlayers?: IntFilter<"Game"> | number
    cardPrice?: DecimalFilter<"Game"> | Decimal | DecimalJsLike | number | string
    totalPrize?: DecimalFilter<"Game"> | Decimal | DecimalJsLike | number | string
    status?: StringFilter<"Game"> | string
    scheduledAt?: DateTimeFilter<"Game"> | Date | string
    startedAt?: DateTimeNullableFilter<"Game"> | Date | string | null
    endedAt?: DateTimeNullableFilter<"Game"> | Date | string | null
    ballsDrawn?: StringFilter<"Game"> | string
    currentBall?: IntNullableFilter<"Game"> | number | null
    winningCards?: StringFilter<"Game"> | string
    createdAt?: DateTimeFilter<"Game"> | Date | string
    updatedAt?: DateTimeFilter<"Game"> | Date | string
    participants?: GameParticipantListRelationFilter
    bingoCards?: BingoCardListRelationFilter
  }

  export type GameOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    maxPlayers?: SortOrder
    cardPrice?: SortOrder
    totalPrize?: SortOrder
    status?: SortOrder
    scheduledAt?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    endedAt?: SortOrderInput | SortOrder
    ballsDrawn?: SortOrder
    currentBall?: SortOrderInput | SortOrder
    winningCards?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    participants?: GameParticipantOrderByRelationAggregateInput
    bingoCards?: BingoCardOrderByRelationAggregateInput
  }

  export type GameWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    title?: StringFilter<"Game"> | string
    description?: StringNullableFilter<"Game"> | string | null
    maxPlayers?: IntFilter<"Game"> | number
    cardPrice?: DecimalFilter<"Game"> | Decimal | DecimalJsLike | number | string
    totalPrize?: DecimalFilter<"Game"> | Decimal | DecimalJsLike | number | string
    status?: StringFilter<"Game"> | string
    scheduledAt?: DateTimeFilter<"Game"> | Date | string
    startedAt?: DateTimeNullableFilter<"Game"> | Date | string | null
    endedAt?: DateTimeNullableFilter<"Game"> | Date | string | null
    ballsDrawn?: StringFilter<"Game"> | string
    currentBall?: IntNullableFilter<"Game"> | number | null
    winningCards?: StringFilter<"Game"> | string
    createdAt?: DateTimeFilter<"Game"> | Date | string
    updatedAt?: DateTimeFilter<"Game"> | Date | string
    participants?: GameParticipantListRelationFilter
    bingoCards?: BingoCardListRelationFilter
  }, "id">

  export type GameOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    maxPlayers?: SortOrder
    cardPrice?: SortOrder
    totalPrize?: SortOrder
    status?: SortOrder
    scheduledAt?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    endedAt?: SortOrderInput | SortOrder
    ballsDrawn?: SortOrder
    currentBall?: SortOrderInput | SortOrder
    winningCards?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GameCountOrderByAggregateInput
    _avg?: GameAvgOrderByAggregateInput
    _max?: GameMaxOrderByAggregateInput
    _min?: GameMinOrderByAggregateInput
    _sum?: GameSumOrderByAggregateInput
  }

  export type GameScalarWhereWithAggregatesInput = {
    AND?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    OR?: GameScalarWhereWithAggregatesInput[]
    NOT?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Game"> | string
    title?: StringWithAggregatesFilter<"Game"> | string
    description?: StringNullableWithAggregatesFilter<"Game"> | string | null
    maxPlayers?: IntWithAggregatesFilter<"Game"> | number
    cardPrice?: DecimalWithAggregatesFilter<"Game"> | Decimal | DecimalJsLike | number | string
    totalPrize?: DecimalWithAggregatesFilter<"Game"> | Decimal | DecimalJsLike | number | string
    status?: StringWithAggregatesFilter<"Game"> | string
    scheduledAt?: DateTimeWithAggregatesFilter<"Game"> | Date | string
    startedAt?: DateTimeNullableWithAggregatesFilter<"Game"> | Date | string | null
    endedAt?: DateTimeNullableWithAggregatesFilter<"Game"> | Date | string | null
    ballsDrawn?: StringWithAggregatesFilter<"Game"> | string
    currentBall?: IntNullableWithAggregatesFilter<"Game"> | number | null
    winningCards?: StringWithAggregatesFilter<"Game"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Game"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Game"> | Date | string
  }

  export type GameParticipantWhereInput = {
    AND?: GameParticipantWhereInput | GameParticipantWhereInput[]
    OR?: GameParticipantWhereInput[]
    NOT?: GameParticipantWhereInput | GameParticipantWhereInput[]
    id?: StringFilter<"GameParticipant"> | string
    userId?: StringFilter<"GameParticipant"> | string
    gameId?: StringFilter<"GameParticipant"> | string
    joinedAt?: DateTimeFilter<"GameParticipant"> | Date | string
    cardsCount?: IntFilter<"GameParticipant"> | number
    totalSpent?: DecimalFilter<"GameParticipant"> | Decimal | DecimalJsLike | number | string
    hasWon?: BoolFilter<"GameParticipant"> | boolean
    prizeWon?: DecimalFilter<"GameParticipant"> | Decimal | DecimalJsLike | number | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    game?: XOR<GameRelationFilter, GameWhereInput>
  }

  export type GameParticipantOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    joinedAt?: SortOrder
    cardsCount?: SortOrder
    totalSpent?: SortOrder
    hasWon?: SortOrder
    prizeWon?: SortOrder
    user?: UserOrderByWithRelationInput
    game?: GameOrderByWithRelationInput
  }

  export type GameParticipantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_gameId?: GameParticipantUserIdGameIdCompoundUniqueInput
    AND?: GameParticipantWhereInput | GameParticipantWhereInput[]
    OR?: GameParticipantWhereInput[]
    NOT?: GameParticipantWhereInput | GameParticipantWhereInput[]
    userId?: StringFilter<"GameParticipant"> | string
    gameId?: StringFilter<"GameParticipant"> | string
    joinedAt?: DateTimeFilter<"GameParticipant"> | Date | string
    cardsCount?: IntFilter<"GameParticipant"> | number
    totalSpent?: DecimalFilter<"GameParticipant"> | Decimal | DecimalJsLike | number | string
    hasWon?: BoolFilter<"GameParticipant"> | boolean
    prizeWon?: DecimalFilter<"GameParticipant"> | Decimal | DecimalJsLike | number | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    game?: XOR<GameRelationFilter, GameWhereInput>
  }, "id" | "userId_gameId">

  export type GameParticipantOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    joinedAt?: SortOrder
    cardsCount?: SortOrder
    totalSpent?: SortOrder
    hasWon?: SortOrder
    prizeWon?: SortOrder
    _count?: GameParticipantCountOrderByAggregateInput
    _avg?: GameParticipantAvgOrderByAggregateInput
    _max?: GameParticipantMaxOrderByAggregateInput
    _min?: GameParticipantMinOrderByAggregateInput
    _sum?: GameParticipantSumOrderByAggregateInput
  }

  export type GameParticipantScalarWhereWithAggregatesInput = {
    AND?: GameParticipantScalarWhereWithAggregatesInput | GameParticipantScalarWhereWithAggregatesInput[]
    OR?: GameParticipantScalarWhereWithAggregatesInput[]
    NOT?: GameParticipantScalarWhereWithAggregatesInput | GameParticipantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GameParticipant"> | string
    userId?: StringWithAggregatesFilter<"GameParticipant"> | string
    gameId?: StringWithAggregatesFilter<"GameParticipant"> | string
    joinedAt?: DateTimeWithAggregatesFilter<"GameParticipant"> | Date | string
    cardsCount?: IntWithAggregatesFilter<"GameParticipant"> | number
    totalSpent?: DecimalWithAggregatesFilter<"GameParticipant"> | Decimal | DecimalJsLike | number | string
    hasWon?: BoolWithAggregatesFilter<"GameParticipant"> | boolean
    prizeWon?: DecimalWithAggregatesFilter<"GameParticipant"> | Decimal | DecimalJsLike | number | string
  }

  export type BingoCardWhereInput = {
    AND?: BingoCardWhereInput | BingoCardWhereInput[]
    OR?: BingoCardWhereInput[]
    NOT?: BingoCardWhereInput | BingoCardWhereInput[]
    id?: StringFilter<"BingoCard"> | string
    userId?: StringFilter<"BingoCard"> | string
    gameId?: StringFilter<"BingoCard"> | string
    cardNumber?: IntFilter<"BingoCard"> | number
    isActive?: BoolFilter<"BingoCard"> | boolean
    markedNumbers?: StringFilter<"BingoCard"> | string
    isWinner?: BoolFilter<"BingoCard"> | boolean
    winningPattern?: StringNullableFilter<"BingoCard"> | string | null
    createdAt?: DateTimeFilter<"BingoCard"> | Date | string
    updatedAt?: DateTimeFilter<"BingoCard"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    game?: XOR<GameRelationFilter, GameWhereInput>
    numbers?: CardNumberListRelationFilter
  }

  export type BingoCardOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    cardNumber?: SortOrder
    isActive?: SortOrder
    markedNumbers?: SortOrder
    isWinner?: SortOrder
    winningPattern?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    game?: GameOrderByWithRelationInput
    numbers?: CardNumberOrderByRelationAggregateInput
  }

  export type BingoCardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    gameId_cardNumber?: BingoCardGameIdCardNumberCompoundUniqueInput
    AND?: BingoCardWhereInput | BingoCardWhereInput[]
    OR?: BingoCardWhereInput[]
    NOT?: BingoCardWhereInput | BingoCardWhereInput[]
    userId?: StringFilter<"BingoCard"> | string
    gameId?: StringFilter<"BingoCard"> | string
    cardNumber?: IntFilter<"BingoCard"> | number
    isActive?: BoolFilter<"BingoCard"> | boolean
    markedNumbers?: StringFilter<"BingoCard"> | string
    isWinner?: BoolFilter<"BingoCard"> | boolean
    winningPattern?: StringNullableFilter<"BingoCard"> | string | null
    createdAt?: DateTimeFilter<"BingoCard"> | Date | string
    updatedAt?: DateTimeFilter<"BingoCard"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    game?: XOR<GameRelationFilter, GameWhereInput>
    numbers?: CardNumberListRelationFilter
  }, "id" | "gameId_cardNumber">

  export type BingoCardOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    cardNumber?: SortOrder
    isActive?: SortOrder
    markedNumbers?: SortOrder
    isWinner?: SortOrder
    winningPattern?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BingoCardCountOrderByAggregateInput
    _avg?: BingoCardAvgOrderByAggregateInput
    _max?: BingoCardMaxOrderByAggregateInput
    _min?: BingoCardMinOrderByAggregateInput
    _sum?: BingoCardSumOrderByAggregateInput
  }

  export type BingoCardScalarWhereWithAggregatesInput = {
    AND?: BingoCardScalarWhereWithAggregatesInput | BingoCardScalarWhereWithAggregatesInput[]
    OR?: BingoCardScalarWhereWithAggregatesInput[]
    NOT?: BingoCardScalarWhereWithAggregatesInput | BingoCardScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BingoCard"> | string
    userId?: StringWithAggregatesFilter<"BingoCard"> | string
    gameId?: StringWithAggregatesFilter<"BingoCard"> | string
    cardNumber?: IntWithAggregatesFilter<"BingoCard"> | number
    isActive?: BoolWithAggregatesFilter<"BingoCard"> | boolean
    markedNumbers?: StringWithAggregatesFilter<"BingoCard"> | string
    isWinner?: BoolWithAggregatesFilter<"BingoCard"> | boolean
    winningPattern?: StringNullableWithAggregatesFilter<"BingoCard"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"BingoCard"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BingoCard"> | Date | string
  }

  export type CardNumberWhereInput = {
    AND?: CardNumberWhereInput | CardNumberWhereInput[]
    OR?: CardNumberWhereInput[]
    NOT?: CardNumberWhereInput | CardNumberWhereInput[]
    id?: StringFilter<"CardNumber"> | string
    cardId?: StringFilter<"CardNumber"> | string
    position?: IntFilter<"CardNumber"> | number
    column?: StringFilter<"CardNumber"> | string
    number?: IntNullableFilter<"CardNumber"> | number | null
    isMarked?: BoolFilter<"CardNumber"> | boolean
    isFree?: BoolFilter<"CardNumber"> | boolean
    card?: XOR<BingoCardRelationFilter, BingoCardWhereInput>
  }

  export type CardNumberOrderByWithRelationInput = {
    id?: SortOrder
    cardId?: SortOrder
    position?: SortOrder
    column?: SortOrder
    number?: SortOrderInput | SortOrder
    isMarked?: SortOrder
    isFree?: SortOrder
    card?: BingoCardOrderByWithRelationInput
  }

  export type CardNumberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    cardId_position?: CardNumberCardIdPositionCompoundUniqueInput
    AND?: CardNumberWhereInput | CardNumberWhereInput[]
    OR?: CardNumberWhereInput[]
    NOT?: CardNumberWhereInput | CardNumberWhereInput[]
    cardId?: StringFilter<"CardNumber"> | string
    position?: IntFilter<"CardNumber"> | number
    column?: StringFilter<"CardNumber"> | string
    number?: IntNullableFilter<"CardNumber"> | number | null
    isMarked?: BoolFilter<"CardNumber"> | boolean
    isFree?: BoolFilter<"CardNumber"> | boolean
    card?: XOR<BingoCardRelationFilter, BingoCardWhereInput>
  }, "id" | "cardId_position">

  export type CardNumberOrderByWithAggregationInput = {
    id?: SortOrder
    cardId?: SortOrder
    position?: SortOrder
    column?: SortOrder
    number?: SortOrderInput | SortOrder
    isMarked?: SortOrder
    isFree?: SortOrder
    _count?: CardNumberCountOrderByAggregateInput
    _avg?: CardNumberAvgOrderByAggregateInput
    _max?: CardNumberMaxOrderByAggregateInput
    _min?: CardNumberMinOrderByAggregateInput
    _sum?: CardNumberSumOrderByAggregateInput
  }

  export type CardNumberScalarWhereWithAggregatesInput = {
    AND?: CardNumberScalarWhereWithAggregatesInput | CardNumberScalarWhereWithAggregatesInput[]
    OR?: CardNumberScalarWhereWithAggregatesInput[]
    NOT?: CardNumberScalarWhereWithAggregatesInput | CardNumberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CardNumber"> | string
    cardId?: StringWithAggregatesFilter<"CardNumber"> | string
    position?: IntWithAggregatesFilter<"CardNumber"> | number
    column?: StringWithAggregatesFilter<"CardNumber"> | string
    number?: IntNullableWithAggregatesFilter<"CardNumber"> | number | null
    isMarked?: BoolWithAggregatesFilter<"CardNumber"> | boolean
    isFree?: BoolWithAggregatesFilter<"CardNumber"> | boolean
  }

  export type TransactionWhereInput = {
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    id?: StringFilter<"Transaction"> | string
    userId?: StringFilter<"Transaction"> | string
    gameId?: StringNullableFilter<"Transaction"> | string | null
    type?: StringFilter<"Transaction"> | string
    amount?: DecimalFilter<"Transaction"> | Decimal | DecimalJsLike | number | string
    description?: StringFilter<"Transaction"> | string
    status?: StringFilter<"Transaction"> | string
    paymentMethod?: StringNullableFilter<"Transaction"> | string | null
    paymentId?: StringNullableFilter<"Transaction"> | string | null
    pearlsAmount?: DecimalNullableFilter<"Transaction"> | Decimal | DecimalJsLike | number | string | null
    fromUserId?: StringNullableFilter<"Transaction"> | string | null
    toUserId?: StringNullableFilter<"Transaction"> | string | null
    commissionAmount?: DecimalNullableFilter<"Transaction"> | Decimal | DecimalJsLike | number | string | null
    referenceId?: StringNullableFilter<"Transaction"> | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    fromUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    toUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type TransactionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    gameId?: SortOrderInput | SortOrder
    type?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrderInput | SortOrder
    paymentId?: SortOrderInput | SortOrder
    pearlsAmount?: SortOrderInput | SortOrder
    fromUserId?: SortOrderInput | SortOrder
    toUserId?: SortOrderInput | SortOrder
    commissionAmount?: SortOrderInput | SortOrder
    referenceId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    fromUser?: UserOrderByWithRelationInput
    toUser?: UserOrderByWithRelationInput
  }

  export type TransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    userId?: StringFilter<"Transaction"> | string
    gameId?: StringNullableFilter<"Transaction"> | string | null
    type?: StringFilter<"Transaction"> | string
    amount?: DecimalFilter<"Transaction"> | Decimal | DecimalJsLike | number | string
    description?: StringFilter<"Transaction"> | string
    status?: StringFilter<"Transaction"> | string
    paymentMethod?: StringNullableFilter<"Transaction"> | string | null
    paymentId?: StringNullableFilter<"Transaction"> | string | null
    pearlsAmount?: DecimalNullableFilter<"Transaction"> | Decimal | DecimalJsLike | number | string | null
    fromUserId?: StringNullableFilter<"Transaction"> | string | null
    toUserId?: StringNullableFilter<"Transaction"> | string | null
    commissionAmount?: DecimalNullableFilter<"Transaction"> | Decimal | DecimalJsLike | number | string | null
    referenceId?: StringNullableFilter<"Transaction"> | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    fromUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    toUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type TransactionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    gameId?: SortOrderInput | SortOrder
    type?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrderInput | SortOrder
    paymentId?: SortOrderInput | SortOrder
    pearlsAmount?: SortOrderInput | SortOrder
    fromUserId?: SortOrderInput | SortOrder
    toUserId?: SortOrderInput | SortOrder
    commissionAmount?: SortOrderInput | SortOrder
    referenceId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _avg?: TransactionAvgOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
    _sum?: TransactionSumOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    OR?: TransactionScalarWhereWithAggregatesInput[]
    NOT?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Transaction"> | string
    userId?: StringWithAggregatesFilter<"Transaction"> | string
    gameId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    type?: StringWithAggregatesFilter<"Transaction"> | string
    amount?: DecimalWithAggregatesFilter<"Transaction"> | Decimal | DecimalJsLike | number | string
    description?: StringWithAggregatesFilter<"Transaction"> | string
    status?: StringWithAggregatesFilter<"Transaction"> | string
    paymentMethod?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    paymentId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    pearlsAmount?: DecimalNullableWithAggregatesFilter<"Transaction"> | Decimal | DecimalJsLike | number | string | null
    fromUserId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    toUserId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    commissionAmount?: DecimalNullableWithAggregatesFilter<"Transaction"> | Decimal | DecimalJsLike | number | string | null
    referenceId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
  }

  export type WalletWhereInput = {
    AND?: WalletWhereInput | WalletWhereInput[]
    OR?: WalletWhereInput[]
    NOT?: WalletWhereInput | WalletWhereInput[]
    id?: StringFilter<"Wallet"> | string
    userId?: StringFilter<"Wallet"> | string
    balance?: DecimalFilter<"Wallet"> | Decimal | DecimalJsLike | number | string
    dailyLimit?: DecimalFilter<"Wallet"> | Decimal | DecimalJsLike | number | string
    monthlyLimit?: DecimalFilter<"Wallet"> | Decimal | DecimalJsLike | number | string
    isActive?: BoolFilter<"Wallet"> | boolean
    isFrozen?: BoolFilter<"Wallet"> | boolean
    createdAt?: DateTimeFilter<"Wallet"> | Date | string
    updatedAt?: DateTimeFilter<"Wallet"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type WalletOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    balance?: SortOrder
    dailyLimit?: SortOrder
    monthlyLimit?: SortOrder
    isActive?: SortOrder
    isFrozen?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type WalletWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: WalletWhereInput | WalletWhereInput[]
    OR?: WalletWhereInput[]
    NOT?: WalletWhereInput | WalletWhereInput[]
    balance?: DecimalFilter<"Wallet"> | Decimal | DecimalJsLike | number | string
    dailyLimit?: DecimalFilter<"Wallet"> | Decimal | DecimalJsLike | number | string
    monthlyLimit?: DecimalFilter<"Wallet"> | Decimal | DecimalJsLike | number | string
    isActive?: BoolFilter<"Wallet"> | boolean
    isFrozen?: BoolFilter<"Wallet"> | boolean
    createdAt?: DateTimeFilter<"Wallet"> | Date | string
    updatedAt?: DateTimeFilter<"Wallet"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type WalletOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    balance?: SortOrder
    dailyLimit?: SortOrder
    monthlyLimit?: SortOrder
    isActive?: SortOrder
    isFrozen?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WalletCountOrderByAggregateInput
    _avg?: WalletAvgOrderByAggregateInput
    _max?: WalletMaxOrderByAggregateInput
    _min?: WalletMinOrderByAggregateInput
    _sum?: WalletSumOrderByAggregateInput
  }

  export type WalletScalarWhereWithAggregatesInput = {
    AND?: WalletScalarWhereWithAggregatesInput | WalletScalarWhereWithAggregatesInput[]
    OR?: WalletScalarWhereWithAggregatesInput[]
    NOT?: WalletScalarWhereWithAggregatesInput | WalletScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Wallet"> | string
    userId?: StringWithAggregatesFilter<"Wallet"> | string
    balance?: DecimalWithAggregatesFilter<"Wallet"> | Decimal | DecimalJsLike | number | string
    dailyLimit?: DecimalWithAggregatesFilter<"Wallet"> | Decimal | DecimalJsLike | number | string
    monthlyLimit?: DecimalWithAggregatesFilter<"Wallet"> | Decimal | DecimalJsLike | number | string
    isActive?: BoolWithAggregatesFilter<"Wallet"> | boolean
    isFrozen?: BoolWithAggregatesFilter<"Wallet"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Wallet"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Wallet"> | Date | string
  }

  export type DepositRequestWhereInput = {
    AND?: DepositRequestWhereInput | DepositRequestWhereInput[]
    OR?: DepositRequestWhereInput[]
    NOT?: DepositRequestWhereInput | DepositRequestWhereInput[]
    id?: StringFilter<"DepositRequest"> | string
    userId?: StringFilter<"DepositRequest"> | string
    amount?: DecimalFilter<"DepositRequest"> | Decimal | DecimalJsLike | number | string
    pearlsAmount?: DecimalFilter<"DepositRequest"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"DepositRequest"> | string
    paymentMethod?: StringFilter<"DepositRequest"> | string
    referenceCode?: StringFilter<"DepositRequest"> | string
    bankReference?: StringNullableFilter<"DepositRequest"> | string | null
    bankAccount?: StringNullableFilter<"DepositRequest"> | string | null
    bankAccountName?: StringNullableFilter<"DepositRequest"> | string | null
    status?: StringFilter<"DepositRequest"> | string
    adminNotes?: StringNullableFilter<"DepositRequest"> | string | null
    validatedBy?: StringNullableFilter<"DepositRequest"> | string | null
    validatedAt?: DateTimeNullableFilter<"DepositRequest"> | Date | string | null
    proofImage?: StringNullableFilter<"DepositRequest"> | string | null
    proofImageAdmin?: StringNullableFilter<"DepositRequest"> | string | null
    transactionId?: StringNullableFilter<"DepositRequest"> | string | null
    integrationMethod?: StringFilter<"DepositRequest"> | string
    openpayTransactionId?: StringNullableFilter<"DepositRequest"> | string | null
    autoApprovalEligible?: BoolFilter<"DepositRequest"> | boolean
    processingFee?: FloatFilter<"DepositRequest"> | number
    createdAt?: DateTimeFilter<"DepositRequest"> | Date | string
    updatedAt?: DateTimeFilter<"DepositRequest"> | Date | string
    expiresAt?: DateTimeFilter<"DepositRequest"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    openpayTransactions?: OpenpayTransactionListRelationFilter
  }

  export type DepositRequestOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    pearlsAmount?: SortOrder
    currency?: SortOrder
    paymentMethod?: SortOrder
    referenceCode?: SortOrder
    bankReference?: SortOrderInput | SortOrder
    bankAccount?: SortOrderInput | SortOrder
    bankAccountName?: SortOrderInput | SortOrder
    status?: SortOrder
    adminNotes?: SortOrderInput | SortOrder
    validatedBy?: SortOrderInput | SortOrder
    validatedAt?: SortOrderInput | SortOrder
    proofImage?: SortOrderInput | SortOrder
    proofImageAdmin?: SortOrderInput | SortOrder
    transactionId?: SortOrderInput | SortOrder
    integrationMethod?: SortOrder
    openpayTransactionId?: SortOrderInput | SortOrder
    autoApprovalEligible?: SortOrder
    processingFee?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrder
    user?: UserOrderByWithRelationInput
    openpayTransactions?: OpenpayTransactionOrderByRelationAggregateInput
  }

  export type DepositRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    referenceCode?: string
    AND?: DepositRequestWhereInput | DepositRequestWhereInput[]
    OR?: DepositRequestWhereInput[]
    NOT?: DepositRequestWhereInput | DepositRequestWhereInput[]
    userId?: StringFilter<"DepositRequest"> | string
    amount?: DecimalFilter<"DepositRequest"> | Decimal | DecimalJsLike | number | string
    pearlsAmount?: DecimalFilter<"DepositRequest"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"DepositRequest"> | string
    paymentMethod?: StringFilter<"DepositRequest"> | string
    bankReference?: StringNullableFilter<"DepositRequest"> | string | null
    bankAccount?: StringNullableFilter<"DepositRequest"> | string | null
    bankAccountName?: StringNullableFilter<"DepositRequest"> | string | null
    status?: StringFilter<"DepositRequest"> | string
    adminNotes?: StringNullableFilter<"DepositRequest"> | string | null
    validatedBy?: StringNullableFilter<"DepositRequest"> | string | null
    validatedAt?: DateTimeNullableFilter<"DepositRequest"> | Date | string | null
    proofImage?: StringNullableFilter<"DepositRequest"> | string | null
    proofImageAdmin?: StringNullableFilter<"DepositRequest"> | string | null
    transactionId?: StringNullableFilter<"DepositRequest"> | string | null
    integrationMethod?: StringFilter<"DepositRequest"> | string
    openpayTransactionId?: StringNullableFilter<"DepositRequest"> | string | null
    autoApprovalEligible?: BoolFilter<"DepositRequest"> | boolean
    processingFee?: FloatFilter<"DepositRequest"> | number
    createdAt?: DateTimeFilter<"DepositRequest"> | Date | string
    updatedAt?: DateTimeFilter<"DepositRequest"> | Date | string
    expiresAt?: DateTimeFilter<"DepositRequest"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    openpayTransactions?: OpenpayTransactionListRelationFilter
  }, "id" | "referenceCode">

  export type DepositRequestOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    pearlsAmount?: SortOrder
    currency?: SortOrder
    paymentMethod?: SortOrder
    referenceCode?: SortOrder
    bankReference?: SortOrderInput | SortOrder
    bankAccount?: SortOrderInput | SortOrder
    bankAccountName?: SortOrderInput | SortOrder
    status?: SortOrder
    adminNotes?: SortOrderInput | SortOrder
    validatedBy?: SortOrderInput | SortOrder
    validatedAt?: SortOrderInput | SortOrder
    proofImage?: SortOrderInput | SortOrder
    proofImageAdmin?: SortOrderInput | SortOrder
    transactionId?: SortOrderInput | SortOrder
    integrationMethod?: SortOrder
    openpayTransactionId?: SortOrderInput | SortOrder
    autoApprovalEligible?: SortOrder
    processingFee?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrder
    _count?: DepositRequestCountOrderByAggregateInput
    _avg?: DepositRequestAvgOrderByAggregateInput
    _max?: DepositRequestMaxOrderByAggregateInput
    _min?: DepositRequestMinOrderByAggregateInput
    _sum?: DepositRequestSumOrderByAggregateInput
  }

  export type DepositRequestScalarWhereWithAggregatesInput = {
    AND?: DepositRequestScalarWhereWithAggregatesInput | DepositRequestScalarWhereWithAggregatesInput[]
    OR?: DepositRequestScalarWhereWithAggregatesInput[]
    NOT?: DepositRequestScalarWhereWithAggregatesInput | DepositRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DepositRequest"> | string
    userId?: StringWithAggregatesFilter<"DepositRequest"> | string
    amount?: DecimalWithAggregatesFilter<"DepositRequest"> | Decimal | DecimalJsLike | number | string
    pearlsAmount?: DecimalWithAggregatesFilter<"DepositRequest"> | Decimal | DecimalJsLike | number | string
    currency?: StringWithAggregatesFilter<"DepositRequest"> | string
    paymentMethod?: StringWithAggregatesFilter<"DepositRequest"> | string
    referenceCode?: StringWithAggregatesFilter<"DepositRequest"> | string
    bankReference?: StringNullableWithAggregatesFilter<"DepositRequest"> | string | null
    bankAccount?: StringNullableWithAggregatesFilter<"DepositRequest"> | string | null
    bankAccountName?: StringNullableWithAggregatesFilter<"DepositRequest"> | string | null
    status?: StringWithAggregatesFilter<"DepositRequest"> | string
    adminNotes?: StringNullableWithAggregatesFilter<"DepositRequest"> | string | null
    validatedBy?: StringNullableWithAggregatesFilter<"DepositRequest"> | string | null
    validatedAt?: DateTimeNullableWithAggregatesFilter<"DepositRequest"> | Date | string | null
    proofImage?: StringNullableWithAggregatesFilter<"DepositRequest"> | string | null
    proofImageAdmin?: StringNullableWithAggregatesFilter<"DepositRequest"> | string | null
    transactionId?: StringNullableWithAggregatesFilter<"DepositRequest"> | string | null
    integrationMethod?: StringWithAggregatesFilter<"DepositRequest"> | string
    openpayTransactionId?: StringNullableWithAggregatesFilter<"DepositRequest"> | string | null
    autoApprovalEligible?: BoolWithAggregatesFilter<"DepositRequest"> | boolean
    processingFee?: FloatWithAggregatesFilter<"DepositRequest"> | number
    createdAt?: DateTimeWithAggregatesFilter<"DepositRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DepositRequest"> | Date | string
    expiresAt?: DateTimeWithAggregatesFilter<"DepositRequest"> | Date | string
  }

  export type WithdrawalRequestWhereInput = {
    AND?: WithdrawalRequestWhereInput | WithdrawalRequestWhereInput[]
    OR?: WithdrawalRequestWhereInput[]
    NOT?: WithdrawalRequestWhereInput | WithdrawalRequestWhereInput[]
    id?: StringFilter<"WithdrawalRequest"> | string
    userId?: StringFilter<"WithdrawalRequest"> | string
    pearlsAmount?: DecimalFilter<"WithdrawalRequest"> | Decimal | DecimalJsLike | number | string
    amountInSoles?: DecimalFilter<"WithdrawalRequest"> | Decimal | DecimalJsLike | number | string
    commission?: DecimalFilter<"WithdrawalRequest"> | Decimal | DecimalJsLike | number | string
    netAmount?: DecimalFilter<"WithdrawalRequest"> | Decimal | DecimalJsLike | number | string
    bankCode?: StringFilter<"WithdrawalRequest"> | string
    accountNumber?: StringFilter<"WithdrawalRequest"> | string
    accountType?: StringFilter<"WithdrawalRequest"> | string
    accountHolderName?: StringFilter<"WithdrawalRequest"> | string
    accountHolderDni?: StringFilter<"WithdrawalRequest"> | string
    status?: StringFilter<"WithdrawalRequest"> | string
    adminNotes?: StringNullableFilter<"WithdrawalRequest"> | string | null
    processedBy?: StringNullableFilter<"WithdrawalRequest"> | string | null
    processedAt?: DateTimeNullableFilter<"WithdrawalRequest"> | Date | string | null
    bankTransactionId?: StringNullableFilter<"WithdrawalRequest"> | string | null
    transferProof?: StringNullableFilter<"WithdrawalRequest"> | string | null
    referenceCode?: StringFilter<"WithdrawalRequest"> | string
    transactionId?: StringNullableFilter<"WithdrawalRequest"> | string | null
    createdAt?: DateTimeFilter<"WithdrawalRequest"> | Date | string
    updatedAt?: DateTimeFilter<"WithdrawalRequest"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type WithdrawalRequestOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    pearlsAmount?: SortOrder
    amountInSoles?: SortOrder
    commission?: SortOrder
    netAmount?: SortOrder
    bankCode?: SortOrder
    accountNumber?: SortOrder
    accountType?: SortOrder
    accountHolderName?: SortOrder
    accountHolderDni?: SortOrder
    status?: SortOrder
    adminNotes?: SortOrderInput | SortOrder
    processedBy?: SortOrderInput | SortOrder
    processedAt?: SortOrderInput | SortOrder
    bankTransactionId?: SortOrderInput | SortOrder
    transferProof?: SortOrderInput | SortOrder
    referenceCode?: SortOrder
    transactionId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type WithdrawalRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    referenceCode?: string
    AND?: WithdrawalRequestWhereInput | WithdrawalRequestWhereInput[]
    OR?: WithdrawalRequestWhereInput[]
    NOT?: WithdrawalRequestWhereInput | WithdrawalRequestWhereInput[]
    userId?: StringFilter<"WithdrawalRequest"> | string
    pearlsAmount?: DecimalFilter<"WithdrawalRequest"> | Decimal | DecimalJsLike | number | string
    amountInSoles?: DecimalFilter<"WithdrawalRequest"> | Decimal | DecimalJsLike | number | string
    commission?: DecimalFilter<"WithdrawalRequest"> | Decimal | DecimalJsLike | number | string
    netAmount?: DecimalFilter<"WithdrawalRequest"> | Decimal | DecimalJsLike | number | string
    bankCode?: StringFilter<"WithdrawalRequest"> | string
    accountNumber?: StringFilter<"WithdrawalRequest"> | string
    accountType?: StringFilter<"WithdrawalRequest"> | string
    accountHolderName?: StringFilter<"WithdrawalRequest"> | string
    accountHolderDni?: StringFilter<"WithdrawalRequest"> | string
    status?: StringFilter<"WithdrawalRequest"> | string
    adminNotes?: StringNullableFilter<"WithdrawalRequest"> | string | null
    processedBy?: StringNullableFilter<"WithdrawalRequest"> | string | null
    processedAt?: DateTimeNullableFilter<"WithdrawalRequest"> | Date | string | null
    bankTransactionId?: StringNullableFilter<"WithdrawalRequest"> | string | null
    transferProof?: StringNullableFilter<"WithdrawalRequest"> | string | null
    transactionId?: StringNullableFilter<"WithdrawalRequest"> | string | null
    createdAt?: DateTimeFilter<"WithdrawalRequest"> | Date | string
    updatedAt?: DateTimeFilter<"WithdrawalRequest"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "referenceCode">

  export type WithdrawalRequestOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    pearlsAmount?: SortOrder
    amountInSoles?: SortOrder
    commission?: SortOrder
    netAmount?: SortOrder
    bankCode?: SortOrder
    accountNumber?: SortOrder
    accountType?: SortOrder
    accountHolderName?: SortOrder
    accountHolderDni?: SortOrder
    status?: SortOrder
    adminNotes?: SortOrderInput | SortOrder
    processedBy?: SortOrderInput | SortOrder
    processedAt?: SortOrderInput | SortOrder
    bankTransactionId?: SortOrderInput | SortOrder
    transferProof?: SortOrderInput | SortOrder
    referenceCode?: SortOrder
    transactionId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WithdrawalRequestCountOrderByAggregateInput
    _avg?: WithdrawalRequestAvgOrderByAggregateInput
    _max?: WithdrawalRequestMaxOrderByAggregateInput
    _min?: WithdrawalRequestMinOrderByAggregateInput
    _sum?: WithdrawalRequestSumOrderByAggregateInput
  }

  export type WithdrawalRequestScalarWhereWithAggregatesInput = {
    AND?: WithdrawalRequestScalarWhereWithAggregatesInput | WithdrawalRequestScalarWhereWithAggregatesInput[]
    OR?: WithdrawalRequestScalarWhereWithAggregatesInput[]
    NOT?: WithdrawalRequestScalarWhereWithAggregatesInput | WithdrawalRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WithdrawalRequest"> | string
    userId?: StringWithAggregatesFilter<"WithdrawalRequest"> | string
    pearlsAmount?: DecimalWithAggregatesFilter<"WithdrawalRequest"> | Decimal | DecimalJsLike | number | string
    amountInSoles?: DecimalWithAggregatesFilter<"WithdrawalRequest"> | Decimal | DecimalJsLike | number | string
    commission?: DecimalWithAggregatesFilter<"WithdrawalRequest"> | Decimal | DecimalJsLike | number | string
    netAmount?: DecimalWithAggregatesFilter<"WithdrawalRequest"> | Decimal | DecimalJsLike | number | string
    bankCode?: StringWithAggregatesFilter<"WithdrawalRequest"> | string
    accountNumber?: StringWithAggregatesFilter<"WithdrawalRequest"> | string
    accountType?: StringWithAggregatesFilter<"WithdrawalRequest"> | string
    accountHolderName?: StringWithAggregatesFilter<"WithdrawalRequest"> | string
    accountHolderDni?: StringWithAggregatesFilter<"WithdrawalRequest"> | string
    status?: StringWithAggregatesFilter<"WithdrawalRequest"> | string
    adminNotes?: StringNullableWithAggregatesFilter<"WithdrawalRequest"> | string | null
    processedBy?: StringNullableWithAggregatesFilter<"WithdrawalRequest"> | string | null
    processedAt?: DateTimeNullableWithAggregatesFilter<"WithdrawalRequest"> | Date | string | null
    bankTransactionId?: StringNullableWithAggregatesFilter<"WithdrawalRequest"> | string | null
    transferProof?: StringNullableWithAggregatesFilter<"WithdrawalRequest"> | string | null
    referenceCode?: StringWithAggregatesFilter<"WithdrawalRequest"> | string
    transactionId?: StringNullableWithAggregatesFilter<"WithdrawalRequest"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"WithdrawalRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WithdrawalRequest"> | Date | string
  }

  export type PaymentReferenceWhereInput = {
    AND?: PaymentReferenceWhereInput | PaymentReferenceWhereInput[]
    OR?: PaymentReferenceWhereInput[]
    NOT?: PaymentReferenceWhereInput | PaymentReferenceWhereInput[]
    id?: StringFilter<"PaymentReference"> | string
    code?: StringFilter<"PaymentReference"> | string
    type?: StringFilter<"PaymentReference"> | string
    userId?: StringFilter<"PaymentReference"> | string
    amount?: DecimalFilter<"PaymentReference"> | Decimal | DecimalJsLike | number | string
    description?: StringFilter<"PaymentReference"> | string
    metadata?: StringNullableFilter<"PaymentReference"> | string | null
    isUsed?: BoolFilter<"PaymentReference"> | boolean
    usedAt?: DateTimeNullableFilter<"PaymentReference"> | Date | string | null
    createdAt?: DateTimeFilter<"PaymentReference"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentReference"> | Date | string
    expiresAt?: DateTimeFilter<"PaymentReference"> | Date | string
  }

  export type PaymentReferenceOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    metadata?: SortOrderInput | SortOrder
    isUsed?: SortOrder
    usedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type PaymentReferenceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: PaymentReferenceWhereInput | PaymentReferenceWhereInput[]
    OR?: PaymentReferenceWhereInput[]
    NOT?: PaymentReferenceWhereInput | PaymentReferenceWhereInput[]
    type?: StringFilter<"PaymentReference"> | string
    userId?: StringFilter<"PaymentReference"> | string
    amount?: DecimalFilter<"PaymentReference"> | Decimal | DecimalJsLike | number | string
    description?: StringFilter<"PaymentReference"> | string
    metadata?: StringNullableFilter<"PaymentReference"> | string | null
    isUsed?: BoolFilter<"PaymentReference"> | boolean
    usedAt?: DateTimeNullableFilter<"PaymentReference"> | Date | string | null
    createdAt?: DateTimeFilter<"PaymentReference"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentReference"> | Date | string
    expiresAt?: DateTimeFilter<"PaymentReference"> | Date | string
  }, "id" | "code">

  export type PaymentReferenceOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    metadata?: SortOrderInput | SortOrder
    isUsed?: SortOrder
    usedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrder
    _count?: PaymentReferenceCountOrderByAggregateInput
    _avg?: PaymentReferenceAvgOrderByAggregateInput
    _max?: PaymentReferenceMaxOrderByAggregateInput
    _min?: PaymentReferenceMinOrderByAggregateInput
    _sum?: PaymentReferenceSumOrderByAggregateInput
  }

  export type PaymentReferenceScalarWhereWithAggregatesInput = {
    AND?: PaymentReferenceScalarWhereWithAggregatesInput | PaymentReferenceScalarWhereWithAggregatesInput[]
    OR?: PaymentReferenceScalarWhereWithAggregatesInput[]
    NOT?: PaymentReferenceScalarWhereWithAggregatesInput | PaymentReferenceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PaymentReference"> | string
    code?: StringWithAggregatesFilter<"PaymentReference"> | string
    type?: StringWithAggregatesFilter<"PaymentReference"> | string
    userId?: StringWithAggregatesFilter<"PaymentReference"> | string
    amount?: DecimalWithAggregatesFilter<"PaymentReference"> | Decimal | DecimalJsLike | number | string
    description?: StringWithAggregatesFilter<"PaymentReference"> | string
    metadata?: StringNullableWithAggregatesFilter<"PaymentReference"> | string | null
    isUsed?: BoolWithAggregatesFilter<"PaymentReference"> | boolean
    usedAt?: DateTimeNullableWithAggregatesFilter<"PaymentReference"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PaymentReference"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PaymentReference"> | Date | string
    expiresAt?: DateTimeWithAggregatesFilter<"PaymentReference"> | Date | string
  }

  export type BankConfigurationWhereInput = {
    AND?: BankConfigurationWhereInput | BankConfigurationWhereInput[]
    OR?: BankConfigurationWhereInput[]
    NOT?: BankConfigurationWhereInput | BankConfigurationWhereInput[]
    id?: StringFilter<"BankConfiguration"> | string
    bankCode?: StringFilter<"BankConfiguration"> | string
    bankName?: StringFilter<"BankConfiguration"> | string
    accountNumber?: StringFilter<"BankConfiguration"> | string
    accountType?: StringFilter<"BankConfiguration"> | string
    accountHolderName?: StringFilter<"BankConfiguration"> | string
    cci?: StringNullableFilter<"BankConfiguration"> | string | null
    isActive?: BoolFilter<"BankConfiguration"> | boolean
    minDeposit?: DecimalFilter<"BankConfiguration"> | Decimal | DecimalJsLike | number | string
    maxDeposit?: DecimalFilter<"BankConfiguration"> | Decimal | DecimalJsLike | number | string
    depositCommission?: DecimalFilter<"BankConfiguration"> | Decimal | DecimalJsLike | number | string
    instructions?: StringNullableFilter<"BankConfiguration"> | string | null
    createdAt?: DateTimeFilter<"BankConfiguration"> | Date | string
    updatedAt?: DateTimeFilter<"BankConfiguration"> | Date | string
  }

  export type BankConfigurationOrderByWithRelationInput = {
    id?: SortOrder
    bankCode?: SortOrder
    bankName?: SortOrder
    accountNumber?: SortOrder
    accountType?: SortOrder
    accountHolderName?: SortOrder
    cci?: SortOrderInput | SortOrder
    isActive?: SortOrder
    minDeposit?: SortOrder
    maxDeposit?: SortOrder
    depositCommission?: SortOrder
    instructions?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BankConfigurationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    bankCode?: string
    AND?: BankConfigurationWhereInput | BankConfigurationWhereInput[]
    OR?: BankConfigurationWhereInput[]
    NOT?: BankConfigurationWhereInput | BankConfigurationWhereInput[]
    bankName?: StringFilter<"BankConfiguration"> | string
    accountNumber?: StringFilter<"BankConfiguration"> | string
    accountType?: StringFilter<"BankConfiguration"> | string
    accountHolderName?: StringFilter<"BankConfiguration"> | string
    cci?: StringNullableFilter<"BankConfiguration"> | string | null
    isActive?: BoolFilter<"BankConfiguration"> | boolean
    minDeposit?: DecimalFilter<"BankConfiguration"> | Decimal | DecimalJsLike | number | string
    maxDeposit?: DecimalFilter<"BankConfiguration"> | Decimal | DecimalJsLike | number | string
    depositCommission?: DecimalFilter<"BankConfiguration"> | Decimal | DecimalJsLike | number | string
    instructions?: StringNullableFilter<"BankConfiguration"> | string | null
    createdAt?: DateTimeFilter<"BankConfiguration"> | Date | string
    updatedAt?: DateTimeFilter<"BankConfiguration"> | Date | string
  }, "id" | "bankCode">

  export type BankConfigurationOrderByWithAggregationInput = {
    id?: SortOrder
    bankCode?: SortOrder
    bankName?: SortOrder
    accountNumber?: SortOrder
    accountType?: SortOrder
    accountHolderName?: SortOrder
    cci?: SortOrderInput | SortOrder
    isActive?: SortOrder
    minDeposit?: SortOrder
    maxDeposit?: SortOrder
    depositCommission?: SortOrder
    instructions?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BankConfigurationCountOrderByAggregateInput
    _avg?: BankConfigurationAvgOrderByAggregateInput
    _max?: BankConfigurationMaxOrderByAggregateInput
    _min?: BankConfigurationMinOrderByAggregateInput
    _sum?: BankConfigurationSumOrderByAggregateInput
  }

  export type BankConfigurationScalarWhereWithAggregatesInput = {
    AND?: BankConfigurationScalarWhereWithAggregatesInput | BankConfigurationScalarWhereWithAggregatesInput[]
    OR?: BankConfigurationScalarWhereWithAggregatesInput[]
    NOT?: BankConfigurationScalarWhereWithAggregatesInput | BankConfigurationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BankConfiguration"> | string
    bankCode?: StringWithAggregatesFilter<"BankConfiguration"> | string
    bankName?: StringWithAggregatesFilter<"BankConfiguration"> | string
    accountNumber?: StringWithAggregatesFilter<"BankConfiguration"> | string
    accountType?: StringWithAggregatesFilter<"BankConfiguration"> | string
    accountHolderName?: StringWithAggregatesFilter<"BankConfiguration"> | string
    cci?: StringNullableWithAggregatesFilter<"BankConfiguration"> | string | null
    isActive?: BoolWithAggregatesFilter<"BankConfiguration"> | boolean
    minDeposit?: DecimalWithAggregatesFilter<"BankConfiguration"> | Decimal | DecimalJsLike | number | string
    maxDeposit?: DecimalWithAggregatesFilter<"BankConfiguration"> | Decimal | DecimalJsLike | number | string
    depositCommission?: DecimalWithAggregatesFilter<"BankConfiguration"> | Decimal | DecimalJsLike | number | string
    instructions?: StringNullableWithAggregatesFilter<"BankConfiguration"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"BankConfiguration"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BankConfiguration"> | Date | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringNullableFilter<"AuditLog"> | string | null
    adminId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: StringFilter<"AuditLog"> | string
    oldValue?: StringNullableFilter<"AuditLog"> | string | null
    newValue?: StringNullableFilter<"AuditLog"> | string | null
    description?: StringFilter<"AuditLog"> | string
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    sessionId?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    adminId?: SortOrderInput | SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    oldValue?: SortOrderInput | SortOrder
    newValue?: SortOrderInput | SortOrder
    description?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    sessionId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    userId?: StringNullableFilter<"AuditLog"> | string | null
    adminId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: StringFilter<"AuditLog"> | string
    oldValue?: StringNullableFilter<"AuditLog"> | string | null
    newValue?: StringNullableFilter<"AuditLog"> | string | null
    description?: StringFilter<"AuditLog"> | string
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    sessionId?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    adminId?: SortOrderInput | SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    oldValue?: SortOrderInput | SortOrder
    newValue?: SortOrderInput | SortOrder
    description?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    sessionId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    userId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    adminId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    entity?: StringWithAggregatesFilter<"AuditLog"> | string
    entityId?: StringWithAggregatesFilter<"AuditLog"> | string
    oldValue?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    newValue?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    description?: StringWithAggregatesFilter<"AuditLog"> | string
    ipAddress?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    sessionId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type PaymentConfigurationWhereInput = {
    AND?: PaymentConfigurationWhereInput | PaymentConfigurationWhereInput[]
    OR?: PaymentConfigurationWhereInput[]
    NOT?: PaymentConfigurationWhereInput | PaymentConfigurationWhereInput[]
    id?: StringFilter<"PaymentConfiguration"> | string
    p2pTransferEnabled?: BoolFilter<"PaymentConfiguration"> | boolean
    p2pTransferCommission?: DecimalFilter<"PaymentConfiguration"> | Decimal | DecimalJsLike | number | string
    defaultDailyLimit?: DecimalFilter<"PaymentConfiguration"> | Decimal | DecimalJsLike | number | string
    defaultMonthlyLimit?: DecimalFilter<"PaymentConfiguration"> | Decimal | DecimalJsLike | number | string
    depositExpirationHours?: IntFilter<"PaymentConfiguration"> | number
    referenceExpirationHours?: IntFilter<"PaymentConfiguration"> | number
    depositsEnabled?: BoolFilter<"PaymentConfiguration"> | boolean
    withdrawalsEnabled?: BoolFilter<"PaymentConfiguration"> | boolean
    transfersEnabled?: BoolFilter<"PaymentConfiguration"> | boolean
    maintenanceMessage?: StringNullableFilter<"PaymentConfiguration"> | string | null
    announcementMessage?: StringNullableFilter<"PaymentConfiguration"> | string | null
    createdAt?: DateTimeFilter<"PaymentConfiguration"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentConfiguration"> | Date | string
  }

  export type PaymentConfigurationOrderByWithRelationInput = {
    id?: SortOrder
    p2pTransferEnabled?: SortOrder
    p2pTransferCommission?: SortOrder
    defaultDailyLimit?: SortOrder
    defaultMonthlyLimit?: SortOrder
    depositExpirationHours?: SortOrder
    referenceExpirationHours?: SortOrder
    depositsEnabled?: SortOrder
    withdrawalsEnabled?: SortOrder
    transfersEnabled?: SortOrder
    maintenanceMessage?: SortOrderInput | SortOrder
    announcementMessage?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentConfigurationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PaymentConfigurationWhereInput | PaymentConfigurationWhereInput[]
    OR?: PaymentConfigurationWhereInput[]
    NOT?: PaymentConfigurationWhereInput | PaymentConfigurationWhereInput[]
    p2pTransferEnabled?: BoolFilter<"PaymentConfiguration"> | boolean
    p2pTransferCommission?: DecimalFilter<"PaymentConfiguration"> | Decimal | DecimalJsLike | number | string
    defaultDailyLimit?: DecimalFilter<"PaymentConfiguration"> | Decimal | DecimalJsLike | number | string
    defaultMonthlyLimit?: DecimalFilter<"PaymentConfiguration"> | Decimal | DecimalJsLike | number | string
    depositExpirationHours?: IntFilter<"PaymentConfiguration"> | number
    referenceExpirationHours?: IntFilter<"PaymentConfiguration"> | number
    depositsEnabled?: BoolFilter<"PaymentConfiguration"> | boolean
    withdrawalsEnabled?: BoolFilter<"PaymentConfiguration"> | boolean
    transfersEnabled?: BoolFilter<"PaymentConfiguration"> | boolean
    maintenanceMessage?: StringNullableFilter<"PaymentConfiguration"> | string | null
    announcementMessage?: StringNullableFilter<"PaymentConfiguration"> | string | null
    createdAt?: DateTimeFilter<"PaymentConfiguration"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentConfiguration"> | Date | string
  }, "id">

  export type PaymentConfigurationOrderByWithAggregationInput = {
    id?: SortOrder
    p2pTransferEnabled?: SortOrder
    p2pTransferCommission?: SortOrder
    defaultDailyLimit?: SortOrder
    defaultMonthlyLimit?: SortOrder
    depositExpirationHours?: SortOrder
    referenceExpirationHours?: SortOrder
    depositsEnabled?: SortOrder
    withdrawalsEnabled?: SortOrder
    transfersEnabled?: SortOrder
    maintenanceMessage?: SortOrderInput | SortOrder
    announcementMessage?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PaymentConfigurationCountOrderByAggregateInput
    _avg?: PaymentConfigurationAvgOrderByAggregateInput
    _max?: PaymentConfigurationMaxOrderByAggregateInput
    _min?: PaymentConfigurationMinOrderByAggregateInput
    _sum?: PaymentConfigurationSumOrderByAggregateInput
  }

  export type PaymentConfigurationScalarWhereWithAggregatesInput = {
    AND?: PaymentConfigurationScalarWhereWithAggregatesInput | PaymentConfigurationScalarWhereWithAggregatesInput[]
    OR?: PaymentConfigurationScalarWhereWithAggregatesInput[]
    NOT?: PaymentConfigurationScalarWhereWithAggregatesInput | PaymentConfigurationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PaymentConfiguration"> | string
    p2pTransferEnabled?: BoolWithAggregatesFilter<"PaymentConfiguration"> | boolean
    p2pTransferCommission?: DecimalWithAggregatesFilter<"PaymentConfiguration"> | Decimal | DecimalJsLike | number | string
    defaultDailyLimit?: DecimalWithAggregatesFilter<"PaymentConfiguration"> | Decimal | DecimalJsLike | number | string
    defaultMonthlyLimit?: DecimalWithAggregatesFilter<"PaymentConfiguration"> | Decimal | DecimalJsLike | number | string
    depositExpirationHours?: IntWithAggregatesFilter<"PaymentConfiguration"> | number
    referenceExpirationHours?: IntWithAggregatesFilter<"PaymentConfiguration"> | number
    depositsEnabled?: BoolWithAggregatesFilter<"PaymentConfiguration"> | boolean
    withdrawalsEnabled?: BoolWithAggregatesFilter<"PaymentConfiguration"> | boolean
    transfersEnabled?: BoolWithAggregatesFilter<"PaymentConfiguration"> | boolean
    maintenanceMessage?: StringNullableWithAggregatesFilter<"PaymentConfiguration"> | string | null
    announcementMessage?: StringNullableWithAggregatesFilter<"PaymentConfiguration"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PaymentConfiguration"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PaymentConfiguration"> | Date | string
  }

  export type OpenpayCustomerWhereInput = {
    AND?: OpenpayCustomerWhereInput | OpenpayCustomerWhereInput[]
    OR?: OpenpayCustomerWhereInput[]
    NOT?: OpenpayCustomerWhereInput | OpenpayCustomerWhereInput[]
    id?: StringFilter<"OpenpayCustomer"> | string
    userId?: StringFilter<"OpenpayCustomer"> | string
    openpayCustomerId?: StringFilter<"OpenpayCustomer"> | string
    email?: StringFilter<"OpenpayCustomer"> | string
    name?: StringFilter<"OpenpayCustomer"> | string
    phone?: StringNullableFilter<"OpenpayCustomer"> | string | null
    createdAt?: DateTimeFilter<"OpenpayCustomer"> | Date | string
    updatedAt?: DateTimeFilter<"OpenpayCustomer"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    paymentMethods?: OpenpayPaymentMethodListRelationFilter
    transactions?: OpenpayTransactionListRelationFilter
  }

  export type OpenpayCustomerOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    openpayCustomerId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    phone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    paymentMethods?: OpenpayPaymentMethodOrderByRelationAggregateInput
    transactions?: OpenpayTransactionOrderByRelationAggregateInput
  }

  export type OpenpayCustomerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    openpayCustomerId?: string
    AND?: OpenpayCustomerWhereInput | OpenpayCustomerWhereInput[]
    OR?: OpenpayCustomerWhereInput[]
    NOT?: OpenpayCustomerWhereInput | OpenpayCustomerWhereInput[]
    email?: StringFilter<"OpenpayCustomer"> | string
    name?: StringFilter<"OpenpayCustomer"> | string
    phone?: StringNullableFilter<"OpenpayCustomer"> | string | null
    createdAt?: DateTimeFilter<"OpenpayCustomer"> | Date | string
    updatedAt?: DateTimeFilter<"OpenpayCustomer"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    paymentMethods?: OpenpayPaymentMethodListRelationFilter
    transactions?: OpenpayTransactionListRelationFilter
  }, "id" | "userId" | "openpayCustomerId">

  export type OpenpayCustomerOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    openpayCustomerId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    phone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OpenpayCustomerCountOrderByAggregateInput
    _max?: OpenpayCustomerMaxOrderByAggregateInput
    _min?: OpenpayCustomerMinOrderByAggregateInput
  }

  export type OpenpayCustomerScalarWhereWithAggregatesInput = {
    AND?: OpenpayCustomerScalarWhereWithAggregatesInput | OpenpayCustomerScalarWhereWithAggregatesInput[]
    OR?: OpenpayCustomerScalarWhereWithAggregatesInput[]
    NOT?: OpenpayCustomerScalarWhereWithAggregatesInput | OpenpayCustomerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OpenpayCustomer"> | string
    userId?: StringWithAggregatesFilter<"OpenpayCustomer"> | string
    openpayCustomerId?: StringWithAggregatesFilter<"OpenpayCustomer"> | string
    email?: StringWithAggregatesFilter<"OpenpayCustomer"> | string
    name?: StringWithAggregatesFilter<"OpenpayCustomer"> | string
    phone?: StringNullableWithAggregatesFilter<"OpenpayCustomer"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"OpenpayCustomer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"OpenpayCustomer"> | Date | string
  }

  export type OpenpayTransactionWhereInput = {
    AND?: OpenpayTransactionWhereInput | OpenpayTransactionWhereInput[]
    OR?: OpenpayTransactionWhereInput[]
    NOT?: OpenpayTransactionWhereInput | OpenpayTransactionWhereInput[]
    id?: StringFilter<"OpenpayTransaction"> | string
    depositRequestId?: StringFilter<"OpenpayTransaction"> | string
    openpayTransactionId?: StringFilter<"OpenpayTransaction"> | string
    openpayChargeId?: StringNullableFilter<"OpenpayTransaction"> | string | null
    amount?: FloatFilter<"OpenpayTransaction"> | number
    currency?: StringFilter<"OpenpayTransaction"> | string
    paymentMethod?: StringFilter<"OpenpayTransaction"> | string
    paymentMethodDetails?: StringNullableFilter<"OpenpayTransaction"> | string | null
    openpayStatus?: StringFilter<"OpenpayTransaction"> | string
    openpayErrorCode?: StringNullableFilter<"OpenpayTransaction"> | string | null
    openpayErrorMessage?: StringNullableFilter<"OpenpayTransaction"> | string | null
    customerId?: StringFilter<"OpenpayTransaction"> | string
    customerEmail?: StringFilter<"OpenpayTransaction"> | string
    customerPhone?: StringNullableFilter<"OpenpayTransaction"> | string | null
    authorizationCode?: StringNullableFilter<"OpenpayTransaction"> | string | null
    operationType?: StringNullableFilter<"OpenpayTransaction"> | string | null
    deviceSessionId?: StringNullableFilter<"OpenpayTransaction"> | string | null
    riskScore?: FloatNullableFilter<"OpenpayTransaction"> | number | null
    fraudIndicators?: StringNullableFilter<"OpenpayTransaction"> | string | null
    ipAddress?: StringNullableFilter<"OpenpayTransaction"> | string | null
    userAgent?: StringNullableFilter<"OpenpayTransaction"> | string | null
    chargedAt?: DateTimeNullableFilter<"OpenpayTransaction"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"OpenpayTransaction"> | Date | string | null
    createdAt?: DateTimeFilter<"OpenpayTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"OpenpayTransaction"> | Date | string
    depositRequest?: XOR<DepositRequestRelationFilter, DepositRequestWhereInput>
    customer?: XOR<OpenpayCustomerRelationFilter, OpenpayCustomerWhereInput>
    webhookEvents?: OpenpayWebhookEventListRelationFilter
  }

  export type OpenpayTransactionOrderByWithRelationInput = {
    id?: SortOrder
    depositRequestId?: SortOrder
    openpayTransactionId?: SortOrder
    openpayChargeId?: SortOrderInput | SortOrder
    amount?: SortOrder
    currency?: SortOrder
    paymentMethod?: SortOrder
    paymentMethodDetails?: SortOrderInput | SortOrder
    openpayStatus?: SortOrder
    openpayErrorCode?: SortOrderInput | SortOrder
    openpayErrorMessage?: SortOrderInput | SortOrder
    customerId?: SortOrder
    customerEmail?: SortOrder
    customerPhone?: SortOrderInput | SortOrder
    authorizationCode?: SortOrderInput | SortOrder
    operationType?: SortOrderInput | SortOrder
    deviceSessionId?: SortOrderInput | SortOrder
    riskScore?: SortOrderInput | SortOrder
    fraudIndicators?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    chargedAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    depositRequest?: DepositRequestOrderByWithRelationInput
    customer?: OpenpayCustomerOrderByWithRelationInput
    webhookEvents?: OpenpayWebhookEventOrderByRelationAggregateInput
  }

  export type OpenpayTransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    openpayTransactionId?: string
    openpayChargeId?: string
    AND?: OpenpayTransactionWhereInput | OpenpayTransactionWhereInput[]
    OR?: OpenpayTransactionWhereInput[]
    NOT?: OpenpayTransactionWhereInput | OpenpayTransactionWhereInput[]
    depositRequestId?: StringFilter<"OpenpayTransaction"> | string
    amount?: FloatFilter<"OpenpayTransaction"> | number
    currency?: StringFilter<"OpenpayTransaction"> | string
    paymentMethod?: StringFilter<"OpenpayTransaction"> | string
    paymentMethodDetails?: StringNullableFilter<"OpenpayTransaction"> | string | null
    openpayStatus?: StringFilter<"OpenpayTransaction"> | string
    openpayErrorCode?: StringNullableFilter<"OpenpayTransaction"> | string | null
    openpayErrorMessage?: StringNullableFilter<"OpenpayTransaction"> | string | null
    customerId?: StringFilter<"OpenpayTransaction"> | string
    customerEmail?: StringFilter<"OpenpayTransaction"> | string
    customerPhone?: StringNullableFilter<"OpenpayTransaction"> | string | null
    authorizationCode?: StringNullableFilter<"OpenpayTransaction"> | string | null
    operationType?: StringNullableFilter<"OpenpayTransaction"> | string | null
    deviceSessionId?: StringNullableFilter<"OpenpayTransaction"> | string | null
    riskScore?: FloatNullableFilter<"OpenpayTransaction"> | number | null
    fraudIndicators?: StringNullableFilter<"OpenpayTransaction"> | string | null
    ipAddress?: StringNullableFilter<"OpenpayTransaction"> | string | null
    userAgent?: StringNullableFilter<"OpenpayTransaction"> | string | null
    chargedAt?: DateTimeNullableFilter<"OpenpayTransaction"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"OpenpayTransaction"> | Date | string | null
    createdAt?: DateTimeFilter<"OpenpayTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"OpenpayTransaction"> | Date | string
    depositRequest?: XOR<DepositRequestRelationFilter, DepositRequestWhereInput>
    customer?: XOR<OpenpayCustomerRelationFilter, OpenpayCustomerWhereInput>
    webhookEvents?: OpenpayWebhookEventListRelationFilter
  }, "id" | "openpayTransactionId" | "openpayChargeId">

  export type OpenpayTransactionOrderByWithAggregationInput = {
    id?: SortOrder
    depositRequestId?: SortOrder
    openpayTransactionId?: SortOrder
    openpayChargeId?: SortOrderInput | SortOrder
    amount?: SortOrder
    currency?: SortOrder
    paymentMethod?: SortOrder
    paymentMethodDetails?: SortOrderInput | SortOrder
    openpayStatus?: SortOrder
    openpayErrorCode?: SortOrderInput | SortOrder
    openpayErrorMessage?: SortOrderInput | SortOrder
    customerId?: SortOrder
    customerEmail?: SortOrder
    customerPhone?: SortOrderInput | SortOrder
    authorizationCode?: SortOrderInput | SortOrder
    operationType?: SortOrderInput | SortOrder
    deviceSessionId?: SortOrderInput | SortOrder
    riskScore?: SortOrderInput | SortOrder
    fraudIndicators?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    chargedAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OpenpayTransactionCountOrderByAggregateInput
    _avg?: OpenpayTransactionAvgOrderByAggregateInput
    _max?: OpenpayTransactionMaxOrderByAggregateInput
    _min?: OpenpayTransactionMinOrderByAggregateInput
    _sum?: OpenpayTransactionSumOrderByAggregateInput
  }

  export type OpenpayTransactionScalarWhereWithAggregatesInput = {
    AND?: OpenpayTransactionScalarWhereWithAggregatesInput | OpenpayTransactionScalarWhereWithAggregatesInput[]
    OR?: OpenpayTransactionScalarWhereWithAggregatesInput[]
    NOT?: OpenpayTransactionScalarWhereWithAggregatesInput | OpenpayTransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OpenpayTransaction"> | string
    depositRequestId?: StringWithAggregatesFilter<"OpenpayTransaction"> | string
    openpayTransactionId?: StringWithAggregatesFilter<"OpenpayTransaction"> | string
    openpayChargeId?: StringNullableWithAggregatesFilter<"OpenpayTransaction"> | string | null
    amount?: FloatWithAggregatesFilter<"OpenpayTransaction"> | number
    currency?: StringWithAggregatesFilter<"OpenpayTransaction"> | string
    paymentMethod?: StringWithAggregatesFilter<"OpenpayTransaction"> | string
    paymentMethodDetails?: StringNullableWithAggregatesFilter<"OpenpayTransaction"> | string | null
    openpayStatus?: StringWithAggregatesFilter<"OpenpayTransaction"> | string
    openpayErrorCode?: StringNullableWithAggregatesFilter<"OpenpayTransaction"> | string | null
    openpayErrorMessage?: StringNullableWithAggregatesFilter<"OpenpayTransaction"> | string | null
    customerId?: StringWithAggregatesFilter<"OpenpayTransaction"> | string
    customerEmail?: StringWithAggregatesFilter<"OpenpayTransaction"> | string
    customerPhone?: StringNullableWithAggregatesFilter<"OpenpayTransaction"> | string | null
    authorizationCode?: StringNullableWithAggregatesFilter<"OpenpayTransaction"> | string | null
    operationType?: StringNullableWithAggregatesFilter<"OpenpayTransaction"> | string | null
    deviceSessionId?: StringNullableWithAggregatesFilter<"OpenpayTransaction"> | string | null
    riskScore?: FloatNullableWithAggregatesFilter<"OpenpayTransaction"> | number | null
    fraudIndicators?: StringNullableWithAggregatesFilter<"OpenpayTransaction"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"OpenpayTransaction"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"OpenpayTransaction"> | string | null
    chargedAt?: DateTimeNullableWithAggregatesFilter<"OpenpayTransaction"> | Date | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"OpenpayTransaction"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"OpenpayTransaction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"OpenpayTransaction"> | Date | string
  }

  export type OpenpayWebhookEventWhereInput = {
    AND?: OpenpayWebhookEventWhereInput | OpenpayWebhookEventWhereInput[]
    OR?: OpenpayWebhookEventWhereInput[]
    NOT?: OpenpayWebhookEventWhereInput | OpenpayWebhookEventWhereInput[]
    id?: StringFilter<"OpenpayWebhookEvent"> | string
    openpayEventId?: StringFilter<"OpenpayWebhookEvent"> | string
    eventType?: StringFilter<"OpenpayWebhookEvent"> | string
    transactionId?: StringNullableFilter<"OpenpayWebhookEvent"> | string | null
    webhookSignature?: StringFilter<"OpenpayWebhookEvent"> | string
    payload?: StringFilter<"OpenpayWebhookEvent"> | string
    processedAt?: DateTimeNullableFilter<"OpenpayWebhookEvent"> | Date | string | null
    processingStatus?: StringFilter<"OpenpayWebhookEvent"> | string
    errorMessage?: StringNullableFilter<"OpenpayWebhookEvent"> | string | null
    createdAt?: DateTimeFilter<"OpenpayWebhookEvent"> | Date | string
    transaction?: XOR<OpenpayTransactionNullableRelationFilter, OpenpayTransactionWhereInput> | null
  }

  export type OpenpayWebhookEventOrderByWithRelationInput = {
    id?: SortOrder
    openpayEventId?: SortOrder
    eventType?: SortOrder
    transactionId?: SortOrderInput | SortOrder
    webhookSignature?: SortOrder
    payload?: SortOrder
    processedAt?: SortOrderInput | SortOrder
    processingStatus?: SortOrder
    errorMessage?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    transaction?: OpenpayTransactionOrderByWithRelationInput
  }

  export type OpenpayWebhookEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    openpayEventId?: string
    AND?: OpenpayWebhookEventWhereInput | OpenpayWebhookEventWhereInput[]
    OR?: OpenpayWebhookEventWhereInput[]
    NOT?: OpenpayWebhookEventWhereInput | OpenpayWebhookEventWhereInput[]
    eventType?: StringFilter<"OpenpayWebhookEvent"> | string
    transactionId?: StringNullableFilter<"OpenpayWebhookEvent"> | string | null
    webhookSignature?: StringFilter<"OpenpayWebhookEvent"> | string
    payload?: StringFilter<"OpenpayWebhookEvent"> | string
    processedAt?: DateTimeNullableFilter<"OpenpayWebhookEvent"> | Date | string | null
    processingStatus?: StringFilter<"OpenpayWebhookEvent"> | string
    errorMessage?: StringNullableFilter<"OpenpayWebhookEvent"> | string | null
    createdAt?: DateTimeFilter<"OpenpayWebhookEvent"> | Date | string
    transaction?: XOR<OpenpayTransactionNullableRelationFilter, OpenpayTransactionWhereInput> | null
  }, "id" | "openpayEventId">

  export type OpenpayWebhookEventOrderByWithAggregationInput = {
    id?: SortOrder
    openpayEventId?: SortOrder
    eventType?: SortOrder
    transactionId?: SortOrderInput | SortOrder
    webhookSignature?: SortOrder
    payload?: SortOrder
    processedAt?: SortOrderInput | SortOrder
    processingStatus?: SortOrder
    errorMessage?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: OpenpayWebhookEventCountOrderByAggregateInput
    _max?: OpenpayWebhookEventMaxOrderByAggregateInput
    _min?: OpenpayWebhookEventMinOrderByAggregateInput
  }

  export type OpenpayWebhookEventScalarWhereWithAggregatesInput = {
    AND?: OpenpayWebhookEventScalarWhereWithAggregatesInput | OpenpayWebhookEventScalarWhereWithAggregatesInput[]
    OR?: OpenpayWebhookEventScalarWhereWithAggregatesInput[]
    NOT?: OpenpayWebhookEventScalarWhereWithAggregatesInput | OpenpayWebhookEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OpenpayWebhookEvent"> | string
    openpayEventId?: StringWithAggregatesFilter<"OpenpayWebhookEvent"> | string
    eventType?: StringWithAggregatesFilter<"OpenpayWebhookEvent"> | string
    transactionId?: StringNullableWithAggregatesFilter<"OpenpayWebhookEvent"> | string | null
    webhookSignature?: StringWithAggregatesFilter<"OpenpayWebhookEvent"> | string
    payload?: StringWithAggregatesFilter<"OpenpayWebhookEvent"> | string
    processedAt?: DateTimeNullableWithAggregatesFilter<"OpenpayWebhookEvent"> | Date | string | null
    processingStatus?: StringWithAggregatesFilter<"OpenpayWebhookEvent"> | string
    errorMessage?: StringNullableWithAggregatesFilter<"OpenpayWebhookEvent"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"OpenpayWebhookEvent"> | Date | string
  }

  export type OpenpayPaymentMethodWhereInput = {
    AND?: OpenpayPaymentMethodWhereInput | OpenpayPaymentMethodWhereInput[]
    OR?: OpenpayPaymentMethodWhereInput[]
    NOT?: OpenpayPaymentMethodWhereInput | OpenpayPaymentMethodWhereInput[]
    id?: StringFilter<"OpenpayPaymentMethod"> | string
    customerId?: StringFilter<"OpenpayPaymentMethod"> | string
    openpayCardId?: StringNullableFilter<"OpenpayPaymentMethod"> | string | null
    cardType?: StringNullableFilter<"OpenpayPaymentMethod"> | string | null
    cardBrand?: StringNullableFilter<"OpenpayPaymentMethod"> | string | null
    cardNumberMasked?: StringNullableFilter<"OpenpayPaymentMethod"> | string | null
    cardHolderName?: StringNullableFilter<"OpenpayPaymentMethod"> | string | null
    expirationMonth?: StringNullableFilter<"OpenpayPaymentMethod"> | string | null
    expirationYear?: StringNullableFilter<"OpenpayPaymentMethod"> | string | null
    isActive?: BoolFilter<"OpenpayPaymentMethod"> | boolean
    isDefault?: BoolFilter<"OpenpayPaymentMethod"> | boolean
    createdAt?: DateTimeFilter<"OpenpayPaymentMethod"> | Date | string
    updatedAt?: DateTimeFilter<"OpenpayPaymentMethod"> | Date | string
    customer?: XOR<OpenpayCustomerRelationFilter, OpenpayCustomerWhereInput>
  }

  export type OpenpayPaymentMethodOrderByWithRelationInput = {
    id?: SortOrder
    customerId?: SortOrder
    openpayCardId?: SortOrderInput | SortOrder
    cardType?: SortOrderInput | SortOrder
    cardBrand?: SortOrderInput | SortOrder
    cardNumberMasked?: SortOrderInput | SortOrder
    cardHolderName?: SortOrderInput | SortOrder
    expirationMonth?: SortOrderInput | SortOrder
    expirationYear?: SortOrderInput | SortOrder
    isActive?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customer?: OpenpayCustomerOrderByWithRelationInput
  }

  export type OpenpayPaymentMethodWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    openpayCardId?: string
    AND?: OpenpayPaymentMethodWhereInput | OpenpayPaymentMethodWhereInput[]
    OR?: OpenpayPaymentMethodWhereInput[]
    NOT?: OpenpayPaymentMethodWhereInput | OpenpayPaymentMethodWhereInput[]
    customerId?: StringFilter<"OpenpayPaymentMethod"> | string
    cardType?: StringNullableFilter<"OpenpayPaymentMethod"> | string | null
    cardBrand?: StringNullableFilter<"OpenpayPaymentMethod"> | string | null
    cardNumberMasked?: StringNullableFilter<"OpenpayPaymentMethod"> | string | null
    cardHolderName?: StringNullableFilter<"OpenpayPaymentMethod"> | string | null
    expirationMonth?: StringNullableFilter<"OpenpayPaymentMethod"> | string | null
    expirationYear?: StringNullableFilter<"OpenpayPaymentMethod"> | string | null
    isActive?: BoolFilter<"OpenpayPaymentMethod"> | boolean
    isDefault?: BoolFilter<"OpenpayPaymentMethod"> | boolean
    createdAt?: DateTimeFilter<"OpenpayPaymentMethod"> | Date | string
    updatedAt?: DateTimeFilter<"OpenpayPaymentMethod"> | Date | string
    customer?: XOR<OpenpayCustomerRelationFilter, OpenpayCustomerWhereInput>
  }, "id" | "openpayCardId">

  export type OpenpayPaymentMethodOrderByWithAggregationInput = {
    id?: SortOrder
    customerId?: SortOrder
    openpayCardId?: SortOrderInput | SortOrder
    cardType?: SortOrderInput | SortOrder
    cardBrand?: SortOrderInput | SortOrder
    cardNumberMasked?: SortOrderInput | SortOrder
    cardHolderName?: SortOrderInput | SortOrder
    expirationMonth?: SortOrderInput | SortOrder
    expirationYear?: SortOrderInput | SortOrder
    isActive?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OpenpayPaymentMethodCountOrderByAggregateInput
    _max?: OpenpayPaymentMethodMaxOrderByAggregateInput
    _min?: OpenpayPaymentMethodMinOrderByAggregateInput
  }

  export type OpenpayPaymentMethodScalarWhereWithAggregatesInput = {
    AND?: OpenpayPaymentMethodScalarWhereWithAggregatesInput | OpenpayPaymentMethodScalarWhereWithAggregatesInput[]
    OR?: OpenpayPaymentMethodScalarWhereWithAggregatesInput[]
    NOT?: OpenpayPaymentMethodScalarWhereWithAggregatesInput | OpenpayPaymentMethodScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OpenpayPaymentMethod"> | string
    customerId?: StringWithAggregatesFilter<"OpenpayPaymentMethod"> | string
    openpayCardId?: StringNullableWithAggregatesFilter<"OpenpayPaymentMethod"> | string | null
    cardType?: StringNullableWithAggregatesFilter<"OpenpayPaymentMethod"> | string | null
    cardBrand?: StringNullableWithAggregatesFilter<"OpenpayPaymentMethod"> | string | null
    cardNumberMasked?: StringNullableWithAggregatesFilter<"OpenpayPaymentMethod"> | string | null
    cardHolderName?: StringNullableWithAggregatesFilter<"OpenpayPaymentMethod"> | string | null
    expirationMonth?: StringNullableWithAggregatesFilter<"OpenpayPaymentMethod"> | string | null
    expirationYear?: StringNullableWithAggregatesFilter<"OpenpayPaymentMethod"> | string | null
    isActive?: BoolWithAggregatesFilter<"OpenpayPaymentMethod"> | boolean
    isDefault?: BoolWithAggregatesFilter<"OpenpayPaymentMethod"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"OpenpayPaymentMethod"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"OpenpayPaymentMethod"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    username: string
    password: string
    role?: string
    balance?: Decimal | DecimalJsLike | number | string
    pearlsBalance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isVerified?: boolean
    fullName?: string | null
    phone?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    gameParticipations?: GameParticipantCreateNestedManyWithoutUserInput
    bingoCards?: BingoCardCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    depositRequests?: DepositRequestCreateNestedManyWithoutUserInput
    withdrawalRequests?: WithdrawalRequestCreateNestedManyWithoutUserInput
    sentTransfers?: TransactionCreateNestedManyWithoutFromUserInput
    receivedTransfers?: TransactionCreateNestedManyWithoutToUserInput
    openpayCustomer?: OpenpayCustomerCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    username: string
    password: string
    role?: string
    balance?: Decimal | DecimalJsLike | number | string
    pearlsBalance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isVerified?: boolean
    fullName?: string | null
    phone?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    gameParticipations?: GameParticipantUncheckedCreateNestedManyWithoutUserInput
    bingoCards?: BingoCardUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    depositRequests?: DepositRequestUncheckedCreateNestedManyWithoutUserInput
    withdrawalRequests?: WithdrawalRequestUncheckedCreateNestedManyWithoutUserInput
    sentTransfers?: TransactionUncheckedCreateNestedManyWithoutFromUserInput
    receivedTransfers?: TransactionUncheckedCreateNestedManyWithoutToUserInput
    openpayCustomer?: OpenpayCustomerUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameParticipations?: GameParticipantUpdateManyWithoutUserNestedInput
    bingoCards?: BingoCardUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    depositRequests?: DepositRequestUpdateManyWithoutUserNestedInput
    withdrawalRequests?: WithdrawalRequestUpdateManyWithoutUserNestedInput
    sentTransfers?: TransactionUpdateManyWithoutFromUserNestedInput
    receivedTransfers?: TransactionUpdateManyWithoutToUserNestedInput
    openpayCustomer?: OpenpayCustomerUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameParticipations?: GameParticipantUncheckedUpdateManyWithoutUserNestedInput
    bingoCards?: BingoCardUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    depositRequests?: DepositRequestUncheckedUpdateManyWithoutUserNestedInput
    withdrawalRequests?: WithdrawalRequestUncheckedUpdateManyWithoutUserNestedInput
    sentTransfers?: TransactionUncheckedUpdateManyWithoutFromUserNestedInput
    receivedTransfers?: TransactionUncheckedUpdateManyWithoutToUserNestedInput
    openpayCustomer?: OpenpayCustomerUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    username: string
    password: string
    role?: string
    balance?: Decimal | DecimalJsLike | number | string
    pearlsBalance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isVerified?: boolean
    fullName?: string | null
    phone?: string | null
    dni?: string | null
    birthDate?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GameCreateInput = {
    id?: string
    title: string
    description?: string | null
    maxPlayers?: number
    cardPrice?: Decimal | DecimalJsLike | number | string
    totalPrize?: Decimal | DecimalJsLike | number | string
    status?: string
    scheduledAt: Date | string
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    ballsDrawn?: string
    currentBall?: number | null
    winningCards?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: GameParticipantCreateNestedManyWithoutGameInput
    bingoCards?: BingoCardCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    maxPlayers?: number
    cardPrice?: Decimal | DecimalJsLike | number | string
    totalPrize?: Decimal | DecimalJsLike | number | string
    status?: string
    scheduledAt: Date | string
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    ballsDrawn?: string
    currentBall?: number | null
    winningCards?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: GameParticipantUncheckedCreateNestedManyWithoutGameInput
    bingoCards?: BingoCardUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    cardPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrize?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsDrawn?: StringFieldUpdateOperationsInput | string
    currentBall?: NullableIntFieldUpdateOperationsInput | number | null
    winningCards?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: GameParticipantUpdateManyWithoutGameNestedInput
    bingoCards?: BingoCardUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    cardPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrize?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsDrawn?: StringFieldUpdateOperationsInput | string
    currentBall?: NullableIntFieldUpdateOperationsInput | number | null
    winningCards?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: GameParticipantUncheckedUpdateManyWithoutGameNestedInput
    bingoCards?: BingoCardUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    maxPlayers?: number
    cardPrice?: Decimal | DecimalJsLike | number | string
    totalPrize?: Decimal | DecimalJsLike | number | string
    status?: string
    scheduledAt: Date | string
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    ballsDrawn?: string
    currentBall?: number | null
    winningCards?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    cardPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrize?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsDrawn?: StringFieldUpdateOperationsInput | string
    currentBall?: NullableIntFieldUpdateOperationsInput | number | null
    winningCards?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    cardPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrize?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsDrawn?: StringFieldUpdateOperationsInput | string
    currentBall?: NullableIntFieldUpdateOperationsInput | number | null
    winningCards?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameParticipantCreateInput = {
    id?: string
    joinedAt?: Date | string
    cardsCount?: number
    totalSpent?: Decimal | DecimalJsLike | number | string
    hasWon?: boolean
    prizeWon?: Decimal | DecimalJsLike | number | string
    user: UserCreateNestedOneWithoutGameParticipationsInput
    game: GameCreateNestedOneWithoutParticipantsInput
  }

  export type GameParticipantUncheckedCreateInput = {
    id?: string
    userId: string
    gameId: string
    joinedAt?: Date | string
    cardsCount?: number
    totalSpent?: Decimal | DecimalJsLike | number | string
    hasWon?: boolean
    prizeWon?: Decimal | DecimalJsLike | number | string
  }

  export type GameParticipantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cardsCount?: IntFieldUpdateOperationsInput | number
    totalSpent?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    hasWon?: BoolFieldUpdateOperationsInput | boolean
    prizeWon?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    user?: UserUpdateOneRequiredWithoutGameParticipationsNestedInput
    game?: GameUpdateOneRequiredWithoutParticipantsNestedInput
  }

  export type GameParticipantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cardsCount?: IntFieldUpdateOperationsInput | number
    totalSpent?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    hasWon?: BoolFieldUpdateOperationsInput | boolean
    prizeWon?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type GameParticipantCreateManyInput = {
    id?: string
    userId: string
    gameId: string
    joinedAt?: Date | string
    cardsCount?: number
    totalSpent?: Decimal | DecimalJsLike | number | string
    hasWon?: boolean
    prizeWon?: Decimal | DecimalJsLike | number | string
  }

  export type GameParticipantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cardsCount?: IntFieldUpdateOperationsInput | number
    totalSpent?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    hasWon?: BoolFieldUpdateOperationsInput | boolean
    prizeWon?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type GameParticipantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cardsCount?: IntFieldUpdateOperationsInput | number
    totalSpent?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    hasWon?: BoolFieldUpdateOperationsInput | boolean
    prizeWon?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type BingoCardCreateInput = {
    id?: string
    cardNumber: number
    isActive?: boolean
    markedNumbers?: string
    isWinner?: boolean
    winningPattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBingoCardsInput
    game: GameCreateNestedOneWithoutBingoCardsInput
    numbers?: CardNumberCreateNestedManyWithoutCardInput
  }

  export type BingoCardUncheckedCreateInput = {
    id?: string
    userId: string
    gameId: string
    cardNumber: number
    isActive?: boolean
    markedNumbers?: string
    isWinner?: boolean
    winningPattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    numbers?: CardNumberUncheckedCreateNestedManyWithoutCardInput
  }

  export type BingoCardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardNumber?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    markedNumbers?: StringFieldUpdateOperationsInput | string
    isWinner?: BoolFieldUpdateOperationsInput | boolean
    winningPattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBingoCardsNestedInput
    game?: GameUpdateOneRequiredWithoutBingoCardsNestedInput
    numbers?: CardNumberUpdateManyWithoutCardNestedInput
  }

  export type BingoCardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    cardNumber?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    markedNumbers?: StringFieldUpdateOperationsInput | string
    isWinner?: BoolFieldUpdateOperationsInput | boolean
    winningPattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    numbers?: CardNumberUncheckedUpdateManyWithoutCardNestedInput
  }

  export type BingoCardCreateManyInput = {
    id?: string
    userId: string
    gameId: string
    cardNumber: number
    isActive?: boolean
    markedNumbers?: string
    isWinner?: boolean
    winningPattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BingoCardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardNumber?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    markedNumbers?: StringFieldUpdateOperationsInput | string
    isWinner?: BoolFieldUpdateOperationsInput | boolean
    winningPattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BingoCardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    cardNumber?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    markedNumbers?: StringFieldUpdateOperationsInput | string
    isWinner?: BoolFieldUpdateOperationsInput | boolean
    winningPattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CardNumberCreateInput = {
    id?: string
    position: number
    column: string
    number?: number | null
    isMarked?: boolean
    isFree?: boolean
    card: BingoCardCreateNestedOneWithoutNumbersInput
  }

  export type CardNumberUncheckedCreateInput = {
    id?: string
    cardId: string
    position: number
    column: string
    number?: number | null
    isMarked?: boolean
    isFree?: boolean
  }

  export type CardNumberUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    column?: StringFieldUpdateOperationsInput | string
    number?: NullableIntFieldUpdateOperationsInput | number | null
    isMarked?: BoolFieldUpdateOperationsInput | boolean
    isFree?: BoolFieldUpdateOperationsInput | boolean
    card?: BingoCardUpdateOneRequiredWithoutNumbersNestedInput
  }

  export type CardNumberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    column?: StringFieldUpdateOperationsInput | string
    number?: NullableIntFieldUpdateOperationsInput | number | null
    isMarked?: BoolFieldUpdateOperationsInput | boolean
    isFree?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CardNumberCreateManyInput = {
    id?: string
    cardId: string
    position: number
    column: string
    number?: number | null
    isMarked?: boolean
    isFree?: boolean
  }

  export type CardNumberUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    column?: StringFieldUpdateOperationsInput | string
    number?: NullableIntFieldUpdateOperationsInput | number | null
    isMarked?: BoolFieldUpdateOperationsInput | boolean
    isFree?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CardNumberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    column?: StringFieldUpdateOperationsInput | string
    number?: NullableIntFieldUpdateOperationsInput | number | null
    isMarked?: BoolFieldUpdateOperationsInput | boolean
    isFree?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TransactionCreateInput = {
    id?: string
    gameId?: string | null
    type: string
    amount: Decimal | DecimalJsLike | number | string
    description: string
    status?: string
    paymentMethod?: string | null
    paymentId?: string | null
    pearlsAmount?: Decimal | DecimalJsLike | number | string | null
    commissionAmount?: Decimal | DecimalJsLike | number | string | null
    referenceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTransactionsInput
    fromUser?: UserCreateNestedOneWithoutSentTransfersInput
    toUser?: UserCreateNestedOneWithoutReceivedTransfersInput
  }

  export type TransactionUncheckedCreateInput = {
    id?: string
    userId: string
    gameId?: string | null
    type: string
    amount: Decimal | DecimalJsLike | number | string
    description: string
    status?: string
    paymentMethod?: string | null
    paymentId?: string | null
    pearlsAmount?: Decimal | DecimalJsLike | number | string | null
    fromUserId?: string | null
    toUserId?: string | null
    commissionAmount?: Decimal | DecimalJsLike | number | string | null
    referenceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    gameId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    pearlsAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    commissionAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTransactionsNestedInput
    fromUser?: UserUpdateOneWithoutSentTransfersNestedInput
    toUser?: UserUpdateOneWithoutReceivedTransfersNestedInput
  }

  export type TransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    gameId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    pearlsAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    fromUserId?: NullableStringFieldUpdateOperationsInput | string | null
    toUserId?: NullableStringFieldUpdateOperationsInput | string | null
    commissionAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateManyInput = {
    id?: string
    userId: string
    gameId?: string | null
    type: string
    amount: Decimal | DecimalJsLike | number | string
    description: string
    status?: string
    paymentMethod?: string | null
    paymentId?: string | null
    pearlsAmount?: Decimal | DecimalJsLike | number | string | null
    fromUserId?: string | null
    toUserId?: string | null
    commissionAmount?: Decimal | DecimalJsLike | number | string | null
    referenceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    gameId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    pearlsAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    commissionAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    gameId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    pearlsAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    fromUserId?: NullableStringFieldUpdateOperationsInput | string | null
    toUserId?: NullableStringFieldUpdateOperationsInput | string | null
    commissionAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletCreateInput = {
    id?: string
    balance?: Decimal | DecimalJsLike | number | string
    dailyLimit?: Decimal | DecimalJsLike | number | string
    monthlyLimit?: Decimal | DecimalJsLike | number | string
    isActive?: boolean
    isFrozen?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutWalletInput
  }

  export type WalletUncheckedCreateInput = {
    id?: string
    userId: string
    balance?: Decimal | DecimalJsLike | number | string
    dailyLimit?: Decimal | DecimalJsLike | number | string
    monthlyLimit?: Decimal | DecimalJsLike | number | string
    isActive?: boolean
    isFrozen?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WalletUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dailyLimit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    monthlyLimit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isFrozen?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWalletNestedInput
  }

  export type WalletUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dailyLimit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    monthlyLimit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isFrozen?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletCreateManyInput = {
    id?: string
    userId: string
    balance?: Decimal | DecimalJsLike | number | string
    dailyLimit?: Decimal | DecimalJsLike | number | string
    monthlyLimit?: Decimal | DecimalJsLike | number | string
    isActive?: boolean
    isFrozen?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WalletUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dailyLimit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    monthlyLimit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isFrozen?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dailyLimit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    monthlyLimit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isFrozen?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepositRequestCreateInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    pearlsAmount: Decimal | DecimalJsLike | number | string
    currency?: string
    paymentMethod: string
    referenceCode: string
    bankReference?: string | null
    bankAccount?: string | null
    bankAccountName?: string | null
    status?: string
    adminNotes?: string | null
    validatedBy?: string | null
    validatedAt?: Date | string | null
    proofImage?: string | null
    proofImageAdmin?: string | null
    transactionId?: string | null
    integrationMethod?: string
    openpayTransactionId?: string | null
    autoApprovalEligible?: boolean
    processingFee?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    expiresAt: Date | string
    user: UserCreateNestedOneWithoutDepositRequestsInput
    openpayTransactions?: OpenpayTransactionCreateNestedManyWithoutDepositRequestInput
  }

  export type DepositRequestUncheckedCreateInput = {
    id?: string
    userId: string
    amount: Decimal | DecimalJsLike | number | string
    pearlsAmount: Decimal | DecimalJsLike | number | string
    currency?: string
    paymentMethod: string
    referenceCode: string
    bankReference?: string | null
    bankAccount?: string | null
    bankAccountName?: string | null
    status?: string
    adminNotes?: string | null
    validatedBy?: string | null
    validatedAt?: Date | string | null
    proofImage?: string | null
    proofImageAdmin?: string | null
    transactionId?: string | null
    integrationMethod?: string
    openpayTransactionId?: string | null
    autoApprovalEligible?: boolean
    processingFee?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    expiresAt: Date | string
    openpayTransactions?: OpenpayTransactionUncheckedCreateNestedManyWithoutDepositRequestInput
  }

  export type DepositRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    referenceCode?: StringFieldUpdateOperationsInput | string
    bankReference?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccountName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
    validatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    proofImage?: NullableStringFieldUpdateOperationsInput | string | null
    proofImageAdmin?: NullableStringFieldUpdateOperationsInput | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    integrationMethod?: StringFieldUpdateOperationsInput | string
    openpayTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    autoApprovalEligible?: BoolFieldUpdateOperationsInput | boolean
    processingFee?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDepositRequestsNestedInput
    openpayTransactions?: OpenpayTransactionUpdateManyWithoutDepositRequestNestedInput
  }

  export type DepositRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    referenceCode?: StringFieldUpdateOperationsInput | string
    bankReference?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccountName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
    validatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    proofImage?: NullableStringFieldUpdateOperationsInput | string | null
    proofImageAdmin?: NullableStringFieldUpdateOperationsInput | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    integrationMethod?: StringFieldUpdateOperationsInput | string
    openpayTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    autoApprovalEligible?: BoolFieldUpdateOperationsInput | boolean
    processingFee?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    openpayTransactions?: OpenpayTransactionUncheckedUpdateManyWithoutDepositRequestNestedInput
  }

  export type DepositRequestCreateManyInput = {
    id?: string
    userId: string
    amount: Decimal | DecimalJsLike | number | string
    pearlsAmount: Decimal | DecimalJsLike | number | string
    currency?: string
    paymentMethod: string
    referenceCode: string
    bankReference?: string | null
    bankAccount?: string | null
    bankAccountName?: string | null
    status?: string
    adminNotes?: string | null
    validatedBy?: string | null
    validatedAt?: Date | string | null
    proofImage?: string | null
    proofImageAdmin?: string | null
    transactionId?: string | null
    integrationMethod?: string
    openpayTransactionId?: string | null
    autoApprovalEligible?: boolean
    processingFee?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    expiresAt: Date | string
  }

  export type DepositRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    referenceCode?: StringFieldUpdateOperationsInput | string
    bankReference?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccountName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
    validatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    proofImage?: NullableStringFieldUpdateOperationsInput | string | null
    proofImageAdmin?: NullableStringFieldUpdateOperationsInput | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    integrationMethod?: StringFieldUpdateOperationsInput | string
    openpayTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    autoApprovalEligible?: BoolFieldUpdateOperationsInput | boolean
    processingFee?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepositRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    referenceCode?: StringFieldUpdateOperationsInput | string
    bankReference?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccountName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
    validatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    proofImage?: NullableStringFieldUpdateOperationsInput | string | null
    proofImageAdmin?: NullableStringFieldUpdateOperationsInput | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    integrationMethod?: StringFieldUpdateOperationsInput | string
    openpayTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    autoApprovalEligible?: BoolFieldUpdateOperationsInput | boolean
    processingFee?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WithdrawalRequestCreateInput = {
    id?: string
    pearlsAmount: Decimal | DecimalJsLike | number | string
    amountInSoles: Decimal | DecimalJsLike | number | string
    commission?: Decimal | DecimalJsLike | number | string
    netAmount: Decimal | DecimalJsLike | number | string
    bankCode: string
    accountNumber: string
    accountType: string
    accountHolderName: string
    accountHolderDni: string
    status?: string
    adminNotes?: string | null
    processedBy?: string | null
    processedAt?: Date | string | null
    bankTransactionId?: string | null
    transferProof?: string | null
    referenceCode: string
    transactionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutWithdrawalRequestsInput
  }

  export type WithdrawalRequestUncheckedCreateInput = {
    id?: string
    userId: string
    pearlsAmount: Decimal | DecimalJsLike | number | string
    amountInSoles: Decimal | DecimalJsLike | number | string
    commission?: Decimal | DecimalJsLike | number | string
    netAmount: Decimal | DecimalJsLike | number | string
    bankCode: string
    accountNumber: string
    accountType: string
    accountHolderName: string
    accountHolderDni: string
    status?: string
    adminNotes?: string | null
    processedBy?: string | null
    processedAt?: Date | string | null
    bankTransactionId?: string | null
    transferProof?: string | null
    referenceCode: string
    transactionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WithdrawalRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pearlsAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amountInSoles?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commission?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bankCode?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    accountHolderDni?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bankTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    transferProof?: NullableStringFieldUpdateOperationsInput | string | null
    referenceCode?: StringFieldUpdateOperationsInput | string
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWithdrawalRequestsNestedInput
  }

  export type WithdrawalRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    pearlsAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amountInSoles?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commission?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bankCode?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    accountHolderDni?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bankTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    transferProof?: NullableStringFieldUpdateOperationsInput | string | null
    referenceCode?: StringFieldUpdateOperationsInput | string
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WithdrawalRequestCreateManyInput = {
    id?: string
    userId: string
    pearlsAmount: Decimal | DecimalJsLike | number | string
    amountInSoles: Decimal | DecimalJsLike | number | string
    commission?: Decimal | DecimalJsLike | number | string
    netAmount: Decimal | DecimalJsLike | number | string
    bankCode: string
    accountNumber: string
    accountType: string
    accountHolderName: string
    accountHolderDni: string
    status?: string
    adminNotes?: string | null
    processedBy?: string | null
    processedAt?: Date | string | null
    bankTransactionId?: string | null
    transferProof?: string | null
    referenceCode: string
    transactionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WithdrawalRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    pearlsAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amountInSoles?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commission?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bankCode?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    accountHolderDni?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bankTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    transferProof?: NullableStringFieldUpdateOperationsInput | string | null
    referenceCode?: StringFieldUpdateOperationsInput | string
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WithdrawalRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    pearlsAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amountInSoles?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commission?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bankCode?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    accountHolderDni?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bankTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    transferProof?: NullableStringFieldUpdateOperationsInput | string | null
    referenceCode?: StringFieldUpdateOperationsInput | string
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentReferenceCreateInput = {
    id?: string
    code: string
    type: string
    userId: string
    amount: Decimal | DecimalJsLike | number | string
    description: string
    metadata?: string | null
    isUsed?: boolean
    usedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    expiresAt: Date | string
  }

  export type PaymentReferenceUncheckedCreateInput = {
    id?: string
    code: string
    type: string
    userId: string
    amount: Decimal | DecimalJsLike | number | string
    description: string
    metadata?: string | null
    isUsed?: boolean
    usedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    expiresAt: Date | string
  }

  export type PaymentReferenceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentReferenceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentReferenceCreateManyInput = {
    id?: string
    code: string
    type: string
    userId: string
    amount: Decimal | DecimalJsLike | number | string
    description: string
    metadata?: string | null
    isUsed?: boolean
    usedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    expiresAt: Date | string
  }

  export type PaymentReferenceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentReferenceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BankConfigurationCreateInput = {
    id?: string
    bankCode: string
    bankName: string
    accountNumber: string
    accountType: string
    accountHolderName: string
    cci?: string | null
    isActive?: boolean
    minDeposit?: Decimal | DecimalJsLike | number | string
    maxDeposit?: Decimal | DecimalJsLike | number | string
    depositCommission?: Decimal | DecimalJsLike | number | string
    instructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BankConfigurationUncheckedCreateInput = {
    id?: string
    bankCode: string
    bankName: string
    accountNumber: string
    accountType: string
    accountHolderName: string
    cci?: string | null
    isActive?: boolean
    minDeposit?: Decimal | DecimalJsLike | number | string
    maxDeposit?: Decimal | DecimalJsLike | number | string
    depositCommission?: Decimal | DecimalJsLike | number | string
    instructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BankConfigurationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    bankCode?: StringFieldUpdateOperationsInput | string
    bankName?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    cci?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    minDeposit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maxDeposit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    depositCommission?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BankConfigurationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    bankCode?: StringFieldUpdateOperationsInput | string
    bankName?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    cci?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    minDeposit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maxDeposit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    depositCommission?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BankConfigurationCreateManyInput = {
    id?: string
    bankCode: string
    bankName: string
    accountNumber: string
    accountType: string
    accountHolderName: string
    cci?: string | null
    isActive?: boolean
    minDeposit?: Decimal | DecimalJsLike | number | string
    maxDeposit?: Decimal | DecimalJsLike | number | string
    depositCommission?: Decimal | DecimalJsLike | number | string
    instructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BankConfigurationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    bankCode?: StringFieldUpdateOperationsInput | string
    bankName?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    cci?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    minDeposit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maxDeposit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    depositCommission?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BankConfigurationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    bankCode?: StringFieldUpdateOperationsInput | string
    bankName?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    cci?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    minDeposit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maxDeposit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    depositCommission?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateInput = {
    id?: string
    userId?: string | null
    adminId?: string | null
    action: string
    entity: string
    entityId: string
    oldValue?: string | null
    newValue?: string | null
    description: string
    ipAddress?: string | null
    userAgent?: string | null
    sessionId?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    userId?: string | null
    adminId?: string | null
    action: string
    entity: string
    entityId: string
    oldValue?: string | null
    newValue?: string | null
    description: string
    ipAddress?: string | null
    userAgent?: string | null
    sessionId?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    adminId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    oldValue?: NullableStringFieldUpdateOperationsInput | string | null
    newValue?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    adminId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    oldValue?: NullableStringFieldUpdateOperationsInput | string | null
    newValue?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    userId?: string | null
    adminId?: string | null
    action: string
    entity: string
    entityId: string
    oldValue?: string | null
    newValue?: string | null
    description: string
    ipAddress?: string | null
    userAgent?: string | null
    sessionId?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    adminId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    oldValue?: NullableStringFieldUpdateOperationsInput | string | null
    newValue?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    adminId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    oldValue?: NullableStringFieldUpdateOperationsInput | string | null
    newValue?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentConfigurationCreateInput = {
    id?: string
    p2pTransferEnabled?: boolean
    p2pTransferCommission?: Decimal | DecimalJsLike | number | string
    defaultDailyLimit?: Decimal | DecimalJsLike | number | string
    defaultMonthlyLimit?: Decimal | DecimalJsLike | number | string
    depositExpirationHours?: number
    referenceExpirationHours?: number
    depositsEnabled?: boolean
    withdrawalsEnabled?: boolean
    transfersEnabled?: boolean
    maintenanceMessage?: string | null
    announcementMessage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentConfigurationUncheckedCreateInput = {
    id?: string
    p2pTransferEnabled?: boolean
    p2pTransferCommission?: Decimal | DecimalJsLike | number | string
    defaultDailyLimit?: Decimal | DecimalJsLike | number | string
    defaultMonthlyLimit?: Decimal | DecimalJsLike | number | string
    depositExpirationHours?: number
    referenceExpirationHours?: number
    depositsEnabled?: boolean
    withdrawalsEnabled?: boolean
    transfersEnabled?: boolean
    maintenanceMessage?: string | null
    announcementMessage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentConfigurationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    p2pTransferEnabled?: BoolFieldUpdateOperationsInput | boolean
    p2pTransferCommission?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    defaultDailyLimit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    defaultMonthlyLimit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    depositExpirationHours?: IntFieldUpdateOperationsInput | number
    referenceExpirationHours?: IntFieldUpdateOperationsInput | number
    depositsEnabled?: BoolFieldUpdateOperationsInput | boolean
    withdrawalsEnabled?: BoolFieldUpdateOperationsInput | boolean
    transfersEnabled?: BoolFieldUpdateOperationsInput | boolean
    maintenanceMessage?: NullableStringFieldUpdateOperationsInput | string | null
    announcementMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentConfigurationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    p2pTransferEnabled?: BoolFieldUpdateOperationsInput | boolean
    p2pTransferCommission?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    defaultDailyLimit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    defaultMonthlyLimit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    depositExpirationHours?: IntFieldUpdateOperationsInput | number
    referenceExpirationHours?: IntFieldUpdateOperationsInput | number
    depositsEnabled?: BoolFieldUpdateOperationsInput | boolean
    withdrawalsEnabled?: BoolFieldUpdateOperationsInput | boolean
    transfersEnabled?: BoolFieldUpdateOperationsInput | boolean
    maintenanceMessage?: NullableStringFieldUpdateOperationsInput | string | null
    announcementMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentConfigurationCreateManyInput = {
    id?: string
    p2pTransferEnabled?: boolean
    p2pTransferCommission?: Decimal | DecimalJsLike | number | string
    defaultDailyLimit?: Decimal | DecimalJsLike | number | string
    defaultMonthlyLimit?: Decimal | DecimalJsLike | number | string
    depositExpirationHours?: number
    referenceExpirationHours?: number
    depositsEnabled?: boolean
    withdrawalsEnabled?: boolean
    transfersEnabled?: boolean
    maintenanceMessage?: string | null
    announcementMessage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentConfigurationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    p2pTransferEnabled?: BoolFieldUpdateOperationsInput | boolean
    p2pTransferCommission?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    defaultDailyLimit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    defaultMonthlyLimit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    depositExpirationHours?: IntFieldUpdateOperationsInput | number
    referenceExpirationHours?: IntFieldUpdateOperationsInput | number
    depositsEnabled?: BoolFieldUpdateOperationsInput | boolean
    withdrawalsEnabled?: BoolFieldUpdateOperationsInput | boolean
    transfersEnabled?: BoolFieldUpdateOperationsInput | boolean
    maintenanceMessage?: NullableStringFieldUpdateOperationsInput | string | null
    announcementMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentConfigurationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    p2pTransferEnabled?: BoolFieldUpdateOperationsInput | boolean
    p2pTransferCommission?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    defaultDailyLimit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    defaultMonthlyLimit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    depositExpirationHours?: IntFieldUpdateOperationsInput | number
    referenceExpirationHours?: IntFieldUpdateOperationsInput | number
    depositsEnabled?: BoolFieldUpdateOperationsInput | boolean
    withdrawalsEnabled?: BoolFieldUpdateOperationsInput | boolean
    transfersEnabled?: BoolFieldUpdateOperationsInput | boolean
    maintenanceMessage?: NullableStringFieldUpdateOperationsInput | string | null
    announcementMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OpenpayCustomerCreateInput = {
    id?: string
    openpayCustomerId: string
    email: string
    name: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutOpenpayCustomerInput
    paymentMethods?: OpenpayPaymentMethodCreateNestedManyWithoutCustomerInput
    transactions?: OpenpayTransactionCreateNestedManyWithoutCustomerInput
  }

  export type OpenpayCustomerUncheckedCreateInput = {
    id?: string
    userId: string
    openpayCustomerId: string
    email: string
    name: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentMethods?: OpenpayPaymentMethodUncheckedCreateNestedManyWithoutCustomerInput
    transactions?: OpenpayTransactionUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type OpenpayCustomerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    openpayCustomerId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOpenpayCustomerNestedInput
    paymentMethods?: OpenpayPaymentMethodUpdateManyWithoutCustomerNestedInput
    transactions?: OpenpayTransactionUpdateManyWithoutCustomerNestedInput
  }

  export type OpenpayCustomerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    openpayCustomerId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethods?: OpenpayPaymentMethodUncheckedUpdateManyWithoutCustomerNestedInput
    transactions?: OpenpayTransactionUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type OpenpayCustomerCreateManyInput = {
    id?: string
    userId: string
    openpayCustomerId: string
    email: string
    name: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OpenpayCustomerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    openpayCustomerId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OpenpayCustomerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    openpayCustomerId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OpenpayTransactionCreateInput = {
    id?: string
    openpayTransactionId: string
    openpayChargeId?: string | null
    amount: number
    currency?: string
    paymentMethod: string
    paymentMethodDetails?: string | null
    openpayStatus: string
    openpayErrorCode?: string | null
    openpayErrorMessage?: string | null
    customerEmail: string
    customerPhone?: string | null
    authorizationCode?: string | null
    operationType?: string | null
    deviceSessionId?: string | null
    riskScore?: number | null
    fraudIndicators?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    chargedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    depositRequest: DepositRequestCreateNestedOneWithoutOpenpayTransactionsInput
    customer: OpenpayCustomerCreateNestedOneWithoutTransactionsInput
    webhookEvents?: OpenpayWebhookEventCreateNestedManyWithoutTransactionInput
  }

  export type OpenpayTransactionUncheckedCreateInput = {
    id?: string
    depositRequestId: string
    openpayTransactionId: string
    openpayChargeId?: string | null
    amount: number
    currency?: string
    paymentMethod: string
    paymentMethodDetails?: string | null
    openpayStatus: string
    openpayErrorCode?: string | null
    openpayErrorMessage?: string | null
    customerId: string
    customerEmail: string
    customerPhone?: string | null
    authorizationCode?: string | null
    operationType?: string | null
    deviceSessionId?: string | null
    riskScore?: number | null
    fraudIndicators?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    chargedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    webhookEvents?: OpenpayWebhookEventUncheckedCreateNestedManyWithoutTransactionInput
  }

  export type OpenpayTransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    openpayTransactionId?: StringFieldUpdateOperationsInput | string
    openpayChargeId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    paymentMethodDetails?: NullableStringFieldUpdateOperationsInput | string | null
    openpayStatus?: StringFieldUpdateOperationsInput | string
    openpayErrorCode?: NullableStringFieldUpdateOperationsInput | string | null
    openpayErrorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    customerEmail?: StringFieldUpdateOperationsInput | string
    customerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    authorizationCode?: NullableStringFieldUpdateOperationsInput | string | null
    operationType?: NullableStringFieldUpdateOperationsInput | string | null
    deviceSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: NullableFloatFieldUpdateOperationsInput | number | null
    fraudIndicators?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    chargedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    depositRequest?: DepositRequestUpdateOneRequiredWithoutOpenpayTransactionsNestedInput
    customer?: OpenpayCustomerUpdateOneRequiredWithoutTransactionsNestedInput
    webhookEvents?: OpenpayWebhookEventUpdateManyWithoutTransactionNestedInput
  }

  export type OpenpayTransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    depositRequestId?: StringFieldUpdateOperationsInput | string
    openpayTransactionId?: StringFieldUpdateOperationsInput | string
    openpayChargeId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    paymentMethodDetails?: NullableStringFieldUpdateOperationsInput | string | null
    openpayStatus?: StringFieldUpdateOperationsInput | string
    openpayErrorCode?: NullableStringFieldUpdateOperationsInput | string | null
    openpayErrorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    customerEmail?: StringFieldUpdateOperationsInput | string
    customerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    authorizationCode?: NullableStringFieldUpdateOperationsInput | string | null
    operationType?: NullableStringFieldUpdateOperationsInput | string | null
    deviceSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: NullableFloatFieldUpdateOperationsInput | number | null
    fraudIndicators?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    chargedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    webhookEvents?: OpenpayWebhookEventUncheckedUpdateManyWithoutTransactionNestedInput
  }

  export type OpenpayTransactionCreateManyInput = {
    id?: string
    depositRequestId: string
    openpayTransactionId: string
    openpayChargeId?: string | null
    amount: number
    currency?: string
    paymentMethod: string
    paymentMethodDetails?: string | null
    openpayStatus: string
    openpayErrorCode?: string | null
    openpayErrorMessage?: string | null
    customerId: string
    customerEmail: string
    customerPhone?: string | null
    authorizationCode?: string | null
    operationType?: string | null
    deviceSessionId?: string | null
    riskScore?: number | null
    fraudIndicators?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    chargedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OpenpayTransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    openpayTransactionId?: StringFieldUpdateOperationsInput | string
    openpayChargeId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    paymentMethodDetails?: NullableStringFieldUpdateOperationsInput | string | null
    openpayStatus?: StringFieldUpdateOperationsInput | string
    openpayErrorCode?: NullableStringFieldUpdateOperationsInput | string | null
    openpayErrorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    customerEmail?: StringFieldUpdateOperationsInput | string
    customerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    authorizationCode?: NullableStringFieldUpdateOperationsInput | string | null
    operationType?: NullableStringFieldUpdateOperationsInput | string | null
    deviceSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: NullableFloatFieldUpdateOperationsInput | number | null
    fraudIndicators?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    chargedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OpenpayTransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    depositRequestId?: StringFieldUpdateOperationsInput | string
    openpayTransactionId?: StringFieldUpdateOperationsInput | string
    openpayChargeId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    paymentMethodDetails?: NullableStringFieldUpdateOperationsInput | string | null
    openpayStatus?: StringFieldUpdateOperationsInput | string
    openpayErrorCode?: NullableStringFieldUpdateOperationsInput | string | null
    openpayErrorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    customerEmail?: StringFieldUpdateOperationsInput | string
    customerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    authorizationCode?: NullableStringFieldUpdateOperationsInput | string | null
    operationType?: NullableStringFieldUpdateOperationsInput | string | null
    deviceSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: NullableFloatFieldUpdateOperationsInput | number | null
    fraudIndicators?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    chargedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OpenpayWebhookEventCreateInput = {
    id?: string
    openpayEventId: string
    eventType: string
    webhookSignature: string
    payload: string
    processedAt?: Date | string | null
    processingStatus?: string
    errorMessage?: string | null
    createdAt?: Date | string
    transaction?: OpenpayTransactionCreateNestedOneWithoutWebhookEventsInput
  }

  export type OpenpayWebhookEventUncheckedCreateInput = {
    id?: string
    openpayEventId: string
    eventType: string
    transactionId?: string | null
    webhookSignature: string
    payload: string
    processedAt?: Date | string | null
    processingStatus?: string
    errorMessage?: string | null
    createdAt?: Date | string
  }

  export type OpenpayWebhookEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    openpayEventId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    webhookSignature?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingStatus?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transaction?: OpenpayTransactionUpdateOneWithoutWebhookEventsNestedInput
  }

  export type OpenpayWebhookEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    openpayEventId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    webhookSignature?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingStatus?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OpenpayWebhookEventCreateManyInput = {
    id?: string
    openpayEventId: string
    eventType: string
    transactionId?: string | null
    webhookSignature: string
    payload: string
    processedAt?: Date | string | null
    processingStatus?: string
    errorMessage?: string | null
    createdAt?: Date | string
  }

  export type OpenpayWebhookEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    openpayEventId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    webhookSignature?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingStatus?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OpenpayWebhookEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    openpayEventId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    webhookSignature?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingStatus?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OpenpayPaymentMethodCreateInput = {
    id?: string
    openpayCardId?: string | null
    cardType?: string | null
    cardBrand?: string | null
    cardNumberMasked?: string | null
    cardHolderName?: string | null
    expirationMonth?: string | null
    expirationYear?: string | null
    isActive?: boolean
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: OpenpayCustomerCreateNestedOneWithoutPaymentMethodsInput
  }

  export type OpenpayPaymentMethodUncheckedCreateInput = {
    id?: string
    customerId: string
    openpayCardId?: string | null
    cardType?: string | null
    cardBrand?: string | null
    cardNumberMasked?: string | null
    cardHolderName?: string | null
    expirationMonth?: string | null
    expirationYear?: string | null
    isActive?: boolean
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OpenpayPaymentMethodUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    openpayCardId?: NullableStringFieldUpdateOperationsInput | string | null
    cardType?: NullableStringFieldUpdateOperationsInput | string | null
    cardBrand?: NullableStringFieldUpdateOperationsInput | string | null
    cardNumberMasked?: NullableStringFieldUpdateOperationsInput | string | null
    cardHolderName?: NullableStringFieldUpdateOperationsInput | string | null
    expirationMonth?: NullableStringFieldUpdateOperationsInput | string | null
    expirationYear?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: OpenpayCustomerUpdateOneRequiredWithoutPaymentMethodsNestedInput
  }

  export type OpenpayPaymentMethodUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    openpayCardId?: NullableStringFieldUpdateOperationsInput | string | null
    cardType?: NullableStringFieldUpdateOperationsInput | string | null
    cardBrand?: NullableStringFieldUpdateOperationsInput | string | null
    cardNumberMasked?: NullableStringFieldUpdateOperationsInput | string | null
    cardHolderName?: NullableStringFieldUpdateOperationsInput | string | null
    expirationMonth?: NullableStringFieldUpdateOperationsInput | string | null
    expirationYear?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OpenpayPaymentMethodCreateManyInput = {
    id?: string
    customerId: string
    openpayCardId?: string | null
    cardType?: string | null
    cardBrand?: string | null
    cardNumberMasked?: string | null
    cardHolderName?: string | null
    expirationMonth?: string | null
    expirationYear?: string | null
    isActive?: boolean
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OpenpayPaymentMethodUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    openpayCardId?: NullableStringFieldUpdateOperationsInput | string | null
    cardType?: NullableStringFieldUpdateOperationsInput | string | null
    cardBrand?: NullableStringFieldUpdateOperationsInput | string | null
    cardNumberMasked?: NullableStringFieldUpdateOperationsInput | string | null
    cardHolderName?: NullableStringFieldUpdateOperationsInput | string | null
    expirationMonth?: NullableStringFieldUpdateOperationsInput | string | null
    expirationYear?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OpenpayPaymentMethodUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    openpayCardId?: NullableStringFieldUpdateOperationsInput | string | null
    cardType?: NullableStringFieldUpdateOperationsInput | string | null
    cardBrand?: NullableStringFieldUpdateOperationsInput | string | null
    cardNumberMasked?: NullableStringFieldUpdateOperationsInput | string | null
    cardHolderName?: NullableStringFieldUpdateOperationsInput | string | null
    expirationMonth?: NullableStringFieldUpdateOperationsInput | string | null
    expirationYear?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type GameParticipantListRelationFilter = {
    every?: GameParticipantWhereInput
    some?: GameParticipantWhereInput
    none?: GameParticipantWhereInput
  }

  export type BingoCardListRelationFilter = {
    every?: BingoCardWhereInput
    some?: BingoCardWhereInput
    none?: BingoCardWhereInput
  }

  export type TransactionListRelationFilter = {
    every?: TransactionWhereInput
    some?: TransactionWhereInput
    none?: TransactionWhereInput
  }

  export type WalletNullableRelationFilter = {
    is?: WalletWhereInput | null
    isNot?: WalletWhereInput | null
  }

  export type DepositRequestListRelationFilter = {
    every?: DepositRequestWhereInput
    some?: DepositRequestWhereInput
    none?: DepositRequestWhereInput
  }

  export type WithdrawalRequestListRelationFilter = {
    every?: WithdrawalRequestWhereInput
    some?: WithdrawalRequestWhereInput
    none?: WithdrawalRequestWhereInput
  }

  export type OpenpayCustomerNullableRelationFilter = {
    is?: OpenpayCustomerWhereInput | null
    isNot?: OpenpayCustomerWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type GameParticipantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BingoCardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepositRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WithdrawalRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    balance?: SortOrder
    pearlsBalance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    isVerified?: SortOrder
    fullName?: SortOrder
    phone?: SortOrder
    dni?: SortOrder
    birthDate?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    balance?: SortOrder
    pearlsBalance?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    balance?: SortOrder
    pearlsBalance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    isVerified?: SortOrder
    fullName?: SortOrder
    phone?: SortOrder
    dni?: SortOrder
    birthDate?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    balance?: SortOrder
    pearlsBalance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    isVerified?: SortOrder
    fullName?: SortOrder
    phone?: SortOrder
    dni?: SortOrder
    birthDate?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    balance?: SortOrder
    pearlsBalance?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type GameCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    maxPlayers?: SortOrder
    cardPrice?: SortOrder
    totalPrize?: SortOrder
    status?: SortOrder
    scheduledAt?: SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrder
    ballsDrawn?: SortOrder
    currentBall?: SortOrder
    winningCards?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameAvgOrderByAggregateInput = {
    maxPlayers?: SortOrder
    cardPrice?: SortOrder
    totalPrize?: SortOrder
    currentBall?: SortOrder
  }

  export type GameMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    maxPlayers?: SortOrder
    cardPrice?: SortOrder
    totalPrize?: SortOrder
    status?: SortOrder
    scheduledAt?: SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrder
    ballsDrawn?: SortOrder
    currentBall?: SortOrder
    winningCards?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    maxPlayers?: SortOrder
    cardPrice?: SortOrder
    totalPrize?: SortOrder
    status?: SortOrder
    scheduledAt?: SortOrder
    startedAt?: SortOrder
    endedAt?: SortOrder
    ballsDrawn?: SortOrder
    currentBall?: SortOrder
    winningCards?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameSumOrderByAggregateInput = {
    maxPlayers?: SortOrder
    cardPrice?: SortOrder
    totalPrize?: SortOrder
    currentBall?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type GameRelationFilter = {
    is?: GameWhereInput
    isNot?: GameWhereInput
  }

  export type GameParticipantUserIdGameIdCompoundUniqueInput = {
    userId: string
    gameId: string
  }

  export type GameParticipantCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    joinedAt?: SortOrder
    cardsCount?: SortOrder
    totalSpent?: SortOrder
    hasWon?: SortOrder
    prizeWon?: SortOrder
  }

  export type GameParticipantAvgOrderByAggregateInput = {
    cardsCount?: SortOrder
    totalSpent?: SortOrder
    prizeWon?: SortOrder
  }

  export type GameParticipantMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    joinedAt?: SortOrder
    cardsCount?: SortOrder
    totalSpent?: SortOrder
    hasWon?: SortOrder
    prizeWon?: SortOrder
  }

  export type GameParticipantMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    joinedAt?: SortOrder
    cardsCount?: SortOrder
    totalSpent?: SortOrder
    hasWon?: SortOrder
    prizeWon?: SortOrder
  }

  export type GameParticipantSumOrderByAggregateInput = {
    cardsCount?: SortOrder
    totalSpent?: SortOrder
    prizeWon?: SortOrder
  }

  export type CardNumberListRelationFilter = {
    every?: CardNumberWhereInput
    some?: CardNumberWhereInput
    none?: CardNumberWhereInput
  }

  export type CardNumberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BingoCardGameIdCardNumberCompoundUniqueInput = {
    gameId: string
    cardNumber: number
  }

  export type BingoCardCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    cardNumber?: SortOrder
    isActive?: SortOrder
    markedNumbers?: SortOrder
    isWinner?: SortOrder
    winningPattern?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BingoCardAvgOrderByAggregateInput = {
    cardNumber?: SortOrder
  }

  export type BingoCardMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    cardNumber?: SortOrder
    isActive?: SortOrder
    markedNumbers?: SortOrder
    isWinner?: SortOrder
    winningPattern?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BingoCardMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    cardNumber?: SortOrder
    isActive?: SortOrder
    markedNumbers?: SortOrder
    isWinner?: SortOrder
    winningPattern?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BingoCardSumOrderByAggregateInput = {
    cardNumber?: SortOrder
  }

  export type BingoCardRelationFilter = {
    is?: BingoCardWhereInput
    isNot?: BingoCardWhereInput
  }

  export type CardNumberCardIdPositionCompoundUniqueInput = {
    cardId: string
    position: number
  }

  export type CardNumberCountOrderByAggregateInput = {
    id?: SortOrder
    cardId?: SortOrder
    position?: SortOrder
    column?: SortOrder
    number?: SortOrder
    isMarked?: SortOrder
    isFree?: SortOrder
  }

  export type CardNumberAvgOrderByAggregateInput = {
    position?: SortOrder
    number?: SortOrder
  }

  export type CardNumberMaxOrderByAggregateInput = {
    id?: SortOrder
    cardId?: SortOrder
    position?: SortOrder
    column?: SortOrder
    number?: SortOrder
    isMarked?: SortOrder
    isFree?: SortOrder
  }

  export type CardNumberMinOrderByAggregateInput = {
    id?: SortOrder
    cardId?: SortOrder
    position?: SortOrder
    column?: SortOrder
    number?: SortOrder
    isMarked?: SortOrder
    isFree?: SortOrder
  }

  export type CardNumberSumOrderByAggregateInput = {
    position?: SortOrder
    number?: SortOrder
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type TransactionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentId?: SortOrder
    pearlsAmount?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    commissionAmount?: SortOrder
    referenceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionAvgOrderByAggregateInput = {
    amount?: SortOrder
    pearlsAmount?: SortOrder
    commissionAmount?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentId?: SortOrder
    pearlsAmount?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    commissionAmount?: SortOrder
    referenceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentId?: SortOrder
    pearlsAmount?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    commissionAmount?: SortOrder
    referenceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionSumOrderByAggregateInput = {
    amount?: SortOrder
    pearlsAmount?: SortOrder
    commissionAmount?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type WalletCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    balance?: SortOrder
    dailyLimit?: SortOrder
    monthlyLimit?: SortOrder
    isActive?: SortOrder
    isFrozen?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WalletAvgOrderByAggregateInput = {
    balance?: SortOrder
    dailyLimit?: SortOrder
    monthlyLimit?: SortOrder
  }

  export type WalletMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    balance?: SortOrder
    dailyLimit?: SortOrder
    monthlyLimit?: SortOrder
    isActive?: SortOrder
    isFrozen?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WalletMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    balance?: SortOrder
    dailyLimit?: SortOrder
    monthlyLimit?: SortOrder
    isActive?: SortOrder
    isFrozen?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WalletSumOrderByAggregateInput = {
    balance?: SortOrder
    dailyLimit?: SortOrder
    monthlyLimit?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type OpenpayTransactionListRelationFilter = {
    every?: OpenpayTransactionWhereInput
    some?: OpenpayTransactionWhereInput
    none?: OpenpayTransactionWhereInput
  }

  export type OpenpayTransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepositRequestCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    pearlsAmount?: SortOrder
    currency?: SortOrder
    paymentMethod?: SortOrder
    referenceCode?: SortOrder
    bankReference?: SortOrder
    bankAccount?: SortOrder
    bankAccountName?: SortOrder
    status?: SortOrder
    adminNotes?: SortOrder
    validatedBy?: SortOrder
    validatedAt?: SortOrder
    proofImage?: SortOrder
    proofImageAdmin?: SortOrder
    transactionId?: SortOrder
    integrationMethod?: SortOrder
    openpayTransactionId?: SortOrder
    autoApprovalEligible?: SortOrder
    processingFee?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type DepositRequestAvgOrderByAggregateInput = {
    amount?: SortOrder
    pearlsAmount?: SortOrder
    processingFee?: SortOrder
  }

  export type DepositRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    pearlsAmount?: SortOrder
    currency?: SortOrder
    paymentMethod?: SortOrder
    referenceCode?: SortOrder
    bankReference?: SortOrder
    bankAccount?: SortOrder
    bankAccountName?: SortOrder
    status?: SortOrder
    adminNotes?: SortOrder
    validatedBy?: SortOrder
    validatedAt?: SortOrder
    proofImage?: SortOrder
    proofImageAdmin?: SortOrder
    transactionId?: SortOrder
    integrationMethod?: SortOrder
    openpayTransactionId?: SortOrder
    autoApprovalEligible?: SortOrder
    processingFee?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type DepositRequestMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    pearlsAmount?: SortOrder
    currency?: SortOrder
    paymentMethod?: SortOrder
    referenceCode?: SortOrder
    bankReference?: SortOrder
    bankAccount?: SortOrder
    bankAccountName?: SortOrder
    status?: SortOrder
    adminNotes?: SortOrder
    validatedBy?: SortOrder
    validatedAt?: SortOrder
    proofImage?: SortOrder
    proofImageAdmin?: SortOrder
    transactionId?: SortOrder
    integrationMethod?: SortOrder
    openpayTransactionId?: SortOrder
    autoApprovalEligible?: SortOrder
    processingFee?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type DepositRequestSumOrderByAggregateInput = {
    amount?: SortOrder
    pearlsAmount?: SortOrder
    processingFee?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type WithdrawalRequestCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    pearlsAmount?: SortOrder
    amountInSoles?: SortOrder
    commission?: SortOrder
    netAmount?: SortOrder
    bankCode?: SortOrder
    accountNumber?: SortOrder
    accountType?: SortOrder
    accountHolderName?: SortOrder
    accountHolderDni?: SortOrder
    status?: SortOrder
    adminNotes?: SortOrder
    processedBy?: SortOrder
    processedAt?: SortOrder
    bankTransactionId?: SortOrder
    transferProof?: SortOrder
    referenceCode?: SortOrder
    transactionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WithdrawalRequestAvgOrderByAggregateInput = {
    pearlsAmount?: SortOrder
    amountInSoles?: SortOrder
    commission?: SortOrder
    netAmount?: SortOrder
  }

  export type WithdrawalRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    pearlsAmount?: SortOrder
    amountInSoles?: SortOrder
    commission?: SortOrder
    netAmount?: SortOrder
    bankCode?: SortOrder
    accountNumber?: SortOrder
    accountType?: SortOrder
    accountHolderName?: SortOrder
    accountHolderDni?: SortOrder
    status?: SortOrder
    adminNotes?: SortOrder
    processedBy?: SortOrder
    processedAt?: SortOrder
    bankTransactionId?: SortOrder
    transferProof?: SortOrder
    referenceCode?: SortOrder
    transactionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WithdrawalRequestMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    pearlsAmount?: SortOrder
    amountInSoles?: SortOrder
    commission?: SortOrder
    netAmount?: SortOrder
    bankCode?: SortOrder
    accountNumber?: SortOrder
    accountType?: SortOrder
    accountHolderName?: SortOrder
    accountHolderDni?: SortOrder
    status?: SortOrder
    adminNotes?: SortOrder
    processedBy?: SortOrder
    processedAt?: SortOrder
    bankTransactionId?: SortOrder
    transferProof?: SortOrder
    referenceCode?: SortOrder
    transactionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WithdrawalRequestSumOrderByAggregateInput = {
    pearlsAmount?: SortOrder
    amountInSoles?: SortOrder
    commission?: SortOrder
    netAmount?: SortOrder
  }

  export type PaymentReferenceCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    metadata?: SortOrder
    isUsed?: SortOrder
    usedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type PaymentReferenceAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type PaymentReferenceMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    metadata?: SortOrder
    isUsed?: SortOrder
    usedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type PaymentReferenceMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    metadata?: SortOrder
    isUsed?: SortOrder
    usedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type PaymentReferenceSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type BankConfigurationCountOrderByAggregateInput = {
    id?: SortOrder
    bankCode?: SortOrder
    bankName?: SortOrder
    accountNumber?: SortOrder
    accountType?: SortOrder
    accountHolderName?: SortOrder
    cci?: SortOrder
    isActive?: SortOrder
    minDeposit?: SortOrder
    maxDeposit?: SortOrder
    depositCommission?: SortOrder
    instructions?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BankConfigurationAvgOrderByAggregateInput = {
    minDeposit?: SortOrder
    maxDeposit?: SortOrder
    depositCommission?: SortOrder
  }

  export type BankConfigurationMaxOrderByAggregateInput = {
    id?: SortOrder
    bankCode?: SortOrder
    bankName?: SortOrder
    accountNumber?: SortOrder
    accountType?: SortOrder
    accountHolderName?: SortOrder
    cci?: SortOrder
    isActive?: SortOrder
    minDeposit?: SortOrder
    maxDeposit?: SortOrder
    depositCommission?: SortOrder
    instructions?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BankConfigurationMinOrderByAggregateInput = {
    id?: SortOrder
    bankCode?: SortOrder
    bankName?: SortOrder
    accountNumber?: SortOrder
    accountType?: SortOrder
    accountHolderName?: SortOrder
    cci?: SortOrder
    isActive?: SortOrder
    minDeposit?: SortOrder
    maxDeposit?: SortOrder
    depositCommission?: SortOrder
    instructions?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BankConfigurationSumOrderByAggregateInput = {
    minDeposit?: SortOrder
    maxDeposit?: SortOrder
    depositCommission?: SortOrder
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    adminId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    oldValue?: SortOrder
    newValue?: SortOrder
    description?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    sessionId?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    adminId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    oldValue?: SortOrder
    newValue?: SortOrder
    description?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    sessionId?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    adminId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    oldValue?: SortOrder
    newValue?: SortOrder
    description?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    sessionId?: SortOrder
    createdAt?: SortOrder
  }

  export type PaymentConfigurationCountOrderByAggregateInput = {
    id?: SortOrder
    p2pTransferEnabled?: SortOrder
    p2pTransferCommission?: SortOrder
    defaultDailyLimit?: SortOrder
    defaultMonthlyLimit?: SortOrder
    depositExpirationHours?: SortOrder
    referenceExpirationHours?: SortOrder
    depositsEnabled?: SortOrder
    withdrawalsEnabled?: SortOrder
    transfersEnabled?: SortOrder
    maintenanceMessage?: SortOrder
    announcementMessage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentConfigurationAvgOrderByAggregateInput = {
    p2pTransferCommission?: SortOrder
    defaultDailyLimit?: SortOrder
    defaultMonthlyLimit?: SortOrder
    depositExpirationHours?: SortOrder
    referenceExpirationHours?: SortOrder
  }

  export type PaymentConfigurationMaxOrderByAggregateInput = {
    id?: SortOrder
    p2pTransferEnabled?: SortOrder
    p2pTransferCommission?: SortOrder
    defaultDailyLimit?: SortOrder
    defaultMonthlyLimit?: SortOrder
    depositExpirationHours?: SortOrder
    referenceExpirationHours?: SortOrder
    depositsEnabled?: SortOrder
    withdrawalsEnabled?: SortOrder
    transfersEnabled?: SortOrder
    maintenanceMessage?: SortOrder
    announcementMessage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentConfigurationMinOrderByAggregateInput = {
    id?: SortOrder
    p2pTransferEnabled?: SortOrder
    p2pTransferCommission?: SortOrder
    defaultDailyLimit?: SortOrder
    defaultMonthlyLimit?: SortOrder
    depositExpirationHours?: SortOrder
    referenceExpirationHours?: SortOrder
    depositsEnabled?: SortOrder
    withdrawalsEnabled?: SortOrder
    transfersEnabled?: SortOrder
    maintenanceMessage?: SortOrder
    announcementMessage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentConfigurationSumOrderByAggregateInput = {
    p2pTransferCommission?: SortOrder
    defaultDailyLimit?: SortOrder
    defaultMonthlyLimit?: SortOrder
    depositExpirationHours?: SortOrder
    referenceExpirationHours?: SortOrder
  }

  export type OpenpayPaymentMethodListRelationFilter = {
    every?: OpenpayPaymentMethodWhereInput
    some?: OpenpayPaymentMethodWhereInput
    none?: OpenpayPaymentMethodWhereInput
  }

  export type OpenpayPaymentMethodOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OpenpayCustomerCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    openpayCustomerId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OpenpayCustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    openpayCustomerId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OpenpayCustomerMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    openpayCustomerId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type DepositRequestRelationFilter = {
    is?: DepositRequestWhereInput
    isNot?: DepositRequestWhereInput
  }

  export type OpenpayCustomerRelationFilter = {
    is?: OpenpayCustomerWhereInput
    isNot?: OpenpayCustomerWhereInput
  }

  export type OpenpayWebhookEventListRelationFilter = {
    every?: OpenpayWebhookEventWhereInput
    some?: OpenpayWebhookEventWhereInput
    none?: OpenpayWebhookEventWhereInput
  }

  export type OpenpayWebhookEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OpenpayTransactionCountOrderByAggregateInput = {
    id?: SortOrder
    depositRequestId?: SortOrder
    openpayTransactionId?: SortOrder
    openpayChargeId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    paymentMethod?: SortOrder
    paymentMethodDetails?: SortOrder
    openpayStatus?: SortOrder
    openpayErrorCode?: SortOrder
    openpayErrorMessage?: SortOrder
    customerId?: SortOrder
    customerEmail?: SortOrder
    customerPhone?: SortOrder
    authorizationCode?: SortOrder
    operationType?: SortOrder
    deviceSessionId?: SortOrder
    riskScore?: SortOrder
    fraudIndicators?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    chargedAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OpenpayTransactionAvgOrderByAggregateInput = {
    amount?: SortOrder
    riskScore?: SortOrder
  }

  export type OpenpayTransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    depositRequestId?: SortOrder
    openpayTransactionId?: SortOrder
    openpayChargeId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    paymentMethod?: SortOrder
    paymentMethodDetails?: SortOrder
    openpayStatus?: SortOrder
    openpayErrorCode?: SortOrder
    openpayErrorMessage?: SortOrder
    customerId?: SortOrder
    customerEmail?: SortOrder
    customerPhone?: SortOrder
    authorizationCode?: SortOrder
    operationType?: SortOrder
    deviceSessionId?: SortOrder
    riskScore?: SortOrder
    fraudIndicators?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    chargedAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OpenpayTransactionMinOrderByAggregateInput = {
    id?: SortOrder
    depositRequestId?: SortOrder
    openpayTransactionId?: SortOrder
    openpayChargeId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    paymentMethod?: SortOrder
    paymentMethodDetails?: SortOrder
    openpayStatus?: SortOrder
    openpayErrorCode?: SortOrder
    openpayErrorMessage?: SortOrder
    customerId?: SortOrder
    customerEmail?: SortOrder
    customerPhone?: SortOrder
    authorizationCode?: SortOrder
    operationType?: SortOrder
    deviceSessionId?: SortOrder
    riskScore?: SortOrder
    fraudIndicators?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    chargedAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OpenpayTransactionSumOrderByAggregateInput = {
    amount?: SortOrder
    riskScore?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type OpenpayTransactionNullableRelationFilter = {
    is?: OpenpayTransactionWhereInput | null
    isNot?: OpenpayTransactionWhereInput | null
  }

  export type OpenpayWebhookEventCountOrderByAggregateInput = {
    id?: SortOrder
    openpayEventId?: SortOrder
    eventType?: SortOrder
    transactionId?: SortOrder
    webhookSignature?: SortOrder
    payload?: SortOrder
    processedAt?: SortOrder
    processingStatus?: SortOrder
    errorMessage?: SortOrder
    createdAt?: SortOrder
  }

  export type OpenpayWebhookEventMaxOrderByAggregateInput = {
    id?: SortOrder
    openpayEventId?: SortOrder
    eventType?: SortOrder
    transactionId?: SortOrder
    webhookSignature?: SortOrder
    payload?: SortOrder
    processedAt?: SortOrder
    processingStatus?: SortOrder
    errorMessage?: SortOrder
    createdAt?: SortOrder
  }

  export type OpenpayWebhookEventMinOrderByAggregateInput = {
    id?: SortOrder
    openpayEventId?: SortOrder
    eventType?: SortOrder
    transactionId?: SortOrder
    webhookSignature?: SortOrder
    payload?: SortOrder
    processedAt?: SortOrder
    processingStatus?: SortOrder
    errorMessage?: SortOrder
    createdAt?: SortOrder
  }

  export type OpenpayPaymentMethodCountOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    openpayCardId?: SortOrder
    cardType?: SortOrder
    cardBrand?: SortOrder
    cardNumberMasked?: SortOrder
    cardHolderName?: SortOrder
    expirationMonth?: SortOrder
    expirationYear?: SortOrder
    isActive?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OpenpayPaymentMethodMaxOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    openpayCardId?: SortOrder
    cardType?: SortOrder
    cardBrand?: SortOrder
    cardNumberMasked?: SortOrder
    cardHolderName?: SortOrder
    expirationMonth?: SortOrder
    expirationYear?: SortOrder
    isActive?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OpenpayPaymentMethodMinOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    openpayCardId?: SortOrder
    cardType?: SortOrder
    cardBrand?: SortOrder
    cardNumberMasked?: SortOrder
    cardHolderName?: SortOrder
    expirationMonth?: SortOrder
    expirationYear?: SortOrder
    isActive?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameParticipantCreateNestedManyWithoutUserInput = {
    create?: XOR<GameParticipantCreateWithoutUserInput, GameParticipantUncheckedCreateWithoutUserInput> | GameParticipantCreateWithoutUserInput[] | GameParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GameParticipantCreateOrConnectWithoutUserInput | GameParticipantCreateOrConnectWithoutUserInput[]
    createMany?: GameParticipantCreateManyUserInputEnvelope
    connect?: GameParticipantWhereUniqueInput | GameParticipantWhereUniqueInput[]
  }

  export type BingoCardCreateNestedManyWithoutUserInput = {
    create?: XOR<BingoCardCreateWithoutUserInput, BingoCardUncheckedCreateWithoutUserInput> | BingoCardCreateWithoutUserInput[] | BingoCardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BingoCardCreateOrConnectWithoutUserInput | BingoCardCreateOrConnectWithoutUserInput[]
    createMany?: BingoCardCreateManyUserInputEnvelope
    connect?: BingoCardWhereUniqueInput | BingoCardWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutUserInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type WalletCreateNestedOneWithoutUserInput = {
    create?: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput>
    connectOrCreate?: WalletCreateOrConnectWithoutUserInput
    connect?: WalletWhereUniqueInput
  }

  export type DepositRequestCreateNestedManyWithoutUserInput = {
    create?: XOR<DepositRequestCreateWithoutUserInput, DepositRequestUncheckedCreateWithoutUserInput> | DepositRequestCreateWithoutUserInput[] | DepositRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DepositRequestCreateOrConnectWithoutUserInput | DepositRequestCreateOrConnectWithoutUserInput[]
    createMany?: DepositRequestCreateManyUserInputEnvelope
    connect?: DepositRequestWhereUniqueInput | DepositRequestWhereUniqueInput[]
  }

  export type WithdrawalRequestCreateNestedManyWithoutUserInput = {
    create?: XOR<WithdrawalRequestCreateWithoutUserInput, WithdrawalRequestUncheckedCreateWithoutUserInput> | WithdrawalRequestCreateWithoutUserInput[] | WithdrawalRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WithdrawalRequestCreateOrConnectWithoutUserInput | WithdrawalRequestCreateOrConnectWithoutUserInput[]
    createMany?: WithdrawalRequestCreateManyUserInputEnvelope
    connect?: WithdrawalRequestWhereUniqueInput | WithdrawalRequestWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutFromUserInput = {
    create?: XOR<TransactionCreateWithoutFromUserInput, TransactionUncheckedCreateWithoutFromUserInput> | TransactionCreateWithoutFromUserInput[] | TransactionUncheckedCreateWithoutFromUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutFromUserInput | TransactionCreateOrConnectWithoutFromUserInput[]
    createMany?: TransactionCreateManyFromUserInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutToUserInput = {
    create?: XOR<TransactionCreateWithoutToUserInput, TransactionUncheckedCreateWithoutToUserInput> | TransactionCreateWithoutToUserInput[] | TransactionUncheckedCreateWithoutToUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutToUserInput | TransactionCreateOrConnectWithoutToUserInput[]
    createMany?: TransactionCreateManyToUserInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type OpenpayCustomerCreateNestedOneWithoutUserInput = {
    create?: XOR<OpenpayCustomerCreateWithoutUserInput, OpenpayCustomerUncheckedCreateWithoutUserInput>
    connectOrCreate?: OpenpayCustomerCreateOrConnectWithoutUserInput
    connect?: OpenpayCustomerWhereUniqueInput
  }

  export type GameParticipantUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GameParticipantCreateWithoutUserInput, GameParticipantUncheckedCreateWithoutUserInput> | GameParticipantCreateWithoutUserInput[] | GameParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GameParticipantCreateOrConnectWithoutUserInput | GameParticipantCreateOrConnectWithoutUserInput[]
    createMany?: GameParticipantCreateManyUserInputEnvelope
    connect?: GameParticipantWhereUniqueInput | GameParticipantWhereUniqueInput[]
  }

  export type BingoCardUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BingoCardCreateWithoutUserInput, BingoCardUncheckedCreateWithoutUserInput> | BingoCardCreateWithoutUserInput[] | BingoCardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BingoCardCreateOrConnectWithoutUserInput | BingoCardCreateOrConnectWithoutUserInput[]
    createMany?: BingoCardCreateManyUserInputEnvelope
    connect?: BingoCardWhereUniqueInput | BingoCardWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type WalletUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput>
    connectOrCreate?: WalletCreateOrConnectWithoutUserInput
    connect?: WalletWhereUniqueInput
  }

  export type DepositRequestUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DepositRequestCreateWithoutUserInput, DepositRequestUncheckedCreateWithoutUserInput> | DepositRequestCreateWithoutUserInput[] | DepositRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DepositRequestCreateOrConnectWithoutUserInput | DepositRequestCreateOrConnectWithoutUserInput[]
    createMany?: DepositRequestCreateManyUserInputEnvelope
    connect?: DepositRequestWhereUniqueInput | DepositRequestWhereUniqueInput[]
  }

  export type WithdrawalRequestUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WithdrawalRequestCreateWithoutUserInput, WithdrawalRequestUncheckedCreateWithoutUserInput> | WithdrawalRequestCreateWithoutUserInput[] | WithdrawalRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WithdrawalRequestCreateOrConnectWithoutUserInput | WithdrawalRequestCreateOrConnectWithoutUserInput[]
    createMany?: WithdrawalRequestCreateManyUserInputEnvelope
    connect?: WithdrawalRequestWhereUniqueInput | WithdrawalRequestWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutFromUserInput = {
    create?: XOR<TransactionCreateWithoutFromUserInput, TransactionUncheckedCreateWithoutFromUserInput> | TransactionCreateWithoutFromUserInput[] | TransactionUncheckedCreateWithoutFromUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutFromUserInput | TransactionCreateOrConnectWithoutFromUserInput[]
    createMany?: TransactionCreateManyFromUserInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutToUserInput = {
    create?: XOR<TransactionCreateWithoutToUserInput, TransactionUncheckedCreateWithoutToUserInput> | TransactionCreateWithoutToUserInput[] | TransactionUncheckedCreateWithoutToUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutToUserInput | TransactionCreateOrConnectWithoutToUserInput[]
    createMany?: TransactionCreateManyToUserInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type OpenpayCustomerUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<OpenpayCustomerCreateWithoutUserInput, OpenpayCustomerUncheckedCreateWithoutUserInput>
    connectOrCreate?: OpenpayCustomerCreateOrConnectWithoutUserInput
    connect?: OpenpayCustomerWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type GameParticipantUpdateManyWithoutUserNestedInput = {
    create?: XOR<GameParticipantCreateWithoutUserInput, GameParticipantUncheckedCreateWithoutUserInput> | GameParticipantCreateWithoutUserInput[] | GameParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GameParticipantCreateOrConnectWithoutUserInput | GameParticipantCreateOrConnectWithoutUserInput[]
    upsert?: GameParticipantUpsertWithWhereUniqueWithoutUserInput | GameParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GameParticipantCreateManyUserInputEnvelope
    set?: GameParticipantWhereUniqueInput | GameParticipantWhereUniqueInput[]
    disconnect?: GameParticipantWhereUniqueInput | GameParticipantWhereUniqueInput[]
    delete?: GameParticipantWhereUniqueInput | GameParticipantWhereUniqueInput[]
    connect?: GameParticipantWhereUniqueInput | GameParticipantWhereUniqueInput[]
    update?: GameParticipantUpdateWithWhereUniqueWithoutUserInput | GameParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GameParticipantUpdateManyWithWhereWithoutUserInput | GameParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GameParticipantScalarWhereInput | GameParticipantScalarWhereInput[]
  }

  export type BingoCardUpdateManyWithoutUserNestedInput = {
    create?: XOR<BingoCardCreateWithoutUserInput, BingoCardUncheckedCreateWithoutUserInput> | BingoCardCreateWithoutUserInput[] | BingoCardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BingoCardCreateOrConnectWithoutUserInput | BingoCardCreateOrConnectWithoutUserInput[]
    upsert?: BingoCardUpsertWithWhereUniqueWithoutUserInput | BingoCardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BingoCardCreateManyUserInputEnvelope
    set?: BingoCardWhereUniqueInput | BingoCardWhereUniqueInput[]
    disconnect?: BingoCardWhereUniqueInput | BingoCardWhereUniqueInput[]
    delete?: BingoCardWhereUniqueInput | BingoCardWhereUniqueInput[]
    connect?: BingoCardWhereUniqueInput | BingoCardWhereUniqueInput[]
    update?: BingoCardUpdateWithWhereUniqueWithoutUserInput | BingoCardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BingoCardUpdateManyWithWhereWithoutUserInput | BingoCardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BingoCardScalarWhereInput | BingoCardScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutUserNestedInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutUserInput | TransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutUserInput | TransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutUserInput | TransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type WalletUpdateOneWithoutUserNestedInput = {
    create?: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput>
    connectOrCreate?: WalletCreateOrConnectWithoutUserInput
    upsert?: WalletUpsertWithoutUserInput
    disconnect?: WalletWhereInput | boolean
    delete?: WalletWhereInput | boolean
    connect?: WalletWhereUniqueInput
    update?: XOR<XOR<WalletUpdateToOneWithWhereWithoutUserInput, WalletUpdateWithoutUserInput>, WalletUncheckedUpdateWithoutUserInput>
  }

  export type DepositRequestUpdateManyWithoutUserNestedInput = {
    create?: XOR<DepositRequestCreateWithoutUserInput, DepositRequestUncheckedCreateWithoutUserInput> | DepositRequestCreateWithoutUserInput[] | DepositRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DepositRequestCreateOrConnectWithoutUserInput | DepositRequestCreateOrConnectWithoutUserInput[]
    upsert?: DepositRequestUpsertWithWhereUniqueWithoutUserInput | DepositRequestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DepositRequestCreateManyUserInputEnvelope
    set?: DepositRequestWhereUniqueInput | DepositRequestWhereUniqueInput[]
    disconnect?: DepositRequestWhereUniqueInput | DepositRequestWhereUniqueInput[]
    delete?: DepositRequestWhereUniqueInput | DepositRequestWhereUniqueInput[]
    connect?: DepositRequestWhereUniqueInput | DepositRequestWhereUniqueInput[]
    update?: DepositRequestUpdateWithWhereUniqueWithoutUserInput | DepositRequestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DepositRequestUpdateManyWithWhereWithoutUserInput | DepositRequestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DepositRequestScalarWhereInput | DepositRequestScalarWhereInput[]
  }

  export type WithdrawalRequestUpdateManyWithoutUserNestedInput = {
    create?: XOR<WithdrawalRequestCreateWithoutUserInput, WithdrawalRequestUncheckedCreateWithoutUserInput> | WithdrawalRequestCreateWithoutUserInput[] | WithdrawalRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WithdrawalRequestCreateOrConnectWithoutUserInput | WithdrawalRequestCreateOrConnectWithoutUserInput[]
    upsert?: WithdrawalRequestUpsertWithWhereUniqueWithoutUserInput | WithdrawalRequestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WithdrawalRequestCreateManyUserInputEnvelope
    set?: WithdrawalRequestWhereUniqueInput | WithdrawalRequestWhereUniqueInput[]
    disconnect?: WithdrawalRequestWhereUniqueInput | WithdrawalRequestWhereUniqueInput[]
    delete?: WithdrawalRequestWhereUniqueInput | WithdrawalRequestWhereUniqueInput[]
    connect?: WithdrawalRequestWhereUniqueInput | WithdrawalRequestWhereUniqueInput[]
    update?: WithdrawalRequestUpdateWithWhereUniqueWithoutUserInput | WithdrawalRequestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WithdrawalRequestUpdateManyWithWhereWithoutUserInput | WithdrawalRequestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WithdrawalRequestScalarWhereInput | WithdrawalRequestScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutFromUserNestedInput = {
    create?: XOR<TransactionCreateWithoutFromUserInput, TransactionUncheckedCreateWithoutFromUserInput> | TransactionCreateWithoutFromUserInput[] | TransactionUncheckedCreateWithoutFromUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutFromUserInput | TransactionCreateOrConnectWithoutFromUserInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutFromUserInput | TransactionUpsertWithWhereUniqueWithoutFromUserInput[]
    createMany?: TransactionCreateManyFromUserInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutFromUserInput | TransactionUpdateWithWhereUniqueWithoutFromUserInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutFromUserInput | TransactionUpdateManyWithWhereWithoutFromUserInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutToUserNestedInput = {
    create?: XOR<TransactionCreateWithoutToUserInput, TransactionUncheckedCreateWithoutToUserInput> | TransactionCreateWithoutToUserInput[] | TransactionUncheckedCreateWithoutToUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutToUserInput | TransactionCreateOrConnectWithoutToUserInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutToUserInput | TransactionUpsertWithWhereUniqueWithoutToUserInput[]
    createMany?: TransactionCreateManyToUserInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutToUserInput | TransactionUpdateWithWhereUniqueWithoutToUserInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutToUserInput | TransactionUpdateManyWithWhereWithoutToUserInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type OpenpayCustomerUpdateOneWithoutUserNestedInput = {
    create?: XOR<OpenpayCustomerCreateWithoutUserInput, OpenpayCustomerUncheckedCreateWithoutUserInput>
    connectOrCreate?: OpenpayCustomerCreateOrConnectWithoutUserInput
    upsert?: OpenpayCustomerUpsertWithoutUserInput
    disconnect?: OpenpayCustomerWhereInput | boolean
    delete?: OpenpayCustomerWhereInput | boolean
    connect?: OpenpayCustomerWhereUniqueInput
    update?: XOR<XOR<OpenpayCustomerUpdateToOneWithWhereWithoutUserInput, OpenpayCustomerUpdateWithoutUserInput>, OpenpayCustomerUncheckedUpdateWithoutUserInput>
  }

  export type GameParticipantUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GameParticipantCreateWithoutUserInput, GameParticipantUncheckedCreateWithoutUserInput> | GameParticipantCreateWithoutUserInput[] | GameParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GameParticipantCreateOrConnectWithoutUserInput | GameParticipantCreateOrConnectWithoutUserInput[]
    upsert?: GameParticipantUpsertWithWhereUniqueWithoutUserInput | GameParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GameParticipantCreateManyUserInputEnvelope
    set?: GameParticipantWhereUniqueInput | GameParticipantWhereUniqueInput[]
    disconnect?: GameParticipantWhereUniqueInput | GameParticipantWhereUniqueInput[]
    delete?: GameParticipantWhereUniqueInput | GameParticipantWhereUniqueInput[]
    connect?: GameParticipantWhereUniqueInput | GameParticipantWhereUniqueInput[]
    update?: GameParticipantUpdateWithWhereUniqueWithoutUserInput | GameParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GameParticipantUpdateManyWithWhereWithoutUserInput | GameParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GameParticipantScalarWhereInput | GameParticipantScalarWhereInput[]
  }

  export type BingoCardUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BingoCardCreateWithoutUserInput, BingoCardUncheckedCreateWithoutUserInput> | BingoCardCreateWithoutUserInput[] | BingoCardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BingoCardCreateOrConnectWithoutUserInput | BingoCardCreateOrConnectWithoutUserInput[]
    upsert?: BingoCardUpsertWithWhereUniqueWithoutUserInput | BingoCardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BingoCardCreateManyUserInputEnvelope
    set?: BingoCardWhereUniqueInput | BingoCardWhereUniqueInput[]
    disconnect?: BingoCardWhereUniqueInput | BingoCardWhereUniqueInput[]
    delete?: BingoCardWhereUniqueInput | BingoCardWhereUniqueInput[]
    connect?: BingoCardWhereUniqueInput | BingoCardWhereUniqueInput[]
    update?: BingoCardUpdateWithWhereUniqueWithoutUserInput | BingoCardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BingoCardUpdateManyWithWhereWithoutUserInput | BingoCardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BingoCardScalarWhereInput | BingoCardScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutUserInput | TransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutUserInput | TransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutUserInput | TransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type WalletUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput>
    connectOrCreate?: WalletCreateOrConnectWithoutUserInput
    upsert?: WalletUpsertWithoutUserInput
    disconnect?: WalletWhereInput | boolean
    delete?: WalletWhereInput | boolean
    connect?: WalletWhereUniqueInput
    update?: XOR<XOR<WalletUpdateToOneWithWhereWithoutUserInput, WalletUpdateWithoutUserInput>, WalletUncheckedUpdateWithoutUserInput>
  }

  export type DepositRequestUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DepositRequestCreateWithoutUserInput, DepositRequestUncheckedCreateWithoutUserInput> | DepositRequestCreateWithoutUserInput[] | DepositRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DepositRequestCreateOrConnectWithoutUserInput | DepositRequestCreateOrConnectWithoutUserInput[]
    upsert?: DepositRequestUpsertWithWhereUniqueWithoutUserInput | DepositRequestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DepositRequestCreateManyUserInputEnvelope
    set?: DepositRequestWhereUniqueInput | DepositRequestWhereUniqueInput[]
    disconnect?: DepositRequestWhereUniqueInput | DepositRequestWhereUniqueInput[]
    delete?: DepositRequestWhereUniqueInput | DepositRequestWhereUniqueInput[]
    connect?: DepositRequestWhereUniqueInput | DepositRequestWhereUniqueInput[]
    update?: DepositRequestUpdateWithWhereUniqueWithoutUserInput | DepositRequestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DepositRequestUpdateManyWithWhereWithoutUserInput | DepositRequestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DepositRequestScalarWhereInput | DepositRequestScalarWhereInput[]
  }

  export type WithdrawalRequestUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WithdrawalRequestCreateWithoutUserInput, WithdrawalRequestUncheckedCreateWithoutUserInput> | WithdrawalRequestCreateWithoutUserInput[] | WithdrawalRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WithdrawalRequestCreateOrConnectWithoutUserInput | WithdrawalRequestCreateOrConnectWithoutUserInput[]
    upsert?: WithdrawalRequestUpsertWithWhereUniqueWithoutUserInput | WithdrawalRequestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WithdrawalRequestCreateManyUserInputEnvelope
    set?: WithdrawalRequestWhereUniqueInput | WithdrawalRequestWhereUniqueInput[]
    disconnect?: WithdrawalRequestWhereUniqueInput | WithdrawalRequestWhereUniqueInput[]
    delete?: WithdrawalRequestWhereUniqueInput | WithdrawalRequestWhereUniqueInput[]
    connect?: WithdrawalRequestWhereUniqueInput | WithdrawalRequestWhereUniqueInput[]
    update?: WithdrawalRequestUpdateWithWhereUniqueWithoutUserInput | WithdrawalRequestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WithdrawalRequestUpdateManyWithWhereWithoutUserInput | WithdrawalRequestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WithdrawalRequestScalarWhereInput | WithdrawalRequestScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutFromUserNestedInput = {
    create?: XOR<TransactionCreateWithoutFromUserInput, TransactionUncheckedCreateWithoutFromUserInput> | TransactionCreateWithoutFromUserInput[] | TransactionUncheckedCreateWithoutFromUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutFromUserInput | TransactionCreateOrConnectWithoutFromUserInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutFromUserInput | TransactionUpsertWithWhereUniqueWithoutFromUserInput[]
    createMany?: TransactionCreateManyFromUserInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutFromUserInput | TransactionUpdateWithWhereUniqueWithoutFromUserInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutFromUserInput | TransactionUpdateManyWithWhereWithoutFromUserInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutToUserNestedInput = {
    create?: XOR<TransactionCreateWithoutToUserInput, TransactionUncheckedCreateWithoutToUserInput> | TransactionCreateWithoutToUserInput[] | TransactionUncheckedCreateWithoutToUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutToUserInput | TransactionCreateOrConnectWithoutToUserInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutToUserInput | TransactionUpsertWithWhereUniqueWithoutToUserInput[]
    createMany?: TransactionCreateManyToUserInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutToUserInput | TransactionUpdateWithWhereUniqueWithoutToUserInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutToUserInput | TransactionUpdateManyWithWhereWithoutToUserInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type OpenpayCustomerUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<OpenpayCustomerCreateWithoutUserInput, OpenpayCustomerUncheckedCreateWithoutUserInput>
    connectOrCreate?: OpenpayCustomerCreateOrConnectWithoutUserInput
    upsert?: OpenpayCustomerUpsertWithoutUserInput
    disconnect?: OpenpayCustomerWhereInput | boolean
    delete?: OpenpayCustomerWhereInput | boolean
    connect?: OpenpayCustomerWhereUniqueInput
    update?: XOR<XOR<OpenpayCustomerUpdateToOneWithWhereWithoutUserInput, OpenpayCustomerUpdateWithoutUserInput>, OpenpayCustomerUncheckedUpdateWithoutUserInput>
  }

  export type GameParticipantCreateNestedManyWithoutGameInput = {
    create?: XOR<GameParticipantCreateWithoutGameInput, GameParticipantUncheckedCreateWithoutGameInput> | GameParticipantCreateWithoutGameInput[] | GameParticipantUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameParticipantCreateOrConnectWithoutGameInput | GameParticipantCreateOrConnectWithoutGameInput[]
    createMany?: GameParticipantCreateManyGameInputEnvelope
    connect?: GameParticipantWhereUniqueInput | GameParticipantWhereUniqueInput[]
  }

  export type BingoCardCreateNestedManyWithoutGameInput = {
    create?: XOR<BingoCardCreateWithoutGameInput, BingoCardUncheckedCreateWithoutGameInput> | BingoCardCreateWithoutGameInput[] | BingoCardUncheckedCreateWithoutGameInput[]
    connectOrCreate?: BingoCardCreateOrConnectWithoutGameInput | BingoCardCreateOrConnectWithoutGameInput[]
    createMany?: BingoCardCreateManyGameInputEnvelope
    connect?: BingoCardWhereUniqueInput | BingoCardWhereUniqueInput[]
  }

  export type GameParticipantUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<GameParticipantCreateWithoutGameInput, GameParticipantUncheckedCreateWithoutGameInput> | GameParticipantCreateWithoutGameInput[] | GameParticipantUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameParticipantCreateOrConnectWithoutGameInput | GameParticipantCreateOrConnectWithoutGameInput[]
    createMany?: GameParticipantCreateManyGameInputEnvelope
    connect?: GameParticipantWhereUniqueInput | GameParticipantWhereUniqueInput[]
  }

  export type BingoCardUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<BingoCardCreateWithoutGameInput, BingoCardUncheckedCreateWithoutGameInput> | BingoCardCreateWithoutGameInput[] | BingoCardUncheckedCreateWithoutGameInput[]
    connectOrCreate?: BingoCardCreateOrConnectWithoutGameInput | BingoCardCreateOrConnectWithoutGameInput[]
    createMany?: BingoCardCreateManyGameInputEnvelope
    connect?: BingoCardWhereUniqueInput | BingoCardWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type GameParticipantUpdateManyWithoutGameNestedInput = {
    create?: XOR<GameParticipantCreateWithoutGameInput, GameParticipantUncheckedCreateWithoutGameInput> | GameParticipantCreateWithoutGameInput[] | GameParticipantUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameParticipantCreateOrConnectWithoutGameInput | GameParticipantCreateOrConnectWithoutGameInput[]
    upsert?: GameParticipantUpsertWithWhereUniqueWithoutGameInput | GameParticipantUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: GameParticipantCreateManyGameInputEnvelope
    set?: GameParticipantWhereUniqueInput | GameParticipantWhereUniqueInput[]
    disconnect?: GameParticipantWhereUniqueInput | GameParticipantWhereUniqueInput[]
    delete?: GameParticipantWhereUniqueInput | GameParticipantWhereUniqueInput[]
    connect?: GameParticipantWhereUniqueInput | GameParticipantWhereUniqueInput[]
    update?: GameParticipantUpdateWithWhereUniqueWithoutGameInput | GameParticipantUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: GameParticipantUpdateManyWithWhereWithoutGameInput | GameParticipantUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: GameParticipantScalarWhereInput | GameParticipantScalarWhereInput[]
  }

  export type BingoCardUpdateManyWithoutGameNestedInput = {
    create?: XOR<BingoCardCreateWithoutGameInput, BingoCardUncheckedCreateWithoutGameInput> | BingoCardCreateWithoutGameInput[] | BingoCardUncheckedCreateWithoutGameInput[]
    connectOrCreate?: BingoCardCreateOrConnectWithoutGameInput | BingoCardCreateOrConnectWithoutGameInput[]
    upsert?: BingoCardUpsertWithWhereUniqueWithoutGameInput | BingoCardUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: BingoCardCreateManyGameInputEnvelope
    set?: BingoCardWhereUniqueInput | BingoCardWhereUniqueInput[]
    disconnect?: BingoCardWhereUniqueInput | BingoCardWhereUniqueInput[]
    delete?: BingoCardWhereUniqueInput | BingoCardWhereUniqueInput[]
    connect?: BingoCardWhereUniqueInput | BingoCardWhereUniqueInput[]
    update?: BingoCardUpdateWithWhereUniqueWithoutGameInput | BingoCardUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: BingoCardUpdateManyWithWhereWithoutGameInput | BingoCardUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: BingoCardScalarWhereInput | BingoCardScalarWhereInput[]
  }

  export type GameParticipantUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<GameParticipantCreateWithoutGameInput, GameParticipantUncheckedCreateWithoutGameInput> | GameParticipantCreateWithoutGameInput[] | GameParticipantUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameParticipantCreateOrConnectWithoutGameInput | GameParticipantCreateOrConnectWithoutGameInput[]
    upsert?: GameParticipantUpsertWithWhereUniqueWithoutGameInput | GameParticipantUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: GameParticipantCreateManyGameInputEnvelope
    set?: GameParticipantWhereUniqueInput | GameParticipantWhereUniqueInput[]
    disconnect?: GameParticipantWhereUniqueInput | GameParticipantWhereUniqueInput[]
    delete?: GameParticipantWhereUniqueInput | GameParticipantWhereUniqueInput[]
    connect?: GameParticipantWhereUniqueInput | GameParticipantWhereUniqueInput[]
    update?: GameParticipantUpdateWithWhereUniqueWithoutGameInput | GameParticipantUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: GameParticipantUpdateManyWithWhereWithoutGameInput | GameParticipantUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: GameParticipantScalarWhereInput | GameParticipantScalarWhereInput[]
  }

  export type BingoCardUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<BingoCardCreateWithoutGameInput, BingoCardUncheckedCreateWithoutGameInput> | BingoCardCreateWithoutGameInput[] | BingoCardUncheckedCreateWithoutGameInput[]
    connectOrCreate?: BingoCardCreateOrConnectWithoutGameInput | BingoCardCreateOrConnectWithoutGameInput[]
    upsert?: BingoCardUpsertWithWhereUniqueWithoutGameInput | BingoCardUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: BingoCardCreateManyGameInputEnvelope
    set?: BingoCardWhereUniqueInput | BingoCardWhereUniqueInput[]
    disconnect?: BingoCardWhereUniqueInput | BingoCardWhereUniqueInput[]
    delete?: BingoCardWhereUniqueInput | BingoCardWhereUniqueInput[]
    connect?: BingoCardWhereUniqueInput | BingoCardWhereUniqueInput[]
    update?: BingoCardUpdateWithWhereUniqueWithoutGameInput | BingoCardUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: BingoCardUpdateManyWithWhereWithoutGameInput | BingoCardUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: BingoCardScalarWhereInput | BingoCardScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutGameParticipationsInput = {
    create?: XOR<UserCreateWithoutGameParticipationsInput, UserUncheckedCreateWithoutGameParticipationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGameParticipationsInput
    connect?: UserWhereUniqueInput
  }

  export type GameCreateNestedOneWithoutParticipantsInput = {
    create?: XOR<GameCreateWithoutParticipantsInput, GameUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: GameCreateOrConnectWithoutParticipantsInput
    connect?: GameWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutGameParticipationsNestedInput = {
    create?: XOR<UserCreateWithoutGameParticipationsInput, UserUncheckedCreateWithoutGameParticipationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGameParticipationsInput
    upsert?: UserUpsertWithoutGameParticipationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGameParticipationsInput, UserUpdateWithoutGameParticipationsInput>, UserUncheckedUpdateWithoutGameParticipationsInput>
  }

  export type GameUpdateOneRequiredWithoutParticipantsNestedInput = {
    create?: XOR<GameCreateWithoutParticipantsInput, GameUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: GameCreateOrConnectWithoutParticipantsInput
    upsert?: GameUpsertWithoutParticipantsInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutParticipantsInput, GameUpdateWithoutParticipantsInput>, GameUncheckedUpdateWithoutParticipantsInput>
  }

  export type UserCreateNestedOneWithoutBingoCardsInput = {
    create?: XOR<UserCreateWithoutBingoCardsInput, UserUncheckedCreateWithoutBingoCardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBingoCardsInput
    connect?: UserWhereUniqueInput
  }

  export type GameCreateNestedOneWithoutBingoCardsInput = {
    create?: XOR<GameCreateWithoutBingoCardsInput, GameUncheckedCreateWithoutBingoCardsInput>
    connectOrCreate?: GameCreateOrConnectWithoutBingoCardsInput
    connect?: GameWhereUniqueInput
  }

  export type CardNumberCreateNestedManyWithoutCardInput = {
    create?: XOR<CardNumberCreateWithoutCardInput, CardNumberUncheckedCreateWithoutCardInput> | CardNumberCreateWithoutCardInput[] | CardNumberUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CardNumberCreateOrConnectWithoutCardInput | CardNumberCreateOrConnectWithoutCardInput[]
    createMany?: CardNumberCreateManyCardInputEnvelope
    connect?: CardNumberWhereUniqueInput | CardNumberWhereUniqueInput[]
  }

  export type CardNumberUncheckedCreateNestedManyWithoutCardInput = {
    create?: XOR<CardNumberCreateWithoutCardInput, CardNumberUncheckedCreateWithoutCardInput> | CardNumberCreateWithoutCardInput[] | CardNumberUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CardNumberCreateOrConnectWithoutCardInput | CardNumberCreateOrConnectWithoutCardInput[]
    createMany?: CardNumberCreateManyCardInputEnvelope
    connect?: CardNumberWhereUniqueInput | CardNumberWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutBingoCardsNestedInput = {
    create?: XOR<UserCreateWithoutBingoCardsInput, UserUncheckedCreateWithoutBingoCardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBingoCardsInput
    upsert?: UserUpsertWithoutBingoCardsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBingoCardsInput, UserUpdateWithoutBingoCardsInput>, UserUncheckedUpdateWithoutBingoCardsInput>
  }

  export type GameUpdateOneRequiredWithoutBingoCardsNestedInput = {
    create?: XOR<GameCreateWithoutBingoCardsInput, GameUncheckedCreateWithoutBingoCardsInput>
    connectOrCreate?: GameCreateOrConnectWithoutBingoCardsInput
    upsert?: GameUpsertWithoutBingoCardsInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutBingoCardsInput, GameUpdateWithoutBingoCardsInput>, GameUncheckedUpdateWithoutBingoCardsInput>
  }

  export type CardNumberUpdateManyWithoutCardNestedInput = {
    create?: XOR<CardNumberCreateWithoutCardInput, CardNumberUncheckedCreateWithoutCardInput> | CardNumberCreateWithoutCardInput[] | CardNumberUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CardNumberCreateOrConnectWithoutCardInput | CardNumberCreateOrConnectWithoutCardInput[]
    upsert?: CardNumberUpsertWithWhereUniqueWithoutCardInput | CardNumberUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: CardNumberCreateManyCardInputEnvelope
    set?: CardNumberWhereUniqueInput | CardNumberWhereUniqueInput[]
    disconnect?: CardNumberWhereUniqueInput | CardNumberWhereUniqueInput[]
    delete?: CardNumberWhereUniqueInput | CardNumberWhereUniqueInput[]
    connect?: CardNumberWhereUniqueInput | CardNumberWhereUniqueInput[]
    update?: CardNumberUpdateWithWhereUniqueWithoutCardInput | CardNumberUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: CardNumberUpdateManyWithWhereWithoutCardInput | CardNumberUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: CardNumberScalarWhereInput | CardNumberScalarWhereInput[]
  }

  export type CardNumberUncheckedUpdateManyWithoutCardNestedInput = {
    create?: XOR<CardNumberCreateWithoutCardInput, CardNumberUncheckedCreateWithoutCardInput> | CardNumberCreateWithoutCardInput[] | CardNumberUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CardNumberCreateOrConnectWithoutCardInput | CardNumberCreateOrConnectWithoutCardInput[]
    upsert?: CardNumberUpsertWithWhereUniqueWithoutCardInput | CardNumberUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: CardNumberCreateManyCardInputEnvelope
    set?: CardNumberWhereUniqueInput | CardNumberWhereUniqueInput[]
    disconnect?: CardNumberWhereUniqueInput | CardNumberWhereUniqueInput[]
    delete?: CardNumberWhereUniqueInput | CardNumberWhereUniqueInput[]
    connect?: CardNumberWhereUniqueInput | CardNumberWhereUniqueInput[]
    update?: CardNumberUpdateWithWhereUniqueWithoutCardInput | CardNumberUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: CardNumberUpdateManyWithWhereWithoutCardInput | CardNumberUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: CardNumberScalarWhereInput | CardNumberScalarWhereInput[]
  }

  export type BingoCardCreateNestedOneWithoutNumbersInput = {
    create?: XOR<BingoCardCreateWithoutNumbersInput, BingoCardUncheckedCreateWithoutNumbersInput>
    connectOrCreate?: BingoCardCreateOrConnectWithoutNumbersInput
    connect?: BingoCardWhereUniqueInput
  }

  export type BingoCardUpdateOneRequiredWithoutNumbersNestedInput = {
    create?: XOR<BingoCardCreateWithoutNumbersInput, BingoCardUncheckedCreateWithoutNumbersInput>
    connectOrCreate?: BingoCardCreateOrConnectWithoutNumbersInput
    upsert?: BingoCardUpsertWithoutNumbersInput
    connect?: BingoCardWhereUniqueInput
    update?: XOR<XOR<BingoCardUpdateToOneWithWhereWithoutNumbersInput, BingoCardUpdateWithoutNumbersInput>, BingoCardUncheckedUpdateWithoutNumbersInput>
  }

  export type UserCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSentTransfersInput = {
    create?: XOR<UserCreateWithoutSentTransfersInput, UserUncheckedCreateWithoutSentTransfersInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentTransfersInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReceivedTransfersInput = {
    create?: XOR<UserCreateWithoutReceivedTransfersInput, UserUncheckedCreateWithoutReceivedTransfersInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedTransfersInput
    connect?: UserWhereUniqueInput
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type UserUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsInput
    upsert?: UserUpsertWithoutTransactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTransactionsInput, UserUpdateWithoutTransactionsInput>, UserUncheckedUpdateWithoutTransactionsInput>
  }

  export type UserUpdateOneWithoutSentTransfersNestedInput = {
    create?: XOR<UserCreateWithoutSentTransfersInput, UserUncheckedCreateWithoutSentTransfersInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentTransfersInput
    upsert?: UserUpsertWithoutSentTransfersInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentTransfersInput, UserUpdateWithoutSentTransfersInput>, UserUncheckedUpdateWithoutSentTransfersInput>
  }

  export type UserUpdateOneWithoutReceivedTransfersNestedInput = {
    create?: XOR<UserCreateWithoutReceivedTransfersInput, UserUncheckedCreateWithoutReceivedTransfersInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedTransfersInput
    upsert?: UserUpsertWithoutReceivedTransfersInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedTransfersInput, UserUpdateWithoutReceivedTransfersInput>, UserUncheckedUpdateWithoutReceivedTransfersInput>
  }

  export type UserCreateNestedOneWithoutWalletInput = {
    create?: XOR<UserCreateWithoutWalletInput, UserUncheckedCreateWithoutWalletInput>
    connectOrCreate?: UserCreateOrConnectWithoutWalletInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutWalletNestedInput = {
    create?: XOR<UserCreateWithoutWalletInput, UserUncheckedCreateWithoutWalletInput>
    connectOrCreate?: UserCreateOrConnectWithoutWalletInput
    upsert?: UserUpsertWithoutWalletInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWalletInput, UserUpdateWithoutWalletInput>, UserUncheckedUpdateWithoutWalletInput>
  }

  export type UserCreateNestedOneWithoutDepositRequestsInput = {
    create?: XOR<UserCreateWithoutDepositRequestsInput, UserUncheckedCreateWithoutDepositRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDepositRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type OpenpayTransactionCreateNestedManyWithoutDepositRequestInput = {
    create?: XOR<OpenpayTransactionCreateWithoutDepositRequestInput, OpenpayTransactionUncheckedCreateWithoutDepositRequestInput> | OpenpayTransactionCreateWithoutDepositRequestInput[] | OpenpayTransactionUncheckedCreateWithoutDepositRequestInput[]
    connectOrCreate?: OpenpayTransactionCreateOrConnectWithoutDepositRequestInput | OpenpayTransactionCreateOrConnectWithoutDepositRequestInput[]
    createMany?: OpenpayTransactionCreateManyDepositRequestInputEnvelope
    connect?: OpenpayTransactionWhereUniqueInput | OpenpayTransactionWhereUniqueInput[]
  }

  export type OpenpayTransactionUncheckedCreateNestedManyWithoutDepositRequestInput = {
    create?: XOR<OpenpayTransactionCreateWithoutDepositRequestInput, OpenpayTransactionUncheckedCreateWithoutDepositRequestInput> | OpenpayTransactionCreateWithoutDepositRequestInput[] | OpenpayTransactionUncheckedCreateWithoutDepositRequestInput[]
    connectOrCreate?: OpenpayTransactionCreateOrConnectWithoutDepositRequestInput | OpenpayTransactionCreateOrConnectWithoutDepositRequestInput[]
    createMany?: OpenpayTransactionCreateManyDepositRequestInputEnvelope
    connect?: OpenpayTransactionWhereUniqueInput | OpenpayTransactionWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutDepositRequestsNestedInput = {
    create?: XOR<UserCreateWithoutDepositRequestsInput, UserUncheckedCreateWithoutDepositRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDepositRequestsInput
    upsert?: UserUpsertWithoutDepositRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDepositRequestsInput, UserUpdateWithoutDepositRequestsInput>, UserUncheckedUpdateWithoutDepositRequestsInput>
  }

  export type OpenpayTransactionUpdateManyWithoutDepositRequestNestedInput = {
    create?: XOR<OpenpayTransactionCreateWithoutDepositRequestInput, OpenpayTransactionUncheckedCreateWithoutDepositRequestInput> | OpenpayTransactionCreateWithoutDepositRequestInput[] | OpenpayTransactionUncheckedCreateWithoutDepositRequestInput[]
    connectOrCreate?: OpenpayTransactionCreateOrConnectWithoutDepositRequestInput | OpenpayTransactionCreateOrConnectWithoutDepositRequestInput[]
    upsert?: OpenpayTransactionUpsertWithWhereUniqueWithoutDepositRequestInput | OpenpayTransactionUpsertWithWhereUniqueWithoutDepositRequestInput[]
    createMany?: OpenpayTransactionCreateManyDepositRequestInputEnvelope
    set?: OpenpayTransactionWhereUniqueInput | OpenpayTransactionWhereUniqueInput[]
    disconnect?: OpenpayTransactionWhereUniqueInput | OpenpayTransactionWhereUniqueInput[]
    delete?: OpenpayTransactionWhereUniqueInput | OpenpayTransactionWhereUniqueInput[]
    connect?: OpenpayTransactionWhereUniqueInput | OpenpayTransactionWhereUniqueInput[]
    update?: OpenpayTransactionUpdateWithWhereUniqueWithoutDepositRequestInput | OpenpayTransactionUpdateWithWhereUniqueWithoutDepositRequestInput[]
    updateMany?: OpenpayTransactionUpdateManyWithWhereWithoutDepositRequestInput | OpenpayTransactionUpdateManyWithWhereWithoutDepositRequestInput[]
    deleteMany?: OpenpayTransactionScalarWhereInput | OpenpayTransactionScalarWhereInput[]
  }

  export type OpenpayTransactionUncheckedUpdateManyWithoutDepositRequestNestedInput = {
    create?: XOR<OpenpayTransactionCreateWithoutDepositRequestInput, OpenpayTransactionUncheckedCreateWithoutDepositRequestInput> | OpenpayTransactionCreateWithoutDepositRequestInput[] | OpenpayTransactionUncheckedCreateWithoutDepositRequestInput[]
    connectOrCreate?: OpenpayTransactionCreateOrConnectWithoutDepositRequestInput | OpenpayTransactionCreateOrConnectWithoutDepositRequestInput[]
    upsert?: OpenpayTransactionUpsertWithWhereUniqueWithoutDepositRequestInput | OpenpayTransactionUpsertWithWhereUniqueWithoutDepositRequestInput[]
    createMany?: OpenpayTransactionCreateManyDepositRequestInputEnvelope
    set?: OpenpayTransactionWhereUniqueInput | OpenpayTransactionWhereUniqueInput[]
    disconnect?: OpenpayTransactionWhereUniqueInput | OpenpayTransactionWhereUniqueInput[]
    delete?: OpenpayTransactionWhereUniqueInput | OpenpayTransactionWhereUniqueInput[]
    connect?: OpenpayTransactionWhereUniqueInput | OpenpayTransactionWhereUniqueInput[]
    update?: OpenpayTransactionUpdateWithWhereUniqueWithoutDepositRequestInput | OpenpayTransactionUpdateWithWhereUniqueWithoutDepositRequestInput[]
    updateMany?: OpenpayTransactionUpdateManyWithWhereWithoutDepositRequestInput | OpenpayTransactionUpdateManyWithWhereWithoutDepositRequestInput[]
    deleteMany?: OpenpayTransactionScalarWhereInput | OpenpayTransactionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutWithdrawalRequestsInput = {
    create?: XOR<UserCreateWithoutWithdrawalRequestsInput, UserUncheckedCreateWithoutWithdrawalRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWithdrawalRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutWithdrawalRequestsNestedInput = {
    create?: XOR<UserCreateWithoutWithdrawalRequestsInput, UserUncheckedCreateWithoutWithdrawalRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWithdrawalRequestsInput
    upsert?: UserUpsertWithoutWithdrawalRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWithdrawalRequestsInput, UserUpdateWithoutWithdrawalRequestsInput>, UserUncheckedUpdateWithoutWithdrawalRequestsInput>
  }

  export type UserCreateNestedOneWithoutOpenpayCustomerInput = {
    create?: XOR<UserCreateWithoutOpenpayCustomerInput, UserUncheckedCreateWithoutOpenpayCustomerInput>
    connectOrCreate?: UserCreateOrConnectWithoutOpenpayCustomerInput
    connect?: UserWhereUniqueInput
  }

  export type OpenpayPaymentMethodCreateNestedManyWithoutCustomerInput = {
    create?: XOR<OpenpayPaymentMethodCreateWithoutCustomerInput, OpenpayPaymentMethodUncheckedCreateWithoutCustomerInput> | OpenpayPaymentMethodCreateWithoutCustomerInput[] | OpenpayPaymentMethodUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: OpenpayPaymentMethodCreateOrConnectWithoutCustomerInput | OpenpayPaymentMethodCreateOrConnectWithoutCustomerInput[]
    createMany?: OpenpayPaymentMethodCreateManyCustomerInputEnvelope
    connect?: OpenpayPaymentMethodWhereUniqueInput | OpenpayPaymentMethodWhereUniqueInput[]
  }

  export type OpenpayTransactionCreateNestedManyWithoutCustomerInput = {
    create?: XOR<OpenpayTransactionCreateWithoutCustomerInput, OpenpayTransactionUncheckedCreateWithoutCustomerInput> | OpenpayTransactionCreateWithoutCustomerInput[] | OpenpayTransactionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: OpenpayTransactionCreateOrConnectWithoutCustomerInput | OpenpayTransactionCreateOrConnectWithoutCustomerInput[]
    createMany?: OpenpayTransactionCreateManyCustomerInputEnvelope
    connect?: OpenpayTransactionWhereUniqueInput | OpenpayTransactionWhereUniqueInput[]
  }

  export type OpenpayPaymentMethodUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<OpenpayPaymentMethodCreateWithoutCustomerInput, OpenpayPaymentMethodUncheckedCreateWithoutCustomerInput> | OpenpayPaymentMethodCreateWithoutCustomerInput[] | OpenpayPaymentMethodUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: OpenpayPaymentMethodCreateOrConnectWithoutCustomerInput | OpenpayPaymentMethodCreateOrConnectWithoutCustomerInput[]
    createMany?: OpenpayPaymentMethodCreateManyCustomerInputEnvelope
    connect?: OpenpayPaymentMethodWhereUniqueInput | OpenpayPaymentMethodWhereUniqueInput[]
  }

  export type OpenpayTransactionUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<OpenpayTransactionCreateWithoutCustomerInput, OpenpayTransactionUncheckedCreateWithoutCustomerInput> | OpenpayTransactionCreateWithoutCustomerInput[] | OpenpayTransactionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: OpenpayTransactionCreateOrConnectWithoutCustomerInput | OpenpayTransactionCreateOrConnectWithoutCustomerInput[]
    createMany?: OpenpayTransactionCreateManyCustomerInputEnvelope
    connect?: OpenpayTransactionWhereUniqueInput | OpenpayTransactionWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutOpenpayCustomerNestedInput = {
    create?: XOR<UserCreateWithoutOpenpayCustomerInput, UserUncheckedCreateWithoutOpenpayCustomerInput>
    connectOrCreate?: UserCreateOrConnectWithoutOpenpayCustomerInput
    upsert?: UserUpsertWithoutOpenpayCustomerInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOpenpayCustomerInput, UserUpdateWithoutOpenpayCustomerInput>, UserUncheckedUpdateWithoutOpenpayCustomerInput>
  }

  export type OpenpayPaymentMethodUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<OpenpayPaymentMethodCreateWithoutCustomerInput, OpenpayPaymentMethodUncheckedCreateWithoutCustomerInput> | OpenpayPaymentMethodCreateWithoutCustomerInput[] | OpenpayPaymentMethodUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: OpenpayPaymentMethodCreateOrConnectWithoutCustomerInput | OpenpayPaymentMethodCreateOrConnectWithoutCustomerInput[]
    upsert?: OpenpayPaymentMethodUpsertWithWhereUniqueWithoutCustomerInput | OpenpayPaymentMethodUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: OpenpayPaymentMethodCreateManyCustomerInputEnvelope
    set?: OpenpayPaymentMethodWhereUniqueInput | OpenpayPaymentMethodWhereUniqueInput[]
    disconnect?: OpenpayPaymentMethodWhereUniqueInput | OpenpayPaymentMethodWhereUniqueInput[]
    delete?: OpenpayPaymentMethodWhereUniqueInput | OpenpayPaymentMethodWhereUniqueInput[]
    connect?: OpenpayPaymentMethodWhereUniqueInput | OpenpayPaymentMethodWhereUniqueInput[]
    update?: OpenpayPaymentMethodUpdateWithWhereUniqueWithoutCustomerInput | OpenpayPaymentMethodUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: OpenpayPaymentMethodUpdateManyWithWhereWithoutCustomerInput | OpenpayPaymentMethodUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: OpenpayPaymentMethodScalarWhereInput | OpenpayPaymentMethodScalarWhereInput[]
  }

  export type OpenpayTransactionUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<OpenpayTransactionCreateWithoutCustomerInput, OpenpayTransactionUncheckedCreateWithoutCustomerInput> | OpenpayTransactionCreateWithoutCustomerInput[] | OpenpayTransactionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: OpenpayTransactionCreateOrConnectWithoutCustomerInput | OpenpayTransactionCreateOrConnectWithoutCustomerInput[]
    upsert?: OpenpayTransactionUpsertWithWhereUniqueWithoutCustomerInput | OpenpayTransactionUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: OpenpayTransactionCreateManyCustomerInputEnvelope
    set?: OpenpayTransactionWhereUniqueInput | OpenpayTransactionWhereUniqueInput[]
    disconnect?: OpenpayTransactionWhereUniqueInput | OpenpayTransactionWhereUniqueInput[]
    delete?: OpenpayTransactionWhereUniqueInput | OpenpayTransactionWhereUniqueInput[]
    connect?: OpenpayTransactionWhereUniqueInput | OpenpayTransactionWhereUniqueInput[]
    update?: OpenpayTransactionUpdateWithWhereUniqueWithoutCustomerInput | OpenpayTransactionUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: OpenpayTransactionUpdateManyWithWhereWithoutCustomerInput | OpenpayTransactionUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: OpenpayTransactionScalarWhereInput | OpenpayTransactionScalarWhereInput[]
  }

  export type OpenpayPaymentMethodUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<OpenpayPaymentMethodCreateWithoutCustomerInput, OpenpayPaymentMethodUncheckedCreateWithoutCustomerInput> | OpenpayPaymentMethodCreateWithoutCustomerInput[] | OpenpayPaymentMethodUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: OpenpayPaymentMethodCreateOrConnectWithoutCustomerInput | OpenpayPaymentMethodCreateOrConnectWithoutCustomerInput[]
    upsert?: OpenpayPaymentMethodUpsertWithWhereUniqueWithoutCustomerInput | OpenpayPaymentMethodUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: OpenpayPaymentMethodCreateManyCustomerInputEnvelope
    set?: OpenpayPaymentMethodWhereUniqueInput | OpenpayPaymentMethodWhereUniqueInput[]
    disconnect?: OpenpayPaymentMethodWhereUniqueInput | OpenpayPaymentMethodWhereUniqueInput[]
    delete?: OpenpayPaymentMethodWhereUniqueInput | OpenpayPaymentMethodWhereUniqueInput[]
    connect?: OpenpayPaymentMethodWhereUniqueInput | OpenpayPaymentMethodWhereUniqueInput[]
    update?: OpenpayPaymentMethodUpdateWithWhereUniqueWithoutCustomerInput | OpenpayPaymentMethodUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: OpenpayPaymentMethodUpdateManyWithWhereWithoutCustomerInput | OpenpayPaymentMethodUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: OpenpayPaymentMethodScalarWhereInput | OpenpayPaymentMethodScalarWhereInput[]
  }

  export type OpenpayTransactionUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<OpenpayTransactionCreateWithoutCustomerInput, OpenpayTransactionUncheckedCreateWithoutCustomerInput> | OpenpayTransactionCreateWithoutCustomerInput[] | OpenpayTransactionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: OpenpayTransactionCreateOrConnectWithoutCustomerInput | OpenpayTransactionCreateOrConnectWithoutCustomerInput[]
    upsert?: OpenpayTransactionUpsertWithWhereUniqueWithoutCustomerInput | OpenpayTransactionUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: OpenpayTransactionCreateManyCustomerInputEnvelope
    set?: OpenpayTransactionWhereUniqueInput | OpenpayTransactionWhereUniqueInput[]
    disconnect?: OpenpayTransactionWhereUniqueInput | OpenpayTransactionWhereUniqueInput[]
    delete?: OpenpayTransactionWhereUniqueInput | OpenpayTransactionWhereUniqueInput[]
    connect?: OpenpayTransactionWhereUniqueInput | OpenpayTransactionWhereUniqueInput[]
    update?: OpenpayTransactionUpdateWithWhereUniqueWithoutCustomerInput | OpenpayTransactionUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: OpenpayTransactionUpdateManyWithWhereWithoutCustomerInput | OpenpayTransactionUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: OpenpayTransactionScalarWhereInput | OpenpayTransactionScalarWhereInput[]
  }

  export type DepositRequestCreateNestedOneWithoutOpenpayTransactionsInput = {
    create?: XOR<DepositRequestCreateWithoutOpenpayTransactionsInput, DepositRequestUncheckedCreateWithoutOpenpayTransactionsInput>
    connectOrCreate?: DepositRequestCreateOrConnectWithoutOpenpayTransactionsInput
    connect?: DepositRequestWhereUniqueInput
  }

  export type OpenpayCustomerCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<OpenpayCustomerCreateWithoutTransactionsInput, OpenpayCustomerUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: OpenpayCustomerCreateOrConnectWithoutTransactionsInput
    connect?: OpenpayCustomerWhereUniqueInput
  }

  export type OpenpayWebhookEventCreateNestedManyWithoutTransactionInput = {
    create?: XOR<OpenpayWebhookEventCreateWithoutTransactionInput, OpenpayWebhookEventUncheckedCreateWithoutTransactionInput> | OpenpayWebhookEventCreateWithoutTransactionInput[] | OpenpayWebhookEventUncheckedCreateWithoutTransactionInput[]
    connectOrCreate?: OpenpayWebhookEventCreateOrConnectWithoutTransactionInput | OpenpayWebhookEventCreateOrConnectWithoutTransactionInput[]
    createMany?: OpenpayWebhookEventCreateManyTransactionInputEnvelope
    connect?: OpenpayWebhookEventWhereUniqueInput | OpenpayWebhookEventWhereUniqueInput[]
  }

  export type OpenpayWebhookEventUncheckedCreateNestedManyWithoutTransactionInput = {
    create?: XOR<OpenpayWebhookEventCreateWithoutTransactionInput, OpenpayWebhookEventUncheckedCreateWithoutTransactionInput> | OpenpayWebhookEventCreateWithoutTransactionInput[] | OpenpayWebhookEventUncheckedCreateWithoutTransactionInput[]
    connectOrCreate?: OpenpayWebhookEventCreateOrConnectWithoutTransactionInput | OpenpayWebhookEventCreateOrConnectWithoutTransactionInput[]
    createMany?: OpenpayWebhookEventCreateManyTransactionInputEnvelope
    connect?: OpenpayWebhookEventWhereUniqueInput | OpenpayWebhookEventWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DepositRequestUpdateOneRequiredWithoutOpenpayTransactionsNestedInput = {
    create?: XOR<DepositRequestCreateWithoutOpenpayTransactionsInput, DepositRequestUncheckedCreateWithoutOpenpayTransactionsInput>
    connectOrCreate?: DepositRequestCreateOrConnectWithoutOpenpayTransactionsInput
    upsert?: DepositRequestUpsertWithoutOpenpayTransactionsInput
    connect?: DepositRequestWhereUniqueInput
    update?: XOR<XOR<DepositRequestUpdateToOneWithWhereWithoutOpenpayTransactionsInput, DepositRequestUpdateWithoutOpenpayTransactionsInput>, DepositRequestUncheckedUpdateWithoutOpenpayTransactionsInput>
  }

  export type OpenpayCustomerUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<OpenpayCustomerCreateWithoutTransactionsInput, OpenpayCustomerUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: OpenpayCustomerCreateOrConnectWithoutTransactionsInput
    upsert?: OpenpayCustomerUpsertWithoutTransactionsInput
    connect?: OpenpayCustomerWhereUniqueInput
    update?: XOR<XOR<OpenpayCustomerUpdateToOneWithWhereWithoutTransactionsInput, OpenpayCustomerUpdateWithoutTransactionsInput>, OpenpayCustomerUncheckedUpdateWithoutTransactionsInput>
  }

  export type OpenpayWebhookEventUpdateManyWithoutTransactionNestedInput = {
    create?: XOR<OpenpayWebhookEventCreateWithoutTransactionInput, OpenpayWebhookEventUncheckedCreateWithoutTransactionInput> | OpenpayWebhookEventCreateWithoutTransactionInput[] | OpenpayWebhookEventUncheckedCreateWithoutTransactionInput[]
    connectOrCreate?: OpenpayWebhookEventCreateOrConnectWithoutTransactionInput | OpenpayWebhookEventCreateOrConnectWithoutTransactionInput[]
    upsert?: OpenpayWebhookEventUpsertWithWhereUniqueWithoutTransactionInput | OpenpayWebhookEventUpsertWithWhereUniqueWithoutTransactionInput[]
    createMany?: OpenpayWebhookEventCreateManyTransactionInputEnvelope
    set?: OpenpayWebhookEventWhereUniqueInput | OpenpayWebhookEventWhereUniqueInput[]
    disconnect?: OpenpayWebhookEventWhereUniqueInput | OpenpayWebhookEventWhereUniqueInput[]
    delete?: OpenpayWebhookEventWhereUniqueInput | OpenpayWebhookEventWhereUniqueInput[]
    connect?: OpenpayWebhookEventWhereUniqueInput | OpenpayWebhookEventWhereUniqueInput[]
    update?: OpenpayWebhookEventUpdateWithWhereUniqueWithoutTransactionInput | OpenpayWebhookEventUpdateWithWhereUniqueWithoutTransactionInput[]
    updateMany?: OpenpayWebhookEventUpdateManyWithWhereWithoutTransactionInput | OpenpayWebhookEventUpdateManyWithWhereWithoutTransactionInput[]
    deleteMany?: OpenpayWebhookEventScalarWhereInput | OpenpayWebhookEventScalarWhereInput[]
  }

  export type OpenpayWebhookEventUncheckedUpdateManyWithoutTransactionNestedInput = {
    create?: XOR<OpenpayWebhookEventCreateWithoutTransactionInput, OpenpayWebhookEventUncheckedCreateWithoutTransactionInput> | OpenpayWebhookEventCreateWithoutTransactionInput[] | OpenpayWebhookEventUncheckedCreateWithoutTransactionInput[]
    connectOrCreate?: OpenpayWebhookEventCreateOrConnectWithoutTransactionInput | OpenpayWebhookEventCreateOrConnectWithoutTransactionInput[]
    upsert?: OpenpayWebhookEventUpsertWithWhereUniqueWithoutTransactionInput | OpenpayWebhookEventUpsertWithWhereUniqueWithoutTransactionInput[]
    createMany?: OpenpayWebhookEventCreateManyTransactionInputEnvelope
    set?: OpenpayWebhookEventWhereUniqueInput | OpenpayWebhookEventWhereUniqueInput[]
    disconnect?: OpenpayWebhookEventWhereUniqueInput | OpenpayWebhookEventWhereUniqueInput[]
    delete?: OpenpayWebhookEventWhereUniqueInput | OpenpayWebhookEventWhereUniqueInput[]
    connect?: OpenpayWebhookEventWhereUniqueInput | OpenpayWebhookEventWhereUniqueInput[]
    update?: OpenpayWebhookEventUpdateWithWhereUniqueWithoutTransactionInput | OpenpayWebhookEventUpdateWithWhereUniqueWithoutTransactionInput[]
    updateMany?: OpenpayWebhookEventUpdateManyWithWhereWithoutTransactionInput | OpenpayWebhookEventUpdateManyWithWhereWithoutTransactionInput[]
    deleteMany?: OpenpayWebhookEventScalarWhereInput | OpenpayWebhookEventScalarWhereInput[]
  }

  export type OpenpayTransactionCreateNestedOneWithoutWebhookEventsInput = {
    create?: XOR<OpenpayTransactionCreateWithoutWebhookEventsInput, OpenpayTransactionUncheckedCreateWithoutWebhookEventsInput>
    connectOrCreate?: OpenpayTransactionCreateOrConnectWithoutWebhookEventsInput
    connect?: OpenpayTransactionWhereUniqueInput
  }

  export type OpenpayTransactionUpdateOneWithoutWebhookEventsNestedInput = {
    create?: XOR<OpenpayTransactionCreateWithoutWebhookEventsInput, OpenpayTransactionUncheckedCreateWithoutWebhookEventsInput>
    connectOrCreate?: OpenpayTransactionCreateOrConnectWithoutWebhookEventsInput
    upsert?: OpenpayTransactionUpsertWithoutWebhookEventsInput
    disconnect?: OpenpayTransactionWhereInput | boolean
    delete?: OpenpayTransactionWhereInput | boolean
    connect?: OpenpayTransactionWhereUniqueInput
    update?: XOR<XOR<OpenpayTransactionUpdateToOneWithWhereWithoutWebhookEventsInput, OpenpayTransactionUpdateWithoutWebhookEventsInput>, OpenpayTransactionUncheckedUpdateWithoutWebhookEventsInput>
  }

  export type OpenpayCustomerCreateNestedOneWithoutPaymentMethodsInput = {
    create?: XOR<OpenpayCustomerCreateWithoutPaymentMethodsInput, OpenpayCustomerUncheckedCreateWithoutPaymentMethodsInput>
    connectOrCreate?: OpenpayCustomerCreateOrConnectWithoutPaymentMethodsInput
    connect?: OpenpayCustomerWhereUniqueInput
  }

  export type OpenpayCustomerUpdateOneRequiredWithoutPaymentMethodsNestedInput = {
    create?: XOR<OpenpayCustomerCreateWithoutPaymentMethodsInput, OpenpayCustomerUncheckedCreateWithoutPaymentMethodsInput>
    connectOrCreate?: OpenpayCustomerCreateOrConnectWithoutPaymentMethodsInput
    upsert?: OpenpayCustomerUpsertWithoutPaymentMethodsInput
    connect?: OpenpayCustomerWhereUniqueInput
    update?: XOR<XOR<OpenpayCustomerUpdateToOneWithWhereWithoutPaymentMethodsInput, OpenpayCustomerUpdateWithoutPaymentMethodsInput>, OpenpayCustomerUncheckedUpdateWithoutPaymentMethodsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type GameParticipantCreateWithoutUserInput = {
    id?: string
    joinedAt?: Date | string
    cardsCount?: number
    totalSpent?: Decimal | DecimalJsLike | number | string
    hasWon?: boolean
    prizeWon?: Decimal | DecimalJsLike | number | string
    game: GameCreateNestedOneWithoutParticipantsInput
  }

  export type GameParticipantUncheckedCreateWithoutUserInput = {
    id?: string
    gameId: string
    joinedAt?: Date | string
    cardsCount?: number
    totalSpent?: Decimal | DecimalJsLike | number | string
    hasWon?: boolean
    prizeWon?: Decimal | DecimalJsLike | number | string
  }

  export type GameParticipantCreateOrConnectWithoutUserInput = {
    where: GameParticipantWhereUniqueInput
    create: XOR<GameParticipantCreateWithoutUserInput, GameParticipantUncheckedCreateWithoutUserInput>
  }

  export type GameParticipantCreateManyUserInputEnvelope = {
    data: GameParticipantCreateManyUserInput | GameParticipantCreateManyUserInput[]
  }

  export type BingoCardCreateWithoutUserInput = {
    id?: string
    cardNumber: number
    isActive?: boolean
    markedNumbers?: string
    isWinner?: boolean
    winningPattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    game: GameCreateNestedOneWithoutBingoCardsInput
    numbers?: CardNumberCreateNestedManyWithoutCardInput
  }

  export type BingoCardUncheckedCreateWithoutUserInput = {
    id?: string
    gameId: string
    cardNumber: number
    isActive?: boolean
    markedNumbers?: string
    isWinner?: boolean
    winningPattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    numbers?: CardNumberUncheckedCreateNestedManyWithoutCardInput
  }

  export type BingoCardCreateOrConnectWithoutUserInput = {
    where: BingoCardWhereUniqueInput
    create: XOR<BingoCardCreateWithoutUserInput, BingoCardUncheckedCreateWithoutUserInput>
  }

  export type BingoCardCreateManyUserInputEnvelope = {
    data: BingoCardCreateManyUserInput | BingoCardCreateManyUserInput[]
  }

  export type TransactionCreateWithoutUserInput = {
    id?: string
    gameId?: string | null
    type: string
    amount: Decimal | DecimalJsLike | number | string
    description: string
    status?: string
    paymentMethod?: string | null
    paymentId?: string | null
    pearlsAmount?: Decimal | DecimalJsLike | number | string | null
    commissionAmount?: Decimal | DecimalJsLike | number | string | null
    referenceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fromUser?: UserCreateNestedOneWithoutSentTransfersInput
    toUser?: UserCreateNestedOneWithoutReceivedTransfersInput
  }

  export type TransactionUncheckedCreateWithoutUserInput = {
    id?: string
    gameId?: string | null
    type: string
    amount: Decimal | DecimalJsLike | number | string
    description: string
    status?: string
    paymentMethod?: string | null
    paymentId?: string | null
    pearlsAmount?: Decimal | DecimalJsLike | number | string | null
    fromUserId?: string | null
    toUserId?: string | null
    commissionAmount?: Decimal | DecimalJsLike | number | string | null
    referenceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutUserInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput>
  }

  export type TransactionCreateManyUserInputEnvelope = {
    data: TransactionCreateManyUserInput | TransactionCreateManyUserInput[]
  }

  export type WalletCreateWithoutUserInput = {
    id?: string
    balance?: Decimal | DecimalJsLike | number | string
    dailyLimit?: Decimal | DecimalJsLike | number | string
    monthlyLimit?: Decimal | DecimalJsLike | number | string
    isActive?: boolean
    isFrozen?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WalletUncheckedCreateWithoutUserInput = {
    id?: string
    balance?: Decimal | DecimalJsLike | number | string
    dailyLimit?: Decimal | DecimalJsLike | number | string
    monthlyLimit?: Decimal | DecimalJsLike | number | string
    isActive?: boolean
    isFrozen?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WalletCreateOrConnectWithoutUserInput = {
    where: WalletWhereUniqueInput
    create: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput>
  }

  export type DepositRequestCreateWithoutUserInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    pearlsAmount: Decimal | DecimalJsLike | number | string
    currency?: string
    paymentMethod: string
    referenceCode: string
    bankReference?: string | null
    bankAccount?: string | null
    bankAccountName?: string | null
    status?: string
    adminNotes?: string | null
    validatedBy?: string | null
    validatedAt?: Date | string | null
    proofImage?: string | null
    proofImageAdmin?: string | null
    transactionId?: string | null
    integrationMethod?: string
    openpayTransactionId?: string | null
    autoApprovalEligible?: boolean
    processingFee?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    expiresAt: Date | string
    openpayTransactions?: OpenpayTransactionCreateNestedManyWithoutDepositRequestInput
  }

  export type DepositRequestUncheckedCreateWithoutUserInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    pearlsAmount: Decimal | DecimalJsLike | number | string
    currency?: string
    paymentMethod: string
    referenceCode: string
    bankReference?: string | null
    bankAccount?: string | null
    bankAccountName?: string | null
    status?: string
    adminNotes?: string | null
    validatedBy?: string | null
    validatedAt?: Date | string | null
    proofImage?: string | null
    proofImageAdmin?: string | null
    transactionId?: string | null
    integrationMethod?: string
    openpayTransactionId?: string | null
    autoApprovalEligible?: boolean
    processingFee?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    expiresAt: Date | string
    openpayTransactions?: OpenpayTransactionUncheckedCreateNestedManyWithoutDepositRequestInput
  }

  export type DepositRequestCreateOrConnectWithoutUserInput = {
    where: DepositRequestWhereUniqueInput
    create: XOR<DepositRequestCreateWithoutUserInput, DepositRequestUncheckedCreateWithoutUserInput>
  }

  export type DepositRequestCreateManyUserInputEnvelope = {
    data: DepositRequestCreateManyUserInput | DepositRequestCreateManyUserInput[]
  }

  export type WithdrawalRequestCreateWithoutUserInput = {
    id?: string
    pearlsAmount: Decimal | DecimalJsLike | number | string
    amountInSoles: Decimal | DecimalJsLike | number | string
    commission?: Decimal | DecimalJsLike | number | string
    netAmount: Decimal | DecimalJsLike | number | string
    bankCode: string
    accountNumber: string
    accountType: string
    accountHolderName: string
    accountHolderDni: string
    status?: string
    adminNotes?: string | null
    processedBy?: string | null
    processedAt?: Date | string | null
    bankTransactionId?: string | null
    transferProof?: string | null
    referenceCode: string
    transactionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WithdrawalRequestUncheckedCreateWithoutUserInput = {
    id?: string
    pearlsAmount: Decimal | DecimalJsLike | number | string
    amountInSoles: Decimal | DecimalJsLike | number | string
    commission?: Decimal | DecimalJsLike | number | string
    netAmount: Decimal | DecimalJsLike | number | string
    bankCode: string
    accountNumber: string
    accountType: string
    accountHolderName: string
    accountHolderDni: string
    status?: string
    adminNotes?: string | null
    processedBy?: string | null
    processedAt?: Date | string | null
    bankTransactionId?: string | null
    transferProof?: string | null
    referenceCode: string
    transactionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WithdrawalRequestCreateOrConnectWithoutUserInput = {
    where: WithdrawalRequestWhereUniqueInput
    create: XOR<WithdrawalRequestCreateWithoutUserInput, WithdrawalRequestUncheckedCreateWithoutUserInput>
  }

  export type WithdrawalRequestCreateManyUserInputEnvelope = {
    data: WithdrawalRequestCreateManyUserInput | WithdrawalRequestCreateManyUserInput[]
  }

  export type TransactionCreateWithoutFromUserInput = {
    id?: string
    gameId?: string | null
    type: string
    amount: Decimal | DecimalJsLike | number | string
    description: string
    status?: string
    paymentMethod?: string | null
    paymentId?: string | null
    pearlsAmount?: Decimal | DecimalJsLike | number | string | null
    commissionAmount?: Decimal | DecimalJsLike | number | string | null
    referenceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTransactionsInput
    toUser?: UserCreateNestedOneWithoutReceivedTransfersInput
  }

  export type TransactionUncheckedCreateWithoutFromUserInput = {
    id?: string
    userId: string
    gameId?: string | null
    type: string
    amount: Decimal | DecimalJsLike | number | string
    description: string
    status?: string
    paymentMethod?: string | null
    paymentId?: string | null
    pearlsAmount?: Decimal | DecimalJsLike | number | string | null
    toUserId?: string | null
    commissionAmount?: Decimal | DecimalJsLike | number | string | null
    referenceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutFromUserInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutFromUserInput, TransactionUncheckedCreateWithoutFromUserInput>
  }

  export type TransactionCreateManyFromUserInputEnvelope = {
    data: TransactionCreateManyFromUserInput | TransactionCreateManyFromUserInput[]
  }

  export type TransactionCreateWithoutToUserInput = {
    id?: string
    gameId?: string | null
    type: string
    amount: Decimal | DecimalJsLike | number | string
    description: string
    status?: string
    paymentMethod?: string | null
    paymentId?: string | null
    pearlsAmount?: Decimal | DecimalJsLike | number | string | null
    commissionAmount?: Decimal | DecimalJsLike | number | string | null
    referenceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTransactionsInput
    fromUser?: UserCreateNestedOneWithoutSentTransfersInput
  }

  export type TransactionUncheckedCreateWithoutToUserInput = {
    id?: string
    userId: string
    gameId?: string | null
    type: string
    amount: Decimal | DecimalJsLike | number | string
    description: string
    status?: string
    paymentMethod?: string | null
    paymentId?: string | null
    pearlsAmount?: Decimal | DecimalJsLike | number | string | null
    fromUserId?: string | null
    commissionAmount?: Decimal | DecimalJsLike | number | string | null
    referenceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutToUserInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutToUserInput, TransactionUncheckedCreateWithoutToUserInput>
  }

  export type TransactionCreateManyToUserInputEnvelope = {
    data: TransactionCreateManyToUserInput | TransactionCreateManyToUserInput[]
  }

  export type OpenpayCustomerCreateWithoutUserInput = {
    id?: string
    openpayCustomerId: string
    email: string
    name: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentMethods?: OpenpayPaymentMethodCreateNestedManyWithoutCustomerInput
    transactions?: OpenpayTransactionCreateNestedManyWithoutCustomerInput
  }

  export type OpenpayCustomerUncheckedCreateWithoutUserInput = {
    id?: string
    openpayCustomerId: string
    email: string
    name: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentMethods?: OpenpayPaymentMethodUncheckedCreateNestedManyWithoutCustomerInput
    transactions?: OpenpayTransactionUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type OpenpayCustomerCreateOrConnectWithoutUserInput = {
    where: OpenpayCustomerWhereUniqueInput
    create: XOR<OpenpayCustomerCreateWithoutUserInput, OpenpayCustomerUncheckedCreateWithoutUserInput>
  }

  export type GameParticipantUpsertWithWhereUniqueWithoutUserInput = {
    where: GameParticipantWhereUniqueInput
    update: XOR<GameParticipantUpdateWithoutUserInput, GameParticipantUncheckedUpdateWithoutUserInput>
    create: XOR<GameParticipantCreateWithoutUserInput, GameParticipantUncheckedCreateWithoutUserInput>
  }

  export type GameParticipantUpdateWithWhereUniqueWithoutUserInput = {
    where: GameParticipantWhereUniqueInput
    data: XOR<GameParticipantUpdateWithoutUserInput, GameParticipantUncheckedUpdateWithoutUserInput>
  }

  export type GameParticipantUpdateManyWithWhereWithoutUserInput = {
    where: GameParticipantScalarWhereInput
    data: XOR<GameParticipantUpdateManyMutationInput, GameParticipantUncheckedUpdateManyWithoutUserInput>
  }

  export type GameParticipantScalarWhereInput = {
    AND?: GameParticipantScalarWhereInput | GameParticipantScalarWhereInput[]
    OR?: GameParticipantScalarWhereInput[]
    NOT?: GameParticipantScalarWhereInput | GameParticipantScalarWhereInput[]
    id?: StringFilter<"GameParticipant"> | string
    userId?: StringFilter<"GameParticipant"> | string
    gameId?: StringFilter<"GameParticipant"> | string
    joinedAt?: DateTimeFilter<"GameParticipant"> | Date | string
    cardsCount?: IntFilter<"GameParticipant"> | number
    totalSpent?: DecimalFilter<"GameParticipant"> | Decimal | DecimalJsLike | number | string
    hasWon?: BoolFilter<"GameParticipant"> | boolean
    prizeWon?: DecimalFilter<"GameParticipant"> | Decimal | DecimalJsLike | number | string
  }

  export type BingoCardUpsertWithWhereUniqueWithoutUserInput = {
    where: BingoCardWhereUniqueInput
    update: XOR<BingoCardUpdateWithoutUserInput, BingoCardUncheckedUpdateWithoutUserInput>
    create: XOR<BingoCardCreateWithoutUserInput, BingoCardUncheckedCreateWithoutUserInput>
  }

  export type BingoCardUpdateWithWhereUniqueWithoutUserInput = {
    where: BingoCardWhereUniqueInput
    data: XOR<BingoCardUpdateWithoutUserInput, BingoCardUncheckedUpdateWithoutUserInput>
  }

  export type BingoCardUpdateManyWithWhereWithoutUserInput = {
    where: BingoCardScalarWhereInput
    data: XOR<BingoCardUpdateManyMutationInput, BingoCardUncheckedUpdateManyWithoutUserInput>
  }

  export type BingoCardScalarWhereInput = {
    AND?: BingoCardScalarWhereInput | BingoCardScalarWhereInput[]
    OR?: BingoCardScalarWhereInput[]
    NOT?: BingoCardScalarWhereInput | BingoCardScalarWhereInput[]
    id?: StringFilter<"BingoCard"> | string
    userId?: StringFilter<"BingoCard"> | string
    gameId?: StringFilter<"BingoCard"> | string
    cardNumber?: IntFilter<"BingoCard"> | number
    isActive?: BoolFilter<"BingoCard"> | boolean
    markedNumbers?: StringFilter<"BingoCard"> | string
    isWinner?: BoolFilter<"BingoCard"> | boolean
    winningPattern?: StringNullableFilter<"BingoCard"> | string | null
    createdAt?: DateTimeFilter<"BingoCard"> | Date | string
    updatedAt?: DateTimeFilter<"BingoCard"> | Date | string
  }

  export type TransactionUpsertWithWhereUniqueWithoutUserInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutUserInput, TransactionUncheckedUpdateWithoutUserInput>
    create: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutUserInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutUserInput, TransactionUncheckedUpdateWithoutUserInput>
  }

  export type TransactionUpdateManyWithWhereWithoutUserInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutUserInput>
  }

  export type TransactionScalarWhereInput = {
    AND?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    OR?: TransactionScalarWhereInput[]
    NOT?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    id?: StringFilter<"Transaction"> | string
    userId?: StringFilter<"Transaction"> | string
    gameId?: StringNullableFilter<"Transaction"> | string | null
    type?: StringFilter<"Transaction"> | string
    amount?: DecimalFilter<"Transaction"> | Decimal | DecimalJsLike | number | string
    description?: StringFilter<"Transaction"> | string
    status?: StringFilter<"Transaction"> | string
    paymentMethod?: StringNullableFilter<"Transaction"> | string | null
    paymentId?: StringNullableFilter<"Transaction"> | string | null
    pearlsAmount?: DecimalNullableFilter<"Transaction"> | Decimal | DecimalJsLike | number | string | null
    fromUserId?: StringNullableFilter<"Transaction"> | string | null
    toUserId?: StringNullableFilter<"Transaction"> | string | null
    commissionAmount?: DecimalNullableFilter<"Transaction"> | Decimal | DecimalJsLike | number | string | null
    referenceId?: StringNullableFilter<"Transaction"> | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
  }

  export type WalletUpsertWithoutUserInput = {
    update: XOR<WalletUpdateWithoutUserInput, WalletUncheckedUpdateWithoutUserInput>
    create: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput>
    where?: WalletWhereInput
  }

  export type WalletUpdateToOneWithWhereWithoutUserInput = {
    where?: WalletWhereInput
    data: XOR<WalletUpdateWithoutUserInput, WalletUncheckedUpdateWithoutUserInput>
  }

  export type WalletUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dailyLimit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    monthlyLimit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isFrozen?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dailyLimit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    monthlyLimit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isFrozen?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepositRequestUpsertWithWhereUniqueWithoutUserInput = {
    where: DepositRequestWhereUniqueInput
    update: XOR<DepositRequestUpdateWithoutUserInput, DepositRequestUncheckedUpdateWithoutUserInput>
    create: XOR<DepositRequestCreateWithoutUserInput, DepositRequestUncheckedCreateWithoutUserInput>
  }

  export type DepositRequestUpdateWithWhereUniqueWithoutUserInput = {
    where: DepositRequestWhereUniqueInput
    data: XOR<DepositRequestUpdateWithoutUserInput, DepositRequestUncheckedUpdateWithoutUserInput>
  }

  export type DepositRequestUpdateManyWithWhereWithoutUserInput = {
    where: DepositRequestScalarWhereInput
    data: XOR<DepositRequestUpdateManyMutationInput, DepositRequestUncheckedUpdateManyWithoutUserInput>
  }

  export type DepositRequestScalarWhereInput = {
    AND?: DepositRequestScalarWhereInput | DepositRequestScalarWhereInput[]
    OR?: DepositRequestScalarWhereInput[]
    NOT?: DepositRequestScalarWhereInput | DepositRequestScalarWhereInput[]
    id?: StringFilter<"DepositRequest"> | string
    userId?: StringFilter<"DepositRequest"> | string
    amount?: DecimalFilter<"DepositRequest"> | Decimal | DecimalJsLike | number | string
    pearlsAmount?: DecimalFilter<"DepositRequest"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"DepositRequest"> | string
    paymentMethod?: StringFilter<"DepositRequest"> | string
    referenceCode?: StringFilter<"DepositRequest"> | string
    bankReference?: StringNullableFilter<"DepositRequest"> | string | null
    bankAccount?: StringNullableFilter<"DepositRequest"> | string | null
    bankAccountName?: StringNullableFilter<"DepositRequest"> | string | null
    status?: StringFilter<"DepositRequest"> | string
    adminNotes?: StringNullableFilter<"DepositRequest"> | string | null
    validatedBy?: StringNullableFilter<"DepositRequest"> | string | null
    validatedAt?: DateTimeNullableFilter<"DepositRequest"> | Date | string | null
    proofImage?: StringNullableFilter<"DepositRequest"> | string | null
    proofImageAdmin?: StringNullableFilter<"DepositRequest"> | string | null
    transactionId?: StringNullableFilter<"DepositRequest"> | string | null
    integrationMethod?: StringFilter<"DepositRequest"> | string
    openpayTransactionId?: StringNullableFilter<"DepositRequest"> | string | null
    autoApprovalEligible?: BoolFilter<"DepositRequest"> | boolean
    processingFee?: FloatFilter<"DepositRequest"> | number
    createdAt?: DateTimeFilter<"DepositRequest"> | Date | string
    updatedAt?: DateTimeFilter<"DepositRequest"> | Date | string
    expiresAt?: DateTimeFilter<"DepositRequest"> | Date | string
  }

  export type WithdrawalRequestUpsertWithWhereUniqueWithoutUserInput = {
    where: WithdrawalRequestWhereUniqueInput
    update: XOR<WithdrawalRequestUpdateWithoutUserInput, WithdrawalRequestUncheckedUpdateWithoutUserInput>
    create: XOR<WithdrawalRequestCreateWithoutUserInput, WithdrawalRequestUncheckedCreateWithoutUserInput>
  }

  export type WithdrawalRequestUpdateWithWhereUniqueWithoutUserInput = {
    where: WithdrawalRequestWhereUniqueInput
    data: XOR<WithdrawalRequestUpdateWithoutUserInput, WithdrawalRequestUncheckedUpdateWithoutUserInput>
  }

  export type WithdrawalRequestUpdateManyWithWhereWithoutUserInput = {
    where: WithdrawalRequestScalarWhereInput
    data: XOR<WithdrawalRequestUpdateManyMutationInput, WithdrawalRequestUncheckedUpdateManyWithoutUserInput>
  }

  export type WithdrawalRequestScalarWhereInput = {
    AND?: WithdrawalRequestScalarWhereInput | WithdrawalRequestScalarWhereInput[]
    OR?: WithdrawalRequestScalarWhereInput[]
    NOT?: WithdrawalRequestScalarWhereInput | WithdrawalRequestScalarWhereInput[]
    id?: StringFilter<"WithdrawalRequest"> | string
    userId?: StringFilter<"WithdrawalRequest"> | string
    pearlsAmount?: DecimalFilter<"WithdrawalRequest"> | Decimal | DecimalJsLike | number | string
    amountInSoles?: DecimalFilter<"WithdrawalRequest"> | Decimal | DecimalJsLike | number | string
    commission?: DecimalFilter<"WithdrawalRequest"> | Decimal | DecimalJsLike | number | string
    netAmount?: DecimalFilter<"WithdrawalRequest"> | Decimal | DecimalJsLike | number | string
    bankCode?: StringFilter<"WithdrawalRequest"> | string
    accountNumber?: StringFilter<"WithdrawalRequest"> | string
    accountType?: StringFilter<"WithdrawalRequest"> | string
    accountHolderName?: StringFilter<"WithdrawalRequest"> | string
    accountHolderDni?: StringFilter<"WithdrawalRequest"> | string
    status?: StringFilter<"WithdrawalRequest"> | string
    adminNotes?: StringNullableFilter<"WithdrawalRequest"> | string | null
    processedBy?: StringNullableFilter<"WithdrawalRequest"> | string | null
    processedAt?: DateTimeNullableFilter<"WithdrawalRequest"> | Date | string | null
    bankTransactionId?: StringNullableFilter<"WithdrawalRequest"> | string | null
    transferProof?: StringNullableFilter<"WithdrawalRequest"> | string | null
    referenceCode?: StringFilter<"WithdrawalRequest"> | string
    transactionId?: StringNullableFilter<"WithdrawalRequest"> | string | null
    createdAt?: DateTimeFilter<"WithdrawalRequest"> | Date | string
    updatedAt?: DateTimeFilter<"WithdrawalRequest"> | Date | string
  }

  export type TransactionUpsertWithWhereUniqueWithoutFromUserInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutFromUserInput, TransactionUncheckedUpdateWithoutFromUserInput>
    create: XOR<TransactionCreateWithoutFromUserInput, TransactionUncheckedCreateWithoutFromUserInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutFromUserInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutFromUserInput, TransactionUncheckedUpdateWithoutFromUserInput>
  }

  export type TransactionUpdateManyWithWhereWithoutFromUserInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutFromUserInput>
  }

  export type TransactionUpsertWithWhereUniqueWithoutToUserInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutToUserInput, TransactionUncheckedUpdateWithoutToUserInput>
    create: XOR<TransactionCreateWithoutToUserInput, TransactionUncheckedCreateWithoutToUserInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutToUserInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutToUserInput, TransactionUncheckedUpdateWithoutToUserInput>
  }

  export type TransactionUpdateManyWithWhereWithoutToUserInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutToUserInput>
  }

  export type OpenpayCustomerUpsertWithoutUserInput = {
    update: XOR<OpenpayCustomerUpdateWithoutUserInput, OpenpayCustomerUncheckedUpdateWithoutUserInput>
    create: XOR<OpenpayCustomerCreateWithoutUserInput, OpenpayCustomerUncheckedCreateWithoutUserInput>
    where?: OpenpayCustomerWhereInput
  }

  export type OpenpayCustomerUpdateToOneWithWhereWithoutUserInput = {
    where?: OpenpayCustomerWhereInput
    data: XOR<OpenpayCustomerUpdateWithoutUserInput, OpenpayCustomerUncheckedUpdateWithoutUserInput>
  }

  export type OpenpayCustomerUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    openpayCustomerId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethods?: OpenpayPaymentMethodUpdateManyWithoutCustomerNestedInput
    transactions?: OpenpayTransactionUpdateManyWithoutCustomerNestedInput
  }

  export type OpenpayCustomerUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    openpayCustomerId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethods?: OpenpayPaymentMethodUncheckedUpdateManyWithoutCustomerNestedInput
    transactions?: OpenpayTransactionUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type GameParticipantCreateWithoutGameInput = {
    id?: string
    joinedAt?: Date | string
    cardsCount?: number
    totalSpent?: Decimal | DecimalJsLike | number | string
    hasWon?: boolean
    prizeWon?: Decimal | DecimalJsLike | number | string
    user: UserCreateNestedOneWithoutGameParticipationsInput
  }

  export type GameParticipantUncheckedCreateWithoutGameInput = {
    id?: string
    userId: string
    joinedAt?: Date | string
    cardsCount?: number
    totalSpent?: Decimal | DecimalJsLike | number | string
    hasWon?: boolean
    prizeWon?: Decimal | DecimalJsLike | number | string
  }

  export type GameParticipantCreateOrConnectWithoutGameInput = {
    where: GameParticipantWhereUniqueInput
    create: XOR<GameParticipantCreateWithoutGameInput, GameParticipantUncheckedCreateWithoutGameInput>
  }

  export type GameParticipantCreateManyGameInputEnvelope = {
    data: GameParticipantCreateManyGameInput | GameParticipantCreateManyGameInput[]
  }

  export type BingoCardCreateWithoutGameInput = {
    id?: string
    cardNumber: number
    isActive?: boolean
    markedNumbers?: string
    isWinner?: boolean
    winningPattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBingoCardsInput
    numbers?: CardNumberCreateNestedManyWithoutCardInput
  }

  export type BingoCardUncheckedCreateWithoutGameInput = {
    id?: string
    userId: string
    cardNumber: number
    isActive?: boolean
    markedNumbers?: string
    isWinner?: boolean
    winningPattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    numbers?: CardNumberUncheckedCreateNestedManyWithoutCardInput
  }

  export type BingoCardCreateOrConnectWithoutGameInput = {
    where: BingoCardWhereUniqueInput
    create: XOR<BingoCardCreateWithoutGameInput, BingoCardUncheckedCreateWithoutGameInput>
  }

  export type BingoCardCreateManyGameInputEnvelope = {
    data: BingoCardCreateManyGameInput | BingoCardCreateManyGameInput[]
  }

  export type GameParticipantUpsertWithWhereUniqueWithoutGameInput = {
    where: GameParticipantWhereUniqueInput
    update: XOR<GameParticipantUpdateWithoutGameInput, GameParticipantUncheckedUpdateWithoutGameInput>
    create: XOR<GameParticipantCreateWithoutGameInput, GameParticipantUncheckedCreateWithoutGameInput>
  }

  export type GameParticipantUpdateWithWhereUniqueWithoutGameInput = {
    where: GameParticipantWhereUniqueInput
    data: XOR<GameParticipantUpdateWithoutGameInput, GameParticipantUncheckedUpdateWithoutGameInput>
  }

  export type GameParticipantUpdateManyWithWhereWithoutGameInput = {
    where: GameParticipantScalarWhereInput
    data: XOR<GameParticipantUpdateManyMutationInput, GameParticipantUncheckedUpdateManyWithoutGameInput>
  }

  export type BingoCardUpsertWithWhereUniqueWithoutGameInput = {
    where: BingoCardWhereUniqueInput
    update: XOR<BingoCardUpdateWithoutGameInput, BingoCardUncheckedUpdateWithoutGameInput>
    create: XOR<BingoCardCreateWithoutGameInput, BingoCardUncheckedCreateWithoutGameInput>
  }

  export type BingoCardUpdateWithWhereUniqueWithoutGameInput = {
    where: BingoCardWhereUniqueInput
    data: XOR<BingoCardUpdateWithoutGameInput, BingoCardUncheckedUpdateWithoutGameInput>
  }

  export type BingoCardUpdateManyWithWhereWithoutGameInput = {
    where: BingoCardScalarWhereInput
    data: XOR<BingoCardUpdateManyMutationInput, BingoCardUncheckedUpdateManyWithoutGameInput>
  }

  export type UserCreateWithoutGameParticipationsInput = {
    id?: string
    email: string
    username: string
    password: string
    role?: string
    balance?: Decimal | DecimalJsLike | number | string
    pearlsBalance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isVerified?: boolean
    fullName?: string | null
    phone?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    bingoCards?: BingoCardCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    depositRequests?: DepositRequestCreateNestedManyWithoutUserInput
    withdrawalRequests?: WithdrawalRequestCreateNestedManyWithoutUserInput
    sentTransfers?: TransactionCreateNestedManyWithoutFromUserInput
    receivedTransfers?: TransactionCreateNestedManyWithoutToUserInput
    openpayCustomer?: OpenpayCustomerCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGameParticipationsInput = {
    id?: string
    email: string
    username: string
    password: string
    role?: string
    balance?: Decimal | DecimalJsLike | number | string
    pearlsBalance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isVerified?: boolean
    fullName?: string | null
    phone?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    bingoCards?: BingoCardUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    depositRequests?: DepositRequestUncheckedCreateNestedManyWithoutUserInput
    withdrawalRequests?: WithdrawalRequestUncheckedCreateNestedManyWithoutUserInput
    sentTransfers?: TransactionUncheckedCreateNestedManyWithoutFromUserInput
    receivedTransfers?: TransactionUncheckedCreateNestedManyWithoutToUserInput
    openpayCustomer?: OpenpayCustomerUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGameParticipationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGameParticipationsInput, UserUncheckedCreateWithoutGameParticipationsInput>
  }

  export type GameCreateWithoutParticipantsInput = {
    id?: string
    title: string
    description?: string | null
    maxPlayers?: number
    cardPrice?: Decimal | DecimalJsLike | number | string
    totalPrize?: Decimal | DecimalJsLike | number | string
    status?: string
    scheduledAt: Date | string
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    ballsDrawn?: string
    currentBall?: number | null
    winningCards?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bingoCards?: BingoCardCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutParticipantsInput = {
    id?: string
    title: string
    description?: string | null
    maxPlayers?: number
    cardPrice?: Decimal | DecimalJsLike | number | string
    totalPrize?: Decimal | DecimalJsLike | number | string
    status?: string
    scheduledAt: Date | string
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    ballsDrawn?: string
    currentBall?: number | null
    winningCards?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bingoCards?: BingoCardUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutParticipantsInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutParticipantsInput, GameUncheckedCreateWithoutParticipantsInput>
  }

  export type UserUpsertWithoutGameParticipationsInput = {
    update: XOR<UserUpdateWithoutGameParticipationsInput, UserUncheckedUpdateWithoutGameParticipationsInput>
    create: XOR<UserCreateWithoutGameParticipationsInput, UserUncheckedCreateWithoutGameParticipationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGameParticipationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGameParticipationsInput, UserUncheckedUpdateWithoutGameParticipationsInput>
  }

  export type UserUpdateWithoutGameParticipationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bingoCards?: BingoCardUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    depositRequests?: DepositRequestUpdateManyWithoutUserNestedInput
    withdrawalRequests?: WithdrawalRequestUpdateManyWithoutUserNestedInput
    sentTransfers?: TransactionUpdateManyWithoutFromUserNestedInput
    receivedTransfers?: TransactionUpdateManyWithoutToUserNestedInput
    openpayCustomer?: OpenpayCustomerUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGameParticipationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bingoCards?: BingoCardUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    depositRequests?: DepositRequestUncheckedUpdateManyWithoutUserNestedInput
    withdrawalRequests?: WithdrawalRequestUncheckedUpdateManyWithoutUserNestedInput
    sentTransfers?: TransactionUncheckedUpdateManyWithoutFromUserNestedInput
    receivedTransfers?: TransactionUncheckedUpdateManyWithoutToUserNestedInput
    openpayCustomer?: OpenpayCustomerUncheckedUpdateOneWithoutUserNestedInput
  }

  export type GameUpsertWithoutParticipantsInput = {
    update: XOR<GameUpdateWithoutParticipantsInput, GameUncheckedUpdateWithoutParticipantsInput>
    create: XOR<GameCreateWithoutParticipantsInput, GameUncheckedCreateWithoutParticipantsInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutParticipantsInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutParticipantsInput, GameUncheckedUpdateWithoutParticipantsInput>
  }

  export type GameUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    cardPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrize?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsDrawn?: StringFieldUpdateOperationsInput | string
    currentBall?: NullableIntFieldUpdateOperationsInput | number | null
    winningCards?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bingoCards?: BingoCardUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    cardPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrize?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsDrawn?: StringFieldUpdateOperationsInput | string
    currentBall?: NullableIntFieldUpdateOperationsInput | number | null
    winningCards?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bingoCards?: BingoCardUncheckedUpdateManyWithoutGameNestedInput
  }

  export type UserCreateWithoutBingoCardsInput = {
    id?: string
    email: string
    username: string
    password: string
    role?: string
    balance?: Decimal | DecimalJsLike | number | string
    pearlsBalance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isVerified?: boolean
    fullName?: string | null
    phone?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    gameParticipations?: GameParticipantCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    depositRequests?: DepositRequestCreateNestedManyWithoutUserInput
    withdrawalRequests?: WithdrawalRequestCreateNestedManyWithoutUserInput
    sentTransfers?: TransactionCreateNestedManyWithoutFromUserInput
    receivedTransfers?: TransactionCreateNestedManyWithoutToUserInput
    openpayCustomer?: OpenpayCustomerCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBingoCardsInput = {
    id?: string
    email: string
    username: string
    password: string
    role?: string
    balance?: Decimal | DecimalJsLike | number | string
    pearlsBalance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isVerified?: boolean
    fullName?: string | null
    phone?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    gameParticipations?: GameParticipantUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    depositRequests?: DepositRequestUncheckedCreateNestedManyWithoutUserInput
    withdrawalRequests?: WithdrawalRequestUncheckedCreateNestedManyWithoutUserInput
    sentTransfers?: TransactionUncheckedCreateNestedManyWithoutFromUserInput
    receivedTransfers?: TransactionUncheckedCreateNestedManyWithoutToUserInput
    openpayCustomer?: OpenpayCustomerUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBingoCardsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBingoCardsInput, UserUncheckedCreateWithoutBingoCardsInput>
  }

  export type GameCreateWithoutBingoCardsInput = {
    id?: string
    title: string
    description?: string | null
    maxPlayers?: number
    cardPrice?: Decimal | DecimalJsLike | number | string
    totalPrize?: Decimal | DecimalJsLike | number | string
    status?: string
    scheduledAt: Date | string
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    ballsDrawn?: string
    currentBall?: number | null
    winningCards?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: GameParticipantCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutBingoCardsInput = {
    id?: string
    title: string
    description?: string | null
    maxPlayers?: number
    cardPrice?: Decimal | DecimalJsLike | number | string
    totalPrize?: Decimal | DecimalJsLike | number | string
    status?: string
    scheduledAt: Date | string
    startedAt?: Date | string | null
    endedAt?: Date | string | null
    ballsDrawn?: string
    currentBall?: number | null
    winningCards?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: GameParticipantUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutBingoCardsInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutBingoCardsInput, GameUncheckedCreateWithoutBingoCardsInput>
  }

  export type CardNumberCreateWithoutCardInput = {
    id?: string
    position: number
    column: string
    number?: number | null
    isMarked?: boolean
    isFree?: boolean
  }

  export type CardNumberUncheckedCreateWithoutCardInput = {
    id?: string
    position: number
    column: string
    number?: number | null
    isMarked?: boolean
    isFree?: boolean
  }

  export type CardNumberCreateOrConnectWithoutCardInput = {
    where: CardNumberWhereUniqueInput
    create: XOR<CardNumberCreateWithoutCardInput, CardNumberUncheckedCreateWithoutCardInput>
  }

  export type CardNumberCreateManyCardInputEnvelope = {
    data: CardNumberCreateManyCardInput | CardNumberCreateManyCardInput[]
  }

  export type UserUpsertWithoutBingoCardsInput = {
    update: XOR<UserUpdateWithoutBingoCardsInput, UserUncheckedUpdateWithoutBingoCardsInput>
    create: XOR<UserCreateWithoutBingoCardsInput, UserUncheckedCreateWithoutBingoCardsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBingoCardsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBingoCardsInput, UserUncheckedUpdateWithoutBingoCardsInput>
  }

  export type UserUpdateWithoutBingoCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameParticipations?: GameParticipantUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    depositRequests?: DepositRequestUpdateManyWithoutUserNestedInput
    withdrawalRequests?: WithdrawalRequestUpdateManyWithoutUserNestedInput
    sentTransfers?: TransactionUpdateManyWithoutFromUserNestedInput
    receivedTransfers?: TransactionUpdateManyWithoutToUserNestedInput
    openpayCustomer?: OpenpayCustomerUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBingoCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameParticipations?: GameParticipantUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    depositRequests?: DepositRequestUncheckedUpdateManyWithoutUserNestedInput
    withdrawalRequests?: WithdrawalRequestUncheckedUpdateManyWithoutUserNestedInput
    sentTransfers?: TransactionUncheckedUpdateManyWithoutFromUserNestedInput
    receivedTransfers?: TransactionUncheckedUpdateManyWithoutToUserNestedInput
    openpayCustomer?: OpenpayCustomerUncheckedUpdateOneWithoutUserNestedInput
  }

  export type GameUpsertWithoutBingoCardsInput = {
    update: XOR<GameUpdateWithoutBingoCardsInput, GameUncheckedUpdateWithoutBingoCardsInput>
    create: XOR<GameCreateWithoutBingoCardsInput, GameUncheckedCreateWithoutBingoCardsInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutBingoCardsInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutBingoCardsInput, GameUncheckedUpdateWithoutBingoCardsInput>
  }

  export type GameUpdateWithoutBingoCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    cardPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrize?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsDrawn?: StringFieldUpdateOperationsInput | string
    currentBall?: NullableIntFieldUpdateOperationsInput | number | null
    winningCards?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: GameParticipantUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutBingoCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    maxPlayers?: IntFieldUpdateOperationsInput | number
    cardPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrize?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ballsDrawn?: StringFieldUpdateOperationsInput | string
    currentBall?: NullableIntFieldUpdateOperationsInput | number | null
    winningCards?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: GameParticipantUncheckedUpdateManyWithoutGameNestedInput
  }

  export type CardNumberUpsertWithWhereUniqueWithoutCardInput = {
    where: CardNumberWhereUniqueInput
    update: XOR<CardNumberUpdateWithoutCardInput, CardNumberUncheckedUpdateWithoutCardInput>
    create: XOR<CardNumberCreateWithoutCardInput, CardNumberUncheckedCreateWithoutCardInput>
  }

  export type CardNumberUpdateWithWhereUniqueWithoutCardInput = {
    where: CardNumberWhereUniqueInput
    data: XOR<CardNumberUpdateWithoutCardInput, CardNumberUncheckedUpdateWithoutCardInput>
  }

  export type CardNumberUpdateManyWithWhereWithoutCardInput = {
    where: CardNumberScalarWhereInput
    data: XOR<CardNumberUpdateManyMutationInput, CardNumberUncheckedUpdateManyWithoutCardInput>
  }

  export type CardNumberScalarWhereInput = {
    AND?: CardNumberScalarWhereInput | CardNumberScalarWhereInput[]
    OR?: CardNumberScalarWhereInput[]
    NOT?: CardNumberScalarWhereInput | CardNumberScalarWhereInput[]
    id?: StringFilter<"CardNumber"> | string
    cardId?: StringFilter<"CardNumber"> | string
    position?: IntFilter<"CardNumber"> | number
    column?: StringFilter<"CardNumber"> | string
    number?: IntNullableFilter<"CardNumber"> | number | null
    isMarked?: BoolFilter<"CardNumber"> | boolean
    isFree?: BoolFilter<"CardNumber"> | boolean
  }

  export type BingoCardCreateWithoutNumbersInput = {
    id?: string
    cardNumber: number
    isActive?: boolean
    markedNumbers?: string
    isWinner?: boolean
    winningPattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBingoCardsInput
    game: GameCreateNestedOneWithoutBingoCardsInput
  }

  export type BingoCardUncheckedCreateWithoutNumbersInput = {
    id?: string
    userId: string
    gameId: string
    cardNumber: number
    isActive?: boolean
    markedNumbers?: string
    isWinner?: boolean
    winningPattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BingoCardCreateOrConnectWithoutNumbersInput = {
    where: BingoCardWhereUniqueInput
    create: XOR<BingoCardCreateWithoutNumbersInput, BingoCardUncheckedCreateWithoutNumbersInput>
  }

  export type BingoCardUpsertWithoutNumbersInput = {
    update: XOR<BingoCardUpdateWithoutNumbersInput, BingoCardUncheckedUpdateWithoutNumbersInput>
    create: XOR<BingoCardCreateWithoutNumbersInput, BingoCardUncheckedCreateWithoutNumbersInput>
    where?: BingoCardWhereInput
  }

  export type BingoCardUpdateToOneWithWhereWithoutNumbersInput = {
    where?: BingoCardWhereInput
    data: XOR<BingoCardUpdateWithoutNumbersInput, BingoCardUncheckedUpdateWithoutNumbersInput>
  }

  export type BingoCardUpdateWithoutNumbersInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardNumber?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    markedNumbers?: StringFieldUpdateOperationsInput | string
    isWinner?: BoolFieldUpdateOperationsInput | boolean
    winningPattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBingoCardsNestedInput
    game?: GameUpdateOneRequiredWithoutBingoCardsNestedInput
  }

  export type BingoCardUncheckedUpdateWithoutNumbersInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    cardNumber?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    markedNumbers?: StringFieldUpdateOperationsInput | string
    isWinner?: BoolFieldUpdateOperationsInput | boolean
    winningPattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutTransactionsInput = {
    id?: string
    email: string
    username: string
    password: string
    role?: string
    balance?: Decimal | DecimalJsLike | number | string
    pearlsBalance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isVerified?: boolean
    fullName?: string | null
    phone?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    gameParticipations?: GameParticipantCreateNestedManyWithoutUserInput
    bingoCards?: BingoCardCreateNestedManyWithoutUserInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    depositRequests?: DepositRequestCreateNestedManyWithoutUserInput
    withdrawalRequests?: WithdrawalRequestCreateNestedManyWithoutUserInput
    sentTransfers?: TransactionCreateNestedManyWithoutFromUserInput
    receivedTransfers?: TransactionCreateNestedManyWithoutToUserInput
    openpayCustomer?: OpenpayCustomerCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTransactionsInput = {
    id?: string
    email: string
    username: string
    password: string
    role?: string
    balance?: Decimal | DecimalJsLike | number | string
    pearlsBalance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isVerified?: boolean
    fullName?: string | null
    phone?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    gameParticipations?: GameParticipantUncheckedCreateNestedManyWithoutUserInput
    bingoCards?: BingoCardUncheckedCreateNestedManyWithoutUserInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    depositRequests?: DepositRequestUncheckedCreateNestedManyWithoutUserInput
    withdrawalRequests?: WithdrawalRequestUncheckedCreateNestedManyWithoutUserInput
    sentTransfers?: TransactionUncheckedCreateNestedManyWithoutFromUserInput
    receivedTransfers?: TransactionUncheckedCreateNestedManyWithoutToUserInput
    openpayCustomer?: OpenpayCustomerUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTransactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
  }

  export type UserCreateWithoutSentTransfersInput = {
    id?: string
    email: string
    username: string
    password: string
    role?: string
    balance?: Decimal | DecimalJsLike | number | string
    pearlsBalance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isVerified?: boolean
    fullName?: string | null
    phone?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    gameParticipations?: GameParticipantCreateNestedManyWithoutUserInput
    bingoCards?: BingoCardCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    depositRequests?: DepositRequestCreateNestedManyWithoutUserInput
    withdrawalRequests?: WithdrawalRequestCreateNestedManyWithoutUserInput
    receivedTransfers?: TransactionCreateNestedManyWithoutToUserInput
    openpayCustomer?: OpenpayCustomerCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSentTransfersInput = {
    id?: string
    email: string
    username: string
    password: string
    role?: string
    balance?: Decimal | DecimalJsLike | number | string
    pearlsBalance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isVerified?: boolean
    fullName?: string | null
    phone?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    gameParticipations?: GameParticipantUncheckedCreateNestedManyWithoutUserInput
    bingoCards?: BingoCardUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    depositRequests?: DepositRequestUncheckedCreateNestedManyWithoutUserInput
    withdrawalRequests?: WithdrawalRequestUncheckedCreateNestedManyWithoutUserInput
    receivedTransfers?: TransactionUncheckedCreateNestedManyWithoutToUserInput
    openpayCustomer?: OpenpayCustomerUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSentTransfersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentTransfersInput, UserUncheckedCreateWithoutSentTransfersInput>
  }

  export type UserCreateWithoutReceivedTransfersInput = {
    id?: string
    email: string
    username: string
    password: string
    role?: string
    balance?: Decimal | DecimalJsLike | number | string
    pearlsBalance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isVerified?: boolean
    fullName?: string | null
    phone?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    gameParticipations?: GameParticipantCreateNestedManyWithoutUserInput
    bingoCards?: BingoCardCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    depositRequests?: DepositRequestCreateNestedManyWithoutUserInput
    withdrawalRequests?: WithdrawalRequestCreateNestedManyWithoutUserInput
    sentTransfers?: TransactionCreateNestedManyWithoutFromUserInput
    openpayCustomer?: OpenpayCustomerCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReceivedTransfersInput = {
    id?: string
    email: string
    username: string
    password: string
    role?: string
    balance?: Decimal | DecimalJsLike | number | string
    pearlsBalance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isVerified?: boolean
    fullName?: string | null
    phone?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    gameParticipations?: GameParticipantUncheckedCreateNestedManyWithoutUserInput
    bingoCards?: BingoCardUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    depositRequests?: DepositRequestUncheckedCreateNestedManyWithoutUserInput
    withdrawalRequests?: WithdrawalRequestUncheckedCreateNestedManyWithoutUserInput
    sentTransfers?: TransactionUncheckedCreateNestedManyWithoutFromUserInput
    openpayCustomer?: OpenpayCustomerUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReceivedTransfersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedTransfersInput, UserUncheckedCreateWithoutReceivedTransfersInput>
  }

  export type UserUpsertWithoutTransactionsInput = {
    update: XOR<UserUpdateWithoutTransactionsInput, UserUncheckedUpdateWithoutTransactionsInput>
    create: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTransactionsInput, UserUncheckedUpdateWithoutTransactionsInput>
  }

  export type UserUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameParticipations?: GameParticipantUpdateManyWithoutUserNestedInput
    bingoCards?: BingoCardUpdateManyWithoutUserNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    depositRequests?: DepositRequestUpdateManyWithoutUserNestedInput
    withdrawalRequests?: WithdrawalRequestUpdateManyWithoutUserNestedInput
    sentTransfers?: TransactionUpdateManyWithoutFromUserNestedInput
    receivedTransfers?: TransactionUpdateManyWithoutToUserNestedInput
    openpayCustomer?: OpenpayCustomerUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameParticipations?: GameParticipantUncheckedUpdateManyWithoutUserNestedInput
    bingoCards?: BingoCardUncheckedUpdateManyWithoutUserNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    depositRequests?: DepositRequestUncheckedUpdateManyWithoutUserNestedInput
    withdrawalRequests?: WithdrawalRequestUncheckedUpdateManyWithoutUserNestedInput
    sentTransfers?: TransactionUncheckedUpdateManyWithoutFromUserNestedInput
    receivedTransfers?: TransactionUncheckedUpdateManyWithoutToUserNestedInput
    openpayCustomer?: OpenpayCustomerUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserUpsertWithoutSentTransfersInput = {
    update: XOR<UserUpdateWithoutSentTransfersInput, UserUncheckedUpdateWithoutSentTransfersInput>
    create: XOR<UserCreateWithoutSentTransfersInput, UserUncheckedCreateWithoutSentTransfersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentTransfersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentTransfersInput, UserUncheckedUpdateWithoutSentTransfersInput>
  }

  export type UserUpdateWithoutSentTransfersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameParticipations?: GameParticipantUpdateManyWithoutUserNestedInput
    bingoCards?: BingoCardUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    depositRequests?: DepositRequestUpdateManyWithoutUserNestedInput
    withdrawalRequests?: WithdrawalRequestUpdateManyWithoutUserNestedInput
    receivedTransfers?: TransactionUpdateManyWithoutToUserNestedInput
    openpayCustomer?: OpenpayCustomerUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSentTransfersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameParticipations?: GameParticipantUncheckedUpdateManyWithoutUserNestedInput
    bingoCards?: BingoCardUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    depositRequests?: DepositRequestUncheckedUpdateManyWithoutUserNestedInput
    withdrawalRequests?: WithdrawalRequestUncheckedUpdateManyWithoutUserNestedInput
    receivedTransfers?: TransactionUncheckedUpdateManyWithoutToUserNestedInput
    openpayCustomer?: OpenpayCustomerUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserUpsertWithoutReceivedTransfersInput = {
    update: XOR<UserUpdateWithoutReceivedTransfersInput, UserUncheckedUpdateWithoutReceivedTransfersInput>
    create: XOR<UserCreateWithoutReceivedTransfersInput, UserUncheckedCreateWithoutReceivedTransfersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedTransfersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedTransfersInput, UserUncheckedUpdateWithoutReceivedTransfersInput>
  }

  export type UserUpdateWithoutReceivedTransfersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameParticipations?: GameParticipantUpdateManyWithoutUserNestedInput
    bingoCards?: BingoCardUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    depositRequests?: DepositRequestUpdateManyWithoutUserNestedInput
    withdrawalRequests?: WithdrawalRequestUpdateManyWithoutUserNestedInput
    sentTransfers?: TransactionUpdateManyWithoutFromUserNestedInput
    openpayCustomer?: OpenpayCustomerUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedTransfersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameParticipations?: GameParticipantUncheckedUpdateManyWithoutUserNestedInput
    bingoCards?: BingoCardUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    depositRequests?: DepositRequestUncheckedUpdateManyWithoutUserNestedInput
    withdrawalRequests?: WithdrawalRequestUncheckedUpdateManyWithoutUserNestedInput
    sentTransfers?: TransactionUncheckedUpdateManyWithoutFromUserNestedInput
    openpayCustomer?: OpenpayCustomerUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutWalletInput = {
    id?: string
    email: string
    username: string
    password: string
    role?: string
    balance?: Decimal | DecimalJsLike | number | string
    pearlsBalance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isVerified?: boolean
    fullName?: string | null
    phone?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    gameParticipations?: GameParticipantCreateNestedManyWithoutUserInput
    bingoCards?: BingoCardCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    depositRequests?: DepositRequestCreateNestedManyWithoutUserInput
    withdrawalRequests?: WithdrawalRequestCreateNestedManyWithoutUserInput
    sentTransfers?: TransactionCreateNestedManyWithoutFromUserInput
    receivedTransfers?: TransactionCreateNestedManyWithoutToUserInput
    openpayCustomer?: OpenpayCustomerCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWalletInput = {
    id?: string
    email: string
    username: string
    password: string
    role?: string
    balance?: Decimal | DecimalJsLike | number | string
    pearlsBalance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isVerified?: boolean
    fullName?: string | null
    phone?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    gameParticipations?: GameParticipantUncheckedCreateNestedManyWithoutUserInput
    bingoCards?: BingoCardUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    depositRequests?: DepositRequestUncheckedCreateNestedManyWithoutUserInput
    withdrawalRequests?: WithdrawalRequestUncheckedCreateNestedManyWithoutUserInput
    sentTransfers?: TransactionUncheckedCreateNestedManyWithoutFromUserInput
    receivedTransfers?: TransactionUncheckedCreateNestedManyWithoutToUserInput
    openpayCustomer?: OpenpayCustomerUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWalletInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWalletInput, UserUncheckedCreateWithoutWalletInput>
  }

  export type UserUpsertWithoutWalletInput = {
    update: XOR<UserUpdateWithoutWalletInput, UserUncheckedUpdateWithoutWalletInput>
    create: XOR<UserCreateWithoutWalletInput, UserUncheckedCreateWithoutWalletInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWalletInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWalletInput, UserUncheckedUpdateWithoutWalletInput>
  }

  export type UserUpdateWithoutWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameParticipations?: GameParticipantUpdateManyWithoutUserNestedInput
    bingoCards?: BingoCardUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    depositRequests?: DepositRequestUpdateManyWithoutUserNestedInput
    withdrawalRequests?: WithdrawalRequestUpdateManyWithoutUserNestedInput
    sentTransfers?: TransactionUpdateManyWithoutFromUserNestedInput
    receivedTransfers?: TransactionUpdateManyWithoutToUserNestedInput
    openpayCustomer?: OpenpayCustomerUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameParticipations?: GameParticipantUncheckedUpdateManyWithoutUserNestedInput
    bingoCards?: BingoCardUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    depositRequests?: DepositRequestUncheckedUpdateManyWithoutUserNestedInput
    withdrawalRequests?: WithdrawalRequestUncheckedUpdateManyWithoutUserNestedInput
    sentTransfers?: TransactionUncheckedUpdateManyWithoutFromUserNestedInput
    receivedTransfers?: TransactionUncheckedUpdateManyWithoutToUserNestedInput
    openpayCustomer?: OpenpayCustomerUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutDepositRequestsInput = {
    id?: string
    email: string
    username: string
    password: string
    role?: string
    balance?: Decimal | DecimalJsLike | number | string
    pearlsBalance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isVerified?: boolean
    fullName?: string | null
    phone?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    gameParticipations?: GameParticipantCreateNestedManyWithoutUserInput
    bingoCards?: BingoCardCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    withdrawalRequests?: WithdrawalRequestCreateNestedManyWithoutUserInput
    sentTransfers?: TransactionCreateNestedManyWithoutFromUserInput
    receivedTransfers?: TransactionCreateNestedManyWithoutToUserInput
    openpayCustomer?: OpenpayCustomerCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDepositRequestsInput = {
    id?: string
    email: string
    username: string
    password: string
    role?: string
    balance?: Decimal | DecimalJsLike | number | string
    pearlsBalance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isVerified?: boolean
    fullName?: string | null
    phone?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    gameParticipations?: GameParticipantUncheckedCreateNestedManyWithoutUserInput
    bingoCards?: BingoCardUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    withdrawalRequests?: WithdrawalRequestUncheckedCreateNestedManyWithoutUserInput
    sentTransfers?: TransactionUncheckedCreateNestedManyWithoutFromUserInput
    receivedTransfers?: TransactionUncheckedCreateNestedManyWithoutToUserInput
    openpayCustomer?: OpenpayCustomerUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDepositRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDepositRequestsInput, UserUncheckedCreateWithoutDepositRequestsInput>
  }

  export type OpenpayTransactionCreateWithoutDepositRequestInput = {
    id?: string
    openpayTransactionId: string
    openpayChargeId?: string | null
    amount: number
    currency?: string
    paymentMethod: string
    paymentMethodDetails?: string | null
    openpayStatus: string
    openpayErrorCode?: string | null
    openpayErrorMessage?: string | null
    customerEmail: string
    customerPhone?: string | null
    authorizationCode?: string | null
    operationType?: string | null
    deviceSessionId?: string | null
    riskScore?: number | null
    fraudIndicators?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    chargedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: OpenpayCustomerCreateNestedOneWithoutTransactionsInput
    webhookEvents?: OpenpayWebhookEventCreateNestedManyWithoutTransactionInput
  }

  export type OpenpayTransactionUncheckedCreateWithoutDepositRequestInput = {
    id?: string
    openpayTransactionId: string
    openpayChargeId?: string | null
    amount: number
    currency?: string
    paymentMethod: string
    paymentMethodDetails?: string | null
    openpayStatus: string
    openpayErrorCode?: string | null
    openpayErrorMessage?: string | null
    customerId: string
    customerEmail: string
    customerPhone?: string | null
    authorizationCode?: string | null
    operationType?: string | null
    deviceSessionId?: string | null
    riskScore?: number | null
    fraudIndicators?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    chargedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    webhookEvents?: OpenpayWebhookEventUncheckedCreateNestedManyWithoutTransactionInput
  }

  export type OpenpayTransactionCreateOrConnectWithoutDepositRequestInput = {
    where: OpenpayTransactionWhereUniqueInput
    create: XOR<OpenpayTransactionCreateWithoutDepositRequestInput, OpenpayTransactionUncheckedCreateWithoutDepositRequestInput>
  }

  export type OpenpayTransactionCreateManyDepositRequestInputEnvelope = {
    data: OpenpayTransactionCreateManyDepositRequestInput | OpenpayTransactionCreateManyDepositRequestInput[]
  }

  export type UserUpsertWithoutDepositRequestsInput = {
    update: XOR<UserUpdateWithoutDepositRequestsInput, UserUncheckedUpdateWithoutDepositRequestsInput>
    create: XOR<UserCreateWithoutDepositRequestsInput, UserUncheckedCreateWithoutDepositRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDepositRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDepositRequestsInput, UserUncheckedUpdateWithoutDepositRequestsInput>
  }

  export type UserUpdateWithoutDepositRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameParticipations?: GameParticipantUpdateManyWithoutUserNestedInput
    bingoCards?: BingoCardUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    withdrawalRequests?: WithdrawalRequestUpdateManyWithoutUserNestedInput
    sentTransfers?: TransactionUpdateManyWithoutFromUserNestedInput
    receivedTransfers?: TransactionUpdateManyWithoutToUserNestedInput
    openpayCustomer?: OpenpayCustomerUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDepositRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameParticipations?: GameParticipantUncheckedUpdateManyWithoutUserNestedInput
    bingoCards?: BingoCardUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    withdrawalRequests?: WithdrawalRequestUncheckedUpdateManyWithoutUserNestedInput
    sentTransfers?: TransactionUncheckedUpdateManyWithoutFromUserNestedInput
    receivedTransfers?: TransactionUncheckedUpdateManyWithoutToUserNestedInput
    openpayCustomer?: OpenpayCustomerUncheckedUpdateOneWithoutUserNestedInput
  }

  export type OpenpayTransactionUpsertWithWhereUniqueWithoutDepositRequestInput = {
    where: OpenpayTransactionWhereUniqueInput
    update: XOR<OpenpayTransactionUpdateWithoutDepositRequestInput, OpenpayTransactionUncheckedUpdateWithoutDepositRequestInput>
    create: XOR<OpenpayTransactionCreateWithoutDepositRequestInput, OpenpayTransactionUncheckedCreateWithoutDepositRequestInput>
  }

  export type OpenpayTransactionUpdateWithWhereUniqueWithoutDepositRequestInput = {
    where: OpenpayTransactionWhereUniqueInput
    data: XOR<OpenpayTransactionUpdateWithoutDepositRequestInput, OpenpayTransactionUncheckedUpdateWithoutDepositRequestInput>
  }

  export type OpenpayTransactionUpdateManyWithWhereWithoutDepositRequestInput = {
    where: OpenpayTransactionScalarWhereInput
    data: XOR<OpenpayTransactionUpdateManyMutationInput, OpenpayTransactionUncheckedUpdateManyWithoutDepositRequestInput>
  }

  export type OpenpayTransactionScalarWhereInput = {
    AND?: OpenpayTransactionScalarWhereInput | OpenpayTransactionScalarWhereInput[]
    OR?: OpenpayTransactionScalarWhereInput[]
    NOT?: OpenpayTransactionScalarWhereInput | OpenpayTransactionScalarWhereInput[]
    id?: StringFilter<"OpenpayTransaction"> | string
    depositRequestId?: StringFilter<"OpenpayTransaction"> | string
    openpayTransactionId?: StringFilter<"OpenpayTransaction"> | string
    openpayChargeId?: StringNullableFilter<"OpenpayTransaction"> | string | null
    amount?: FloatFilter<"OpenpayTransaction"> | number
    currency?: StringFilter<"OpenpayTransaction"> | string
    paymentMethod?: StringFilter<"OpenpayTransaction"> | string
    paymentMethodDetails?: StringNullableFilter<"OpenpayTransaction"> | string | null
    openpayStatus?: StringFilter<"OpenpayTransaction"> | string
    openpayErrorCode?: StringNullableFilter<"OpenpayTransaction"> | string | null
    openpayErrorMessage?: StringNullableFilter<"OpenpayTransaction"> | string | null
    customerId?: StringFilter<"OpenpayTransaction"> | string
    customerEmail?: StringFilter<"OpenpayTransaction"> | string
    customerPhone?: StringNullableFilter<"OpenpayTransaction"> | string | null
    authorizationCode?: StringNullableFilter<"OpenpayTransaction"> | string | null
    operationType?: StringNullableFilter<"OpenpayTransaction"> | string | null
    deviceSessionId?: StringNullableFilter<"OpenpayTransaction"> | string | null
    riskScore?: FloatNullableFilter<"OpenpayTransaction"> | number | null
    fraudIndicators?: StringNullableFilter<"OpenpayTransaction"> | string | null
    ipAddress?: StringNullableFilter<"OpenpayTransaction"> | string | null
    userAgent?: StringNullableFilter<"OpenpayTransaction"> | string | null
    chargedAt?: DateTimeNullableFilter<"OpenpayTransaction"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"OpenpayTransaction"> | Date | string | null
    createdAt?: DateTimeFilter<"OpenpayTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"OpenpayTransaction"> | Date | string
  }

  export type UserCreateWithoutWithdrawalRequestsInput = {
    id?: string
    email: string
    username: string
    password: string
    role?: string
    balance?: Decimal | DecimalJsLike | number | string
    pearlsBalance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isVerified?: boolean
    fullName?: string | null
    phone?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    gameParticipations?: GameParticipantCreateNestedManyWithoutUserInput
    bingoCards?: BingoCardCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    depositRequests?: DepositRequestCreateNestedManyWithoutUserInput
    sentTransfers?: TransactionCreateNestedManyWithoutFromUserInput
    receivedTransfers?: TransactionCreateNestedManyWithoutToUserInput
    openpayCustomer?: OpenpayCustomerCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWithdrawalRequestsInput = {
    id?: string
    email: string
    username: string
    password: string
    role?: string
    balance?: Decimal | DecimalJsLike | number | string
    pearlsBalance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isVerified?: boolean
    fullName?: string | null
    phone?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    gameParticipations?: GameParticipantUncheckedCreateNestedManyWithoutUserInput
    bingoCards?: BingoCardUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    depositRequests?: DepositRequestUncheckedCreateNestedManyWithoutUserInput
    sentTransfers?: TransactionUncheckedCreateNestedManyWithoutFromUserInput
    receivedTransfers?: TransactionUncheckedCreateNestedManyWithoutToUserInput
    openpayCustomer?: OpenpayCustomerUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWithdrawalRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWithdrawalRequestsInput, UserUncheckedCreateWithoutWithdrawalRequestsInput>
  }

  export type UserUpsertWithoutWithdrawalRequestsInput = {
    update: XOR<UserUpdateWithoutWithdrawalRequestsInput, UserUncheckedUpdateWithoutWithdrawalRequestsInput>
    create: XOR<UserCreateWithoutWithdrawalRequestsInput, UserUncheckedCreateWithoutWithdrawalRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWithdrawalRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWithdrawalRequestsInput, UserUncheckedUpdateWithoutWithdrawalRequestsInput>
  }

  export type UserUpdateWithoutWithdrawalRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameParticipations?: GameParticipantUpdateManyWithoutUserNestedInput
    bingoCards?: BingoCardUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    depositRequests?: DepositRequestUpdateManyWithoutUserNestedInput
    sentTransfers?: TransactionUpdateManyWithoutFromUserNestedInput
    receivedTransfers?: TransactionUpdateManyWithoutToUserNestedInput
    openpayCustomer?: OpenpayCustomerUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWithdrawalRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameParticipations?: GameParticipantUncheckedUpdateManyWithoutUserNestedInput
    bingoCards?: BingoCardUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    depositRequests?: DepositRequestUncheckedUpdateManyWithoutUserNestedInput
    sentTransfers?: TransactionUncheckedUpdateManyWithoutFromUserNestedInput
    receivedTransfers?: TransactionUncheckedUpdateManyWithoutToUserNestedInput
    openpayCustomer?: OpenpayCustomerUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutOpenpayCustomerInput = {
    id?: string
    email: string
    username: string
    password: string
    role?: string
    balance?: Decimal | DecimalJsLike | number | string
    pearlsBalance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isVerified?: boolean
    fullName?: string | null
    phone?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    gameParticipations?: GameParticipantCreateNestedManyWithoutUserInput
    bingoCards?: BingoCardCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    depositRequests?: DepositRequestCreateNestedManyWithoutUserInput
    withdrawalRequests?: WithdrawalRequestCreateNestedManyWithoutUserInput
    sentTransfers?: TransactionCreateNestedManyWithoutFromUserInput
    receivedTransfers?: TransactionCreateNestedManyWithoutToUserInput
  }

  export type UserUncheckedCreateWithoutOpenpayCustomerInput = {
    id?: string
    email: string
    username: string
    password: string
    role?: string
    balance?: Decimal | DecimalJsLike | number | string
    pearlsBalance?: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    isVerified?: boolean
    fullName?: string | null
    phone?: string | null
    dni?: string | null
    birthDate?: Date | string | null
    gameParticipations?: GameParticipantUncheckedCreateNestedManyWithoutUserInput
    bingoCards?: BingoCardUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    depositRequests?: DepositRequestUncheckedCreateNestedManyWithoutUserInput
    withdrawalRequests?: WithdrawalRequestUncheckedCreateNestedManyWithoutUserInput
    sentTransfers?: TransactionUncheckedCreateNestedManyWithoutFromUserInput
    receivedTransfers?: TransactionUncheckedCreateNestedManyWithoutToUserInput
  }

  export type UserCreateOrConnectWithoutOpenpayCustomerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOpenpayCustomerInput, UserUncheckedCreateWithoutOpenpayCustomerInput>
  }

  export type OpenpayPaymentMethodCreateWithoutCustomerInput = {
    id?: string
    openpayCardId?: string | null
    cardType?: string | null
    cardBrand?: string | null
    cardNumberMasked?: string | null
    cardHolderName?: string | null
    expirationMonth?: string | null
    expirationYear?: string | null
    isActive?: boolean
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OpenpayPaymentMethodUncheckedCreateWithoutCustomerInput = {
    id?: string
    openpayCardId?: string | null
    cardType?: string | null
    cardBrand?: string | null
    cardNumberMasked?: string | null
    cardHolderName?: string | null
    expirationMonth?: string | null
    expirationYear?: string | null
    isActive?: boolean
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OpenpayPaymentMethodCreateOrConnectWithoutCustomerInput = {
    where: OpenpayPaymentMethodWhereUniqueInput
    create: XOR<OpenpayPaymentMethodCreateWithoutCustomerInput, OpenpayPaymentMethodUncheckedCreateWithoutCustomerInput>
  }

  export type OpenpayPaymentMethodCreateManyCustomerInputEnvelope = {
    data: OpenpayPaymentMethodCreateManyCustomerInput | OpenpayPaymentMethodCreateManyCustomerInput[]
  }

  export type OpenpayTransactionCreateWithoutCustomerInput = {
    id?: string
    openpayTransactionId: string
    openpayChargeId?: string | null
    amount: number
    currency?: string
    paymentMethod: string
    paymentMethodDetails?: string | null
    openpayStatus: string
    openpayErrorCode?: string | null
    openpayErrorMessage?: string | null
    customerEmail: string
    customerPhone?: string | null
    authorizationCode?: string | null
    operationType?: string | null
    deviceSessionId?: string | null
    riskScore?: number | null
    fraudIndicators?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    chargedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    depositRequest: DepositRequestCreateNestedOneWithoutOpenpayTransactionsInput
    webhookEvents?: OpenpayWebhookEventCreateNestedManyWithoutTransactionInput
  }

  export type OpenpayTransactionUncheckedCreateWithoutCustomerInput = {
    id?: string
    depositRequestId: string
    openpayTransactionId: string
    openpayChargeId?: string | null
    amount: number
    currency?: string
    paymentMethod: string
    paymentMethodDetails?: string | null
    openpayStatus: string
    openpayErrorCode?: string | null
    openpayErrorMessage?: string | null
    customerEmail: string
    customerPhone?: string | null
    authorizationCode?: string | null
    operationType?: string | null
    deviceSessionId?: string | null
    riskScore?: number | null
    fraudIndicators?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    chargedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    webhookEvents?: OpenpayWebhookEventUncheckedCreateNestedManyWithoutTransactionInput
  }

  export type OpenpayTransactionCreateOrConnectWithoutCustomerInput = {
    where: OpenpayTransactionWhereUniqueInput
    create: XOR<OpenpayTransactionCreateWithoutCustomerInput, OpenpayTransactionUncheckedCreateWithoutCustomerInput>
  }

  export type OpenpayTransactionCreateManyCustomerInputEnvelope = {
    data: OpenpayTransactionCreateManyCustomerInput | OpenpayTransactionCreateManyCustomerInput[]
  }

  export type UserUpsertWithoutOpenpayCustomerInput = {
    update: XOR<UserUpdateWithoutOpenpayCustomerInput, UserUncheckedUpdateWithoutOpenpayCustomerInput>
    create: XOR<UserCreateWithoutOpenpayCustomerInput, UserUncheckedCreateWithoutOpenpayCustomerInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOpenpayCustomerInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOpenpayCustomerInput, UserUncheckedUpdateWithoutOpenpayCustomerInput>
  }

  export type UserUpdateWithoutOpenpayCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameParticipations?: GameParticipantUpdateManyWithoutUserNestedInput
    bingoCards?: BingoCardUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    depositRequests?: DepositRequestUpdateManyWithoutUserNestedInput
    withdrawalRequests?: WithdrawalRequestUpdateManyWithoutUserNestedInput
    sentTransfers?: TransactionUpdateManyWithoutFromUserNestedInput
    receivedTransfers?: TransactionUpdateManyWithoutToUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOpenpayCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    balance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsBalance?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameParticipations?: GameParticipantUncheckedUpdateManyWithoutUserNestedInput
    bingoCards?: BingoCardUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    depositRequests?: DepositRequestUncheckedUpdateManyWithoutUserNestedInput
    withdrawalRequests?: WithdrawalRequestUncheckedUpdateManyWithoutUserNestedInput
    sentTransfers?: TransactionUncheckedUpdateManyWithoutFromUserNestedInput
    receivedTransfers?: TransactionUncheckedUpdateManyWithoutToUserNestedInput
  }

  export type OpenpayPaymentMethodUpsertWithWhereUniqueWithoutCustomerInput = {
    where: OpenpayPaymentMethodWhereUniqueInput
    update: XOR<OpenpayPaymentMethodUpdateWithoutCustomerInput, OpenpayPaymentMethodUncheckedUpdateWithoutCustomerInput>
    create: XOR<OpenpayPaymentMethodCreateWithoutCustomerInput, OpenpayPaymentMethodUncheckedCreateWithoutCustomerInput>
  }

  export type OpenpayPaymentMethodUpdateWithWhereUniqueWithoutCustomerInput = {
    where: OpenpayPaymentMethodWhereUniqueInput
    data: XOR<OpenpayPaymentMethodUpdateWithoutCustomerInput, OpenpayPaymentMethodUncheckedUpdateWithoutCustomerInput>
  }

  export type OpenpayPaymentMethodUpdateManyWithWhereWithoutCustomerInput = {
    where: OpenpayPaymentMethodScalarWhereInput
    data: XOR<OpenpayPaymentMethodUpdateManyMutationInput, OpenpayPaymentMethodUncheckedUpdateManyWithoutCustomerInput>
  }

  export type OpenpayPaymentMethodScalarWhereInput = {
    AND?: OpenpayPaymentMethodScalarWhereInput | OpenpayPaymentMethodScalarWhereInput[]
    OR?: OpenpayPaymentMethodScalarWhereInput[]
    NOT?: OpenpayPaymentMethodScalarWhereInput | OpenpayPaymentMethodScalarWhereInput[]
    id?: StringFilter<"OpenpayPaymentMethod"> | string
    customerId?: StringFilter<"OpenpayPaymentMethod"> | string
    openpayCardId?: StringNullableFilter<"OpenpayPaymentMethod"> | string | null
    cardType?: StringNullableFilter<"OpenpayPaymentMethod"> | string | null
    cardBrand?: StringNullableFilter<"OpenpayPaymentMethod"> | string | null
    cardNumberMasked?: StringNullableFilter<"OpenpayPaymentMethod"> | string | null
    cardHolderName?: StringNullableFilter<"OpenpayPaymentMethod"> | string | null
    expirationMonth?: StringNullableFilter<"OpenpayPaymentMethod"> | string | null
    expirationYear?: StringNullableFilter<"OpenpayPaymentMethod"> | string | null
    isActive?: BoolFilter<"OpenpayPaymentMethod"> | boolean
    isDefault?: BoolFilter<"OpenpayPaymentMethod"> | boolean
    createdAt?: DateTimeFilter<"OpenpayPaymentMethod"> | Date | string
    updatedAt?: DateTimeFilter<"OpenpayPaymentMethod"> | Date | string
  }

  export type OpenpayTransactionUpsertWithWhereUniqueWithoutCustomerInput = {
    where: OpenpayTransactionWhereUniqueInput
    update: XOR<OpenpayTransactionUpdateWithoutCustomerInput, OpenpayTransactionUncheckedUpdateWithoutCustomerInput>
    create: XOR<OpenpayTransactionCreateWithoutCustomerInput, OpenpayTransactionUncheckedCreateWithoutCustomerInput>
  }

  export type OpenpayTransactionUpdateWithWhereUniqueWithoutCustomerInput = {
    where: OpenpayTransactionWhereUniqueInput
    data: XOR<OpenpayTransactionUpdateWithoutCustomerInput, OpenpayTransactionUncheckedUpdateWithoutCustomerInput>
  }

  export type OpenpayTransactionUpdateManyWithWhereWithoutCustomerInput = {
    where: OpenpayTransactionScalarWhereInput
    data: XOR<OpenpayTransactionUpdateManyMutationInput, OpenpayTransactionUncheckedUpdateManyWithoutCustomerInput>
  }

  export type DepositRequestCreateWithoutOpenpayTransactionsInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    pearlsAmount: Decimal | DecimalJsLike | number | string
    currency?: string
    paymentMethod: string
    referenceCode: string
    bankReference?: string | null
    bankAccount?: string | null
    bankAccountName?: string | null
    status?: string
    adminNotes?: string | null
    validatedBy?: string | null
    validatedAt?: Date | string | null
    proofImage?: string | null
    proofImageAdmin?: string | null
    transactionId?: string | null
    integrationMethod?: string
    openpayTransactionId?: string | null
    autoApprovalEligible?: boolean
    processingFee?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    expiresAt: Date | string
    user: UserCreateNestedOneWithoutDepositRequestsInput
  }

  export type DepositRequestUncheckedCreateWithoutOpenpayTransactionsInput = {
    id?: string
    userId: string
    amount: Decimal | DecimalJsLike | number | string
    pearlsAmount: Decimal | DecimalJsLike | number | string
    currency?: string
    paymentMethod: string
    referenceCode: string
    bankReference?: string | null
    bankAccount?: string | null
    bankAccountName?: string | null
    status?: string
    adminNotes?: string | null
    validatedBy?: string | null
    validatedAt?: Date | string | null
    proofImage?: string | null
    proofImageAdmin?: string | null
    transactionId?: string | null
    integrationMethod?: string
    openpayTransactionId?: string | null
    autoApprovalEligible?: boolean
    processingFee?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    expiresAt: Date | string
  }

  export type DepositRequestCreateOrConnectWithoutOpenpayTransactionsInput = {
    where: DepositRequestWhereUniqueInput
    create: XOR<DepositRequestCreateWithoutOpenpayTransactionsInput, DepositRequestUncheckedCreateWithoutOpenpayTransactionsInput>
  }

  export type OpenpayCustomerCreateWithoutTransactionsInput = {
    id?: string
    openpayCustomerId: string
    email: string
    name: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutOpenpayCustomerInput
    paymentMethods?: OpenpayPaymentMethodCreateNestedManyWithoutCustomerInput
  }

  export type OpenpayCustomerUncheckedCreateWithoutTransactionsInput = {
    id?: string
    userId: string
    openpayCustomerId: string
    email: string
    name: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentMethods?: OpenpayPaymentMethodUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type OpenpayCustomerCreateOrConnectWithoutTransactionsInput = {
    where: OpenpayCustomerWhereUniqueInput
    create: XOR<OpenpayCustomerCreateWithoutTransactionsInput, OpenpayCustomerUncheckedCreateWithoutTransactionsInput>
  }

  export type OpenpayWebhookEventCreateWithoutTransactionInput = {
    id?: string
    openpayEventId: string
    eventType: string
    webhookSignature: string
    payload: string
    processedAt?: Date | string | null
    processingStatus?: string
    errorMessage?: string | null
    createdAt?: Date | string
  }

  export type OpenpayWebhookEventUncheckedCreateWithoutTransactionInput = {
    id?: string
    openpayEventId: string
    eventType: string
    webhookSignature: string
    payload: string
    processedAt?: Date | string | null
    processingStatus?: string
    errorMessage?: string | null
    createdAt?: Date | string
  }

  export type OpenpayWebhookEventCreateOrConnectWithoutTransactionInput = {
    where: OpenpayWebhookEventWhereUniqueInput
    create: XOR<OpenpayWebhookEventCreateWithoutTransactionInput, OpenpayWebhookEventUncheckedCreateWithoutTransactionInput>
  }

  export type OpenpayWebhookEventCreateManyTransactionInputEnvelope = {
    data: OpenpayWebhookEventCreateManyTransactionInput | OpenpayWebhookEventCreateManyTransactionInput[]
  }

  export type DepositRequestUpsertWithoutOpenpayTransactionsInput = {
    update: XOR<DepositRequestUpdateWithoutOpenpayTransactionsInput, DepositRequestUncheckedUpdateWithoutOpenpayTransactionsInput>
    create: XOR<DepositRequestCreateWithoutOpenpayTransactionsInput, DepositRequestUncheckedCreateWithoutOpenpayTransactionsInput>
    where?: DepositRequestWhereInput
  }

  export type DepositRequestUpdateToOneWithWhereWithoutOpenpayTransactionsInput = {
    where?: DepositRequestWhereInput
    data: XOR<DepositRequestUpdateWithoutOpenpayTransactionsInput, DepositRequestUncheckedUpdateWithoutOpenpayTransactionsInput>
  }

  export type DepositRequestUpdateWithoutOpenpayTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    referenceCode?: StringFieldUpdateOperationsInput | string
    bankReference?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccountName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
    validatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    proofImage?: NullableStringFieldUpdateOperationsInput | string | null
    proofImageAdmin?: NullableStringFieldUpdateOperationsInput | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    integrationMethod?: StringFieldUpdateOperationsInput | string
    openpayTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    autoApprovalEligible?: BoolFieldUpdateOperationsInput | boolean
    processingFee?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDepositRequestsNestedInput
  }

  export type DepositRequestUncheckedUpdateWithoutOpenpayTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    referenceCode?: StringFieldUpdateOperationsInput | string
    bankReference?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccountName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
    validatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    proofImage?: NullableStringFieldUpdateOperationsInput | string | null
    proofImageAdmin?: NullableStringFieldUpdateOperationsInput | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    integrationMethod?: StringFieldUpdateOperationsInput | string
    openpayTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    autoApprovalEligible?: BoolFieldUpdateOperationsInput | boolean
    processingFee?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OpenpayCustomerUpsertWithoutTransactionsInput = {
    update: XOR<OpenpayCustomerUpdateWithoutTransactionsInput, OpenpayCustomerUncheckedUpdateWithoutTransactionsInput>
    create: XOR<OpenpayCustomerCreateWithoutTransactionsInput, OpenpayCustomerUncheckedCreateWithoutTransactionsInput>
    where?: OpenpayCustomerWhereInput
  }

  export type OpenpayCustomerUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: OpenpayCustomerWhereInput
    data: XOR<OpenpayCustomerUpdateWithoutTransactionsInput, OpenpayCustomerUncheckedUpdateWithoutTransactionsInput>
  }

  export type OpenpayCustomerUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    openpayCustomerId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOpenpayCustomerNestedInput
    paymentMethods?: OpenpayPaymentMethodUpdateManyWithoutCustomerNestedInput
  }

  export type OpenpayCustomerUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    openpayCustomerId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentMethods?: OpenpayPaymentMethodUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type OpenpayWebhookEventUpsertWithWhereUniqueWithoutTransactionInput = {
    where: OpenpayWebhookEventWhereUniqueInput
    update: XOR<OpenpayWebhookEventUpdateWithoutTransactionInput, OpenpayWebhookEventUncheckedUpdateWithoutTransactionInput>
    create: XOR<OpenpayWebhookEventCreateWithoutTransactionInput, OpenpayWebhookEventUncheckedCreateWithoutTransactionInput>
  }

  export type OpenpayWebhookEventUpdateWithWhereUniqueWithoutTransactionInput = {
    where: OpenpayWebhookEventWhereUniqueInput
    data: XOR<OpenpayWebhookEventUpdateWithoutTransactionInput, OpenpayWebhookEventUncheckedUpdateWithoutTransactionInput>
  }

  export type OpenpayWebhookEventUpdateManyWithWhereWithoutTransactionInput = {
    where: OpenpayWebhookEventScalarWhereInput
    data: XOR<OpenpayWebhookEventUpdateManyMutationInput, OpenpayWebhookEventUncheckedUpdateManyWithoutTransactionInput>
  }

  export type OpenpayWebhookEventScalarWhereInput = {
    AND?: OpenpayWebhookEventScalarWhereInput | OpenpayWebhookEventScalarWhereInput[]
    OR?: OpenpayWebhookEventScalarWhereInput[]
    NOT?: OpenpayWebhookEventScalarWhereInput | OpenpayWebhookEventScalarWhereInput[]
    id?: StringFilter<"OpenpayWebhookEvent"> | string
    openpayEventId?: StringFilter<"OpenpayWebhookEvent"> | string
    eventType?: StringFilter<"OpenpayWebhookEvent"> | string
    transactionId?: StringNullableFilter<"OpenpayWebhookEvent"> | string | null
    webhookSignature?: StringFilter<"OpenpayWebhookEvent"> | string
    payload?: StringFilter<"OpenpayWebhookEvent"> | string
    processedAt?: DateTimeNullableFilter<"OpenpayWebhookEvent"> | Date | string | null
    processingStatus?: StringFilter<"OpenpayWebhookEvent"> | string
    errorMessage?: StringNullableFilter<"OpenpayWebhookEvent"> | string | null
    createdAt?: DateTimeFilter<"OpenpayWebhookEvent"> | Date | string
  }

  export type OpenpayTransactionCreateWithoutWebhookEventsInput = {
    id?: string
    openpayTransactionId: string
    openpayChargeId?: string | null
    amount: number
    currency?: string
    paymentMethod: string
    paymentMethodDetails?: string | null
    openpayStatus: string
    openpayErrorCode?: string | null
    openpayErrorMessage?: string | null
    customerEmail: string
    customerPhone?: string | null
    authorizationCode?: string | null
    operationType?: string | null
    deviceSessionId?: string | null
    riskScore?: number | null
    fraudIndicators?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    chargedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    depositRequest: DepositRequestCreateNestedOneWithoutOpenpayTransactionsInput
    customer: OpenpayCustomerCreateNestedOneWithoutTransactionsInput
  }

  export type OpenpayTransactionUncheckedCreateWithoutWebhookEventsInput = {
    id?: string
    depositRequestId: string
    openpayTransactionId: string
    openpayChargeId?: string | null
    amount: number
    currency?: string
    paymentMethod: string
    paymentMethodDetails?: string | null
    openpayStatus: string
    openpayErrorCode?: string | null
    openpayErrorMessage?: string | null
    customerId: string
    customerEmail: string
    customerPhone?: string | null
    authorizationCode?: string | null
    operationType?: string | null
    deviceSessionId?: string | null
    riskScore?: number | null
    fraudIndicators?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    chargedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OpenpayTransactionCreateOrConnectWithoutWebhookEventsInput = {
    where: OpenpayTransactionWhereUniqueInput
    create: XOR<OpenpayTransactionCreateWithoutWebhookEventsInput, OpenpayTransactionUncheckedCreateWithoutWebhookEventsInput>
  }

  export type OpenpayTransactionUpsertWithoutWebhookEventsInput = {
    update: XOR<OpenpayTransactionUpdateWithoutWebhookEventsInput, OpenpayTransactionUncheckedUpdateWithoutWebhookEventsInput>
    create: XOR<OpenpayTransactionCreateWithoutWebhookEventsInput, OpenpayTransactionUncheckedCreateWithoutWebhookEventsInput>
    where?: OpenpayTransactionWhereInput
  }

  export type OpenpayTransactionUpdateToOneWithWhereWithoutWebhookEventsInput = {
    where?: OpenpayTransactionWhereInput
    data: XOR<OpenpayTransactionUpdateWithoutWebhookEventsInput, OpenpayTransactionUncheckedUpdateWithoutWebhookEventsInput>
  }

  export type OpenpayTransactionUpdateWithoutWebhookEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    openpayTransactionId?: StringFieldUpdateOperationsInput | string
    openpayChargeId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    paymentMethodDetails?: NullableStringFieldUpdateOperationsInput | string | null
    openpayStatus?: StringFieldUpdateOperationsInput | string
    openpayErrorCode?: NullableStringFieldUpdateOperationsInput | string | null
    openpayErrorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    customerEmail?: StringFieldUpdateOperationsInput | string
    customerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    authorizationCode?: NullableStringFieldUpdateOperationsInput | string | null
    operationType?: NullableStringFieldUpdateOperationsInput | string | null
    deviceSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: NullableFloatFieldUpdateOperationsInput | number | null
    fraudIndicators?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    chargedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    depositRequest?: DepositRequestUpdateOneRequiredWithoutOpenpayTransactionsNestedInput
    customer?: OpenpayCustomerUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type OpenpayTransactionUncheckedUpdateWithoutWebhookEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    depositRequestId?: StringFieldUpdateOperationsInput | string
    openpayTransactionId?: StringFieldUpdateOperationsInput | string
    openpayChargeId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    paymentMethodDetails?: NullableStringFieldUpdateOperationsInput | string | null
    openpayStatus?: StringFieldUpdateOperationsInput | string
    openpayErrorCode?: NullableStringFieldUpdateOperationsInput | string | null
    openpayErrorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    customerEmail?: StringFieldUpdateOperationsInput | string
    customerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    authorizationCode?: NullableStringFieldUpdateOperationsInput | string | null
    operationType?: NullableStringFieldUpdateOperationsInput | string | null
    deviceSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: NullableFloatFieldUpdateOperationsInput | number | null
    fraudIndicators?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    chargedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OpenpayCustomerCreateWithoutPaymentMethodsInput = {
    id?: string
    openpayCustomerId: string
    email: string
    name: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutOpenpayCustomerInput
    transactions?: OpenpayTransactionCreateNestedManyWithoutCustomerInput
  }

  export type OpenpayCustomerUncheckedCreateWithoutPaymentMethodsInput = {
    id?: string
    userId: string
    openpayCustomerId: string
    email: string
    name: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: OpenpayTransactionUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type OpenpayCustomerCreateOrConnectWithoutPaymentMethodsInput = {
    where: OpenpayCustomerWhereUniqueInput
    create: XOR<OpenpayCustomerCreateWithoutPaymentMethodsInput, OpenpayCustomerUncheckedCreateWithoutPaymentMethodsInput>
  }

  export type OpenpayCustomerUpsertWithoutPaymentMethodsInput = {
    update: XOR<OpenpayCustomerUpdateWithoutPaymentMethodsInput, OpenpayCustomerUncheckedUpdateWithoutPaymentMethodsInput>
    create: XOR<OpenpayCustomerCreateWithoutPaymentMethodsInput, OpenpayCustomerUncheckedCreateWithoutPaymentMethodsInput>
    where?: OpenpayCustomerWhereInput
  }

  export type OpenpayCustomerUpdateToOneWithWhereWithoutPaymentMethodsInput = {
    where?: OpenpayCustomerWhereInput
    data: XOR<OpenpayCustomerUpdateWithoutPaymentMethodsInput, OpenpayCustomerUncheckedUpdateWithoutPaymentMethodsInput>
  }

  export type OpenpayCustomerUpdateWithoutPaymentMethodsInput = {
    id?: StringFieldUpdateOperationsInput | string
    openpayCustomerId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOpenpayCustomerNestedInput
    transactions?: OpenpayTransactionUpdateManyWithoutCustomerNestedInput
  }

  export type OpenpayCustomerUncheckedUpdateWithoutPaymentMethodsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    openpayCustomerId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: OpenpayTransactionUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type GameParticipantCreateManyUserInput = {
    id?: string
    gameId: string
    joinedAt?: Date | string
    cardsCount?: number
    totalSpent?: Decimal | DecimalJsLike | number | string
    hasWon?: boolean
    prizeWon?: Decimal | DecimalJsLike | number | string
  }

  export type BingoCardCreateManyUserInput = {
    id?: string
    gameId: string
    cardNumber: number
    isActive?: boolean
    markedNumbers?: string
    isWinner?: boolean
    winningPattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateManyUserInput = {
    id?: string
    gameId?: string | null
    type: string
    amount: Decimal | DecimalJsLike | number | string
    description: string
    status?: string
    paymentMethod?: string | null
    paymentId?: string | null
    pearlsAmount?: Decimal | DecimalJsLike | number | string | null
    fromUserId?: string | null
    toUserId?: string | null
    commissionAmount?: Decimal | DecimalJsLike | number | string | null
    referenceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DepositRequestCreateManyUserInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    pearlsAmount: Decimal | DecimalJsLike | number | string
    currency?: string
    paymentMethod: string
    referenceCode: string
    bankReference?: string | null
    bankAccount?: string | null
    bankAccountName?: string | null
    status?: string
    adminNotes?: string | null
    validatedBy?: string | null
    validatedAt?: Date | string | null
    proofImage?: string | null
    proofImageAdmin?: string | null
    transactionId?: string | null
    integrationMethod?: string
    openpayTransactionId?: string | null
    autoApprovalEligible?: boolean
    processingFee?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    expiresAt: Date | string
  }

  export type WithdrawalRequestCreateManyUserInput = {
    id?: string
    pearlsAmount: Decimal | DecimalJsLike | number | string
    amountInSoles: Decimal | DecimalJsLike | number | string
    commission?: Decimal | DecimalJsLike | number | string
    netAmount: Decimal | DecimalJsLike | number | string
    bankCode: string
    accountNumber: string
    accountType: string
    accountHolderName: string
    accountHolderDni: string
    status?: string
    adminNotes?: string | null
    processedBy?: string | null
    processedAt?: Date | string | null
    bankTransactionId?: string | null
    transferProof?: string | null
    referenceCode: string
    transactionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateManyFromUserInput = {
    id?: string
    userId: string
    gameId?: string | null
    type: string
    amount: Decimal | DecimalJsLike | number | string
    description: string
    status?: string
    paymentMethod?: string | null
    paymentId?: string | null
    pearlsAmount?: Decimal | DecimalJsLike | number | string | null
    toUserId?: string | null
    commissionAmount?: Decimal | DecimalJsLike | number | string | null
    referenceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateManyToUserInput = {
    id?: string
    userId: string
    gameId?: string | null
    type: string
    amount: Decimal | DecimalJsLike | number | string
    description: string
    status?: string
    paymentMethod?: string | null
    paymentId?: string | null
    pearlsAmount?: Decimal | DecimalJsLike | number | string | null
    fromUserId?: string | null
    commissionAmount?: Decimal | DecimalJsLike | number | string | null
    referenceId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameParticipantUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cardsCount?: IntFieldUpdateOperationsInput | number
    totalSpent?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    hasWon?: BoolFieldUpdateOperationsInput | boolean
    prizeWon?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    game?: GameUpdateOneRequiredWithoutParticipantsNestedInput
  }

  export type GameParticipantUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cardsCount?: IntFieldUpdateOperationsInput | number
    totalSpent?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    hasWon?: BoolFieldUpdateOperationsInput | boolean
    prizeWon?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type GameParticipantUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cardsCount?: IntFieldUpdateOperationsInput | number
    totalSpent?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    hasWon?: BoolFieldUpdateOperationsInput | boolean
    prizeWon?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type BingoCardUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardNumber?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    markedNumbers?: StringFieldUpdateOperationsInput | string
    isWinner?: BoolFieldUpdateOperationsInput | boolean
    winningPattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: GameUpdateOneRequiredWithoutBingoCardsNestedInput
    numbers?: CardNumberUpdateManyWithoutCardNestedInput
  }

  export type BingoCardUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    cardNumber?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    markedNumbers?: StringFieldUpdateOperationsInput | string
    isWinner?: BoolFieldUpdateOperationsInput | boolean
    winningPattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    numbers?: CardNumberUncheckedUpdateManyWithoutCardNestedInput
  }

  export type BingoCardUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    cardNumber?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    markedNumbers?: StringFieldUpdateOperationsInput | string
    isWinner?: BoolFieldUpdateOperationsInput | boolean
    winningPattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    gameId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    pearlsAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    commissionAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromUser?: UserUpdateOneWithoutSentTransfersNestedInput
    toUser?: UserUpdateOneWithoutReceivedTransfersNestedInput
  }

  export type TransactionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    gameId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    pearlsAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    fromUserId?: NullableStringFieldUpdateOperationsInput | string | null
    toUserId?: NullableStringFieldUpdateOperationsInput | string | null
    commissionAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    gameId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    pearlsAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    fromUserId?: NullableStringFieldUpdateOperationsInput | string | null
    toUserId?: NullableStringFieldUpdateOperationsInput | string | null
    commissionAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepositRequestUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    referenceCode?: StringFieldUpdateOperationsInput | string
    bankReference?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccountName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
    validatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    proofImage?: NullableStringFieldUpdateOperationsInput | string | null
    proofImageAdmin?: NullableStringFieldUpdateOperationsInput | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    integrationMethod?: StringFieldUpdateOperationsInput | string
    openpayTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    autoApprovalEligible?: BoolFieldUpdateOperationsInput | boolean
    processingFee?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    openpayTransactions?: OpenpayTransactionUpdateManyWithoutDepositRequestNestedInput
  }

  export type DepositRequestUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    referenceCode?: StringFieldUpdateOperationsInput | string
    bankReference?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccountName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
    validatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    proofImage?: NullableStringFieldUpdateOperationsInput | string | null
    proofImageAdmin?: NullableStringFieldUpdateOperationsInput | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    integrationMethod?: StringFieldUpdateOperationsInput | string
    openpayTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    autoApprovalEligible?: BoolFieldUpdateOperationsInput | boolean
    processingFee?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    openpayTransactions?: OpenpayTransactionUncheckedUpdateManyWithoutDepositRequestNestedInput
  }

  export type DepositRequestUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    pearlsAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    referenceCode?: StringFieldUpdateOperationsInput | string
    bankReference?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccountName?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
    validatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    proofImage?: NullableStringFieldUpdateOperationsInput | string | null
    proofImageAdmin?: NullableStringFieldUpdateOperationsInput | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    integrationMethod?: StringFieldUpdateOperationsInput | string
    openpayTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    autoApprovalEligible?: BoolFieldUpdateOperationsInput | boolean
    processingFee?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WithdrawalRequestUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    pearlsAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amountInSoles?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commission?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bankCode?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    accountHolderDni?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bankTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    transferProof?: NullableStringFieldUpdateOperationsInput | string | null
    referenceCode?: StringFieldUpdateOperationsInput | string
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WithdrawalRequestUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    pearlsAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amountInSoles?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commission?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bankCode?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    accountHolderDni?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bankTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    transferProof?: NullableStringFieldUpdateOperationsInput | string | null
    referenceCode?: StringFieldUpdateOperationsInput | string
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WithdrawalRequestUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    pearlsAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amountInSoles?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commission?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bankCode?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    accountType?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    accountHolderDni?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    adminNotes?: NullableStringFieldUpdateOperationsInput | string | null
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bankTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    transferProof?: NullableStringFieldUpdateOperationsInput | string | null
    referenceCode?: StringFieldUpdateOperationsInput | string
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUpdateWithoutFromUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    gameId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    pearlsAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    commissionAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTransactionsNestedInput
    toUser?: UserUpdateOneWithoutReceivedTransfersNestedInput
  }

  export type TransactionUncheckedUpdateWithoutFromUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    gameId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    pearlsAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    toUserId?: NullableStringFieldUpdateOperationsInput | string | null
    commissionAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutFromUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    gameId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    pearlsAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    toUserId?: NullableStringFieldUpdateOperationsInput | string | null
    commissionAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUpdateWithoutToUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    gameId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    pearlsAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    commissionAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTransactionsNestedInput
    fromUser?: UserUpdateOneWithoutSentTransfersNestedInput
  }

  export type TransactionUncheckedUpdateWithoutToUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    gameId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    pearlsAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    fromUserId?: NullableStringFieldUpdateOperationsInput | string | null
    commissionAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutToUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    gameId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    pearlsAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    fromUserId?: NullableStringFieldUpdateOperationsInput | string | null
    commissionAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameParticipantCreateManyGameInput = {
    id?: string
    userId: string
    joinedAt?: Date | string
    cardsCount?: number
    totalSpent?: Decimal | DecimalJsLike | number | string
    hasWon?: boolean
    prizeWon?: Decimal | DecimalJsLike | number | string
  }

  export type BingoCardCreateManyGameInput = {
    id?: string
    userId: string
    cardNumber: number
    isActive?: boolean
    markedNumbers?: string
    isWinner?: boolean
    winningPattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameParticipantUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cardsCount?: IntFieldUpdateOperationsInput | number
    totalSpent?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    hasWon?: BoolFieldUpdateOperationsInput | boolean
    prizeWon?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    user?: UserUpdateOneRequiredWithoutGameParticipationsNestedInput
  }

  export type GameParticipantUncheckedUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cardsCount?: IntFieldUpdateOperationsInput | number
    totalSpent?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    hasWon?: BoolFieldUpdateOperationsInput | boolean
    prizeWon?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type GameParticipantUncheckedUpdateManyWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cardsCount?: IntFieldUpdateOperationsInput | number
    totalSpent?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    hasWon?: BoolFieldUpdateOperationsInput | boolean
    prizeWon?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type BingoCardUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardNumber?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    markedNumbers?: StringFieldUpdateOperationsInput | string
    isWinner?: BoolFieldUpdateOperationsInput | boolean
    winningPattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBingoCardsNestedInput
    numbers?: CardNumberUpdateManyWithoutCardNestedInput
  }

  export type BingoCardUncheckedUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    cardNumber?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    markedNumbers?: StringFieldUpdateOperationsInput | string
    isWinner?: BoolFieldUpdateOperationsInput | boolean
    winningPattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    numbers?: CardNumberUncheckedUpdateManyWithoutCardNestedInput
  }

  export type BingoCardUncheckedUpdateManyWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    cardNumber?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    markedNumbers?: StringFieldUpdateOperationsInput | string
    isWinner?: BoolFieldUpdateOperationsInput | boolean
    winningPattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CardNumberCreateManyCardInput = {
    id?: string
    position: number
    column: string
    number?: number | null
    isMarked?: boolean
    isFree?: boolean
  }

  export type CardNumberUpdateWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    column?: StringFieldUpdateOperationsInput | string
    number?: NullableIntFieldUpdateOperationsInput | number | null
    isMarked?: BoolFieldUpdateOperationsInput | boolean
    isFree?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CardNumberUncheckedUpdateWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    column?: StringFieldUpdateOperationsInput | string
    number?: NullableIntFieldUpdateOperationsInput | number | null
    isMarked?: BoolFieldUpdateOperationsInput | boolean
    isFree?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CardNumberUncheckedUpdateManyWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    column?: StringFieldUpdateOperationsInput | string
    number?: NullableIntFieldUpdateOperationsInput | number | null
    isMarked?: BoolFieldUpdateOperationsInput | boolean
    isFree?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OpenpayTransactionCreateManyDepositRequestInput = {
    id?: string
    openpayTransactionId: string
    openpayChargeId?: string | null
    amount: number
    currency?: string
    paymentMethod: string
    paymentMethodDetails?: string | null
    openpayStatus: string
    openpayErrorCode?: string | null
    openpayErrorMessage?: string | null
    customerId: string
    customerEmail: string
    customerPhone?: string | null
    authorizationCode?: string | null
    operationType?: string | null
    deviceSessionId?: string | null
    riskScore?: number | null
    fraudIndicators?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    chargedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OpenpayTransactionUpdateWithoutDepositRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    openpayTransactionId?: StringFieldUpdateOperationsInput | string
    openpayChargeId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    paymentMethodDetails?: NullableStringFieldUpdateOperationsInput | string | null
    openpayStatus?: StringFieldUpdateOperationsInput | string
    openpayErrorCode?: NullableStringFieldUpdateOperationsInput | string | null
    openpayErrorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    customerEmail?: StringFieldUpdateOperationsInput | string
    customerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    authorizationCode?: NullableStringFieldUpdateOperationsInput | string | null
    operationType?: NullableStringFieldUpdateOperationsInput | string | null
    deviceSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: NullableFloatFieldUpdateOperationsInput | number | null
    fraudIndicators?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    chargedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: OpenpayCustomerUpdateOneRequiredWithoutTransactionsNestedInput
    webhookEvents?: OpenpayWebhookEventUpdateManyWithoutTransactionNestedInput
  }

  export type OpenpayTransactionUncheckedUpdateWithoutDepositRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    openpayTransactionId?: StringFieldUpdateOperationsInput | string
    openpayChargeId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    paymentMethodDetails?: NullableStringFieldUpdateOperationsInput | string | null
    openpayStatus?: StringFieldUpdateOperationsInput | string
    openpayErrorCode?: NullableStringFieldUpdateOperationsInput | string | null
    openpayErrorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    customerEmail?: StringFieldUpdateOperationsInput | string
    customerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    authorizationCode?: NullableStringFieldUpdateOperationsInput | string | null
    operationType?: NullableStringFieldUpdateOperationsInput | string | null
    deviceSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: NullableFloatFieldUpdateOperationsInput | number | null
    fraudIndicators?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    chargedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    webhookEvents?: OpenpayWebhookEventUncheckedUpdateManyWithoutTransactionNestedInput
  }

  export type OpenpayTransactionUncheckedUpdateManyWithoutDepositRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    openpayTransactionId?: StringFieldUpdateOperationsInput | string
    openpayChargeId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    paymentMethodDetails?: NullableStringFieldUpdateOperationsInput | string | null
    openpayStatus?: StringFieldUpdateOperationsInput | string
    openpayErrorCode?: NullableStringFieldUpdateOperationsInput | string | null
    openpayErrorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: StringFieldUpdateOperationsInput | string
    customerEmail?: StringFieldUpdateOperationsInput | string
    customerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    authorizationCode?: NullableStringFieldUpdateOperationsInput | string | null
    operationType?: NullableStringFieldUpdateOperationsInput | string | null
    deviceSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: NullableFloatFieldUpdateOperationsInput | number | null
    fraudIndicators?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    chargedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OpenpayPaymentMethodCreateManyCustomerInput = {
    id?: string
    openpayCardId?: string | null
    cardType?: string | null
    cardBrand?: string | null
    cardNumberMasked?: string | null
    cardHolderName?: string | null
    expirationMonth?: string | null
    expirationYear?: string | null
    isActive?: boolean
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OpenpayTransactionCreateManyCustomerInput = {
    id?: string
    depositRequestId: string
    openpayTransactionId: string
    openpayChargeId?: string | null
    amount: number
    currency?: string
    paymentMethod: string
    paymentMethodDetails?: string | null
    openpayStatus: string
    openpayErrorCode?: string | null
    openpayErrorMessage?: string | null
    customerEmail: string
    customerPhone?: string | null
    authorizationCode?: string | null
    operationType?: string | null
    deviceSessionId?: string | null
    riskScore?: number | null
    fraudIndicators?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    chargedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OpenpayPaymentMethodUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    openpayCardId?: NullableStringFieldUpdateOperationsInput | string | null
    cardType?: NullableStringFieldUpdateOperationsInput | string | null
    cardBrand?: NullableStringFieldUpdateOperationsInput | string | null
    cardNumberMasked?: NullableStringFieldUpdateOperationsInput | string | null
    cardHolderName?: NullableStringFieldUpdateOperationsInput | string | null
    expirationMonth?: NullableStringFieldUpdateOperationsInput | string | null
    expirationYear?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OpenpayPaymentMethodUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    openpayCardId?: NullableStringFieldUpdateOperationsInput | string | null
    cardType?: NullableStringFieldUpdateOperationsInput | string | null
    cardBrand?: NullableStringFieldUpdateOperationsInput | string | null
    cardNumberMasked?: NullableStringFieldUpdateOperationsInput | string | null
    cardHolderName?: NullableStringFieldUpdateOperationsInput | string | null
    expirationMonth?: NullableStringFieldUpdateOperationsInput | string | null
    expirationYear?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OpenpayPaymentMethodUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    openpayCardId?: NullableStringFieldUpdateOperationsInput | string | null
    cardType?: NullableStringFieldUpdateOperationsInput | string | null
    cardBrand?: NullableStringFieldUpdateOperationsInput | string | null
    cardNumberMasked?: NullableStringFieldUpdateOperationsInput | string | null
    cardHolderName?: NullableStringFieldUpdateOperationsInput | string | null
    expirationMonth?: NullableStringFieldUpdateOperationsInput | string | null
    expirationYear?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OpenpayTransactionUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    openpayTransactionId?: StringFieldUpdateOperationsInput | string
    openpayChargeId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    paymentMethodDetails?: NullableStringFieldUpdateOperationsInput | string | null
    openpayStatus?: StringFieldUpdateOperationsInput | string
    openpayErrorCode?: NullableStringFieldUpdateOperationsInput | string | null
    openpayErrorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    customerEmail?: StringFieldUpdateOperationsInput | string
    customerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    authorizationCode?: NullableStringFieldUpdateOperationsInput | string | null
    operationType?: NullableStringFieldUpdateOperationsInput | string | null
    deviceSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: NullableFloatFieldUpdateOperationsInput | number | null
    fraudIndicators?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    chargedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    depositRequest?: DepositRequestUpdateOneRequiredWithoutOpenpayTransactionsNestedInput
    webhookEvents?: OpenpayWebhookEventUpdateManyWithoutTransactionNestedInput
  }

  export type OpenpayTransactionUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    depositRequestId?: StringFieldUpdateOperationsInput | string
    openpayTransactionId?: StringFieldUpdateOperationsInput | string
    openpayChargeId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    paymentMethodDetails?: NullableStringFieldUpdateOperationsInput | string | null
    openpayStatus?: StringFieldUpdateOperationsInput | string
    openpayErrorCode?: NullableStringFieldUpdateOperationsInput | string | null
    openpayErrorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    customerEmail?: StringFieldUpdateOperationsInput | string
    customerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    authorizationCode?: NullableStringFieldUpdateOperationsInput | string | null
    operationType?: NullableStringFieldUpdateOperationsInput | string | null
    deviceSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: NullableFloatFieldUpdateOperationsInput | number | null
    fraudIndicators?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    chargedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    webhookEvents?: OpenpayWebhookEventUncheckedUpdateManyWithoutTransactionNestedInput
  }

  export type OpenpayTransactionUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    depositRequestId?: StringFieldUpdateOperationsInput | string
    openpayTransactionId?: StringFieldUpdateOperationsInput | string
    openpayChargeId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: StringFieldUpdateOperationsInput | string
    paymentMethodDetails?: NullableStringFieldUpdateOperationsInput | string | null
    openpayStatus?: StringFieldUpdateOperationsInput | string
    openpayErrorCode?: NullableStringFieldUpdateOperationsInput | string | null
    openpayErrorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    customerEmail?: StringFieldUpdateOperationsInput | string
    customerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    authorizationCode?: NullableStringFieldUpdateOperationsInput | string | null
    operationType?: NullableStringFieldUpdateOperationsInput | string | null
    deviceSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: NullableFloatFieldUpdateOperationsInput | number | null
    fraudIndicators?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    chargedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OpenpayWebhookEventCreateManyTransactionInput = {
    id?: string
    openpayEventId: string
    eventType: string
    webhookSignature: string
    payload: string
    processedAt?: Date | string | null
    processingStatus?: string
    errorMessage?: string | null
    createdAt?: Date | string
  }

  export type OpenpayWebhookEventUpdateWithoutTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    openpayEventId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    webhookSignature?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingStatus?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OpenpayWebhookEventUncheckedUpdateWithoutTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    openpayEventId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    webhookSignature?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingStatus?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OpenpayWebhookEventUncheckedUpdateManyWithoutTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    openpayEventId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    webhookSignature?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingStatus?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GameCountOutputTypeDefaultArgs instead
     */
    export type GameCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GameCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BingoCardCountOutputTypeDefaultArgs instead
     */
    export type BingoCardCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BingoCardCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepositRequestCountOutputTypeDefaultArgs instead
     */
    export type DepositRequestCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepositRequestCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OpenpayCustomerCountOutputTypeDefaultArgs instead
     */
    export type OpenpayCustomerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OpenpayCustomerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OpenpayTransactionCountOutputTypeDefaultArgs instead
     */
    export type OpenpayTransactionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OpenpayTransactionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GameDefaultArgs instead
     */
    export type GameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GameDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GameParticipantDefaultArgs instead
     */
    export type GameParticipantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GameParticipantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BingoCardDefaultArgs instead
     */
    export type BingoCardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BingoCardDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CardNumberDefaultArgs instead
     */
    export type CardNumberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CardNumberDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TransactionDefaultArgs instead
     */
    export type TransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TransactionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WalletDefaultArgs instead
     */
    export type WalletArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WalletDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepositRequestDefaultArgs instead
     */
    export type DepositRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepositRequestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WithdrawalRequestDefaultArgs instead
     */
    export type WithdrawalRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WithdrawalRequestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaymentReferenceDefaultArgs instead
     */
    export type PaymentReferenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaymentReferenceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BankConfigurationDefaultArgs instead
     */
    export type BankConfigurationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BankConfigurationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuditLogDefaultArgs instead
     */
    export type AuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuditLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaymentConfigurationDefaultArgs instead
     */
    export type PaymentConfigurationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaymentConfigurationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OpenpayCustomerDefaultArgs instead
     */
    export type OpenpayCustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OpenpayCustomerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OpenpayTransactionDefaultArgs instead
     */
    export type OpenpayTransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OpenpayTransactionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OpenpayWebhookEventDefaultArgs instead
     */
    export type OpenpayWebhookEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OpenpayWebhookEventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OpenpayPaymentMethodDefaultArgs instead
     */
    export type OpenpayPaymentMethodArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OpenpayPaymentMethodDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}