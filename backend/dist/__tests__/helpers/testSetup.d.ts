import { Express } from 'express';
export declare function createTestApp(): Promise<Express>;
export declare function createTestUser(email?: string, username?: string, password?: string): Promise<{
    role: string;
    username: string;
    password: string;
    id: string;
    email: string;
    balance: import("@prisma/client/runtime/library").Decimal;
    pearlsBalance: import("@prisma/client/runtime/library").Decimal;
    createdAt: Date;
    updatedAt: Date;
    isActive: boolean;
    isVerified: boolean;
    fullName: string | null;
    phone: string | null;
    dni: string | null;
    birthDate: Date | null;
}>;
export declare function createAdminUser(email?: string, username?: string, password?: string): Promise<{
    role: string;
    username: string;
    password: string;
    id: string;
    email: string;
    balance: import("@prisma/client/runtime/library").Decimal;
    pearlsBalance: import("@prisma/client/runtime/library").Decimal;
    createdAt: Date;
    updatedAt: Date;
    isActive: boolean;
    isVerified: boolean;
    fullName: string | null;
    phone: string | null;
    dni: string | null;
    birthDate: Date | null;
}>;
export declare function createAuthToken(user: any, expiresIn?: string | number): string;
export declare function createTestOpenpayCustomer(userId: string): Promise<{
    userId: string;
    name: string;
    id: string;
    email: string;
    createdAt: Date;
    updatedAt: Date;
    phone: string | null;
    openpayCustomerId: string;
}>;
export declare function createTestDepositRequest(userId: string, amount?: number, status?: string): Promise<{
    status: string;
    userId: string;
    amount: import("@prisma/client/runtime/library").Decimal;
    pearlsAmount: import("@prisma/client/runtime/library").Decimal;
    id: string;
    createdAt: Date;
    updatedAt: Date;
    paymentMethod: string;
    transactionId: string | null;
    bankAccount: string | null;
    bankReference: string | null;
    adminNotes: string | null;
    expiresAt: Date;
    currency: string;
    referenceCode: string;
    bankAccountName: string | null;
    validatedBy: string | null;
    validatedAt: Date | null;
    proofImage: string | null;
    proofImageAdmin: string | null;
    integrationMethod: string;
    openpayTransactionId: string | null;
    autoApprovalEligible: boolean;
    processingFee: number;
}>;
export declare function createTestOpenpayTransaction(depositRequestId: string, openpayChargeId: string, status?: string): Promise<{
    userAgent: string | null;
    amount: number;
    id: string;
    createdAt: Date;
    updatedAt: Date;
    paymentMethod: string;
    ipAddress: string | null;
    depositRequestId: string;
    expiresAt: Date | null;
    currency: string;
    openpayTransactionId: string;
    customerId: string;
    deviceSessionId: string | null;
    openpayChargeId: string | null;
    paymentMethodDetails: string | null;
    openpayStatus: string;
    openpayErrorCode: string | null;
    openpayErrorMessage: string | null;
    customerEmail: string;
    customerPhone: string | null;
    authorizationCode: string | null;
    operationType: string | null;
    riskScore: number | null;
    fraudIndicators: string | null;
    chargedAt: Date | null;
}>;
export declare function createTestWebhookEvent(transactionId: string, eventType?: string): Promise<{
    id: string;
    createdAt: Date;
    transactionId: string | null;
    processedAt: Date | null;
    errorMessage: string | null;
    eventType: string;
    openpayEventId: string;
    webhookSignature: string;
    payload: string;
    processingStatus: string;
}>;
export declare function cleanupTestData(): Promise<void>;
export declare function setupTestDatabase(): Promise<void>;
export declare function teardownTestDatabase(): Promise<void>;
export declare const TestDataFactory: {
    user: (overrides?: {}) => {
        email: string;
        username: string;
        fullName: string;
        role: string;
        pearlsBalance: number;
        isActive: boolean;
        isVerified: boolean;
    };
    depositRequest: (userId: string, overrides?: {}) => {
        userId: string;
        amount: number;
        pearlsAmount: number;
        currency: string;
        paymentMethod: string;
        referenceCode: string;
        integrationMethod: string;
        autoApprovalEligible: boolean;
        status: string;
        expiresAt: Date;
    };
    openpayTransaction: (depositRequestId: string, overrides?: {}) => {
        depositRequestId: string;
        openpayTransactionId: string;
        openpayChargeId: string;
        amount: number;
        currency: string;
        paymentMethod: string;
        openpayStatus: string;
        customerId: string;
        customerEmail: string;
        operationType: string;
    };
    webhookPayload: (chargeId: string, eventType?: string, overrides?: any) => any;
};
export declare const TestAssertions: {
    expectSuccessfulPayment: (response: any, expectedAmount: number) => void;
    expectFailedPayment: (response: any, expectedError?: string) => void;
    expectValidationError: (response: any, expectedCode?: string) => void;
    expectUnauthorized: (response: any) => void;
    expectRateLimited: (response: any) => void;
};
declare const _default: {
    createTestApp: typeof createTestApp;
    createTestUser: typeof createTestUser;
    createAdminUser: typeof createAdminUser;
    createAuthToken: typeof createAuthToken;
    createTestOpenpayCustomer: typeof createTestOpenpayCustomer;
    createTestDepositRequest: typeof createTestDepositRequest;
    createTestOpenpayTransaction: typeof createTestOpenpayTransaction;
    createTestWebhookEvent: typeof createTestWebhookEvent;
    cleanupTestData: typeof cleanupTestData;
    setupTestDatabase: typeof setupTestDatabase;
    teardownTestDatabase: typeof teardownTestDatabase;
    TestDataFactory: {
        user: (overrides?: {}) => {
            email: string;
            username: string;
            fullName: string;
            role: string;
            pearlsBalance: number;
            isActive: boolean;
            isVerified: boolean;
        };
        depositRequest: (userId: string, overrides?: {}) => {
            userId: string;
            amount: number;
            pearlsAmount: number;
            currency: string;
            paymentMethod: string;
            referenceCode: string;
            integrationMethod: string;
            autoApprovalEligible: boolean;
            status: string;
            expiresAt: Date;
        };
        openpayTransaction: (depositRequestId: string, overrides?: {}) => {
            depositRequestId: string;
            openpayTransactionId: string;
            openpayChargeId: string;
            amount: number;
            currency: string;
            paymentMethod: string;
            openpayStatus: string;
            customerId: string;
            customerEmail: string;
            operationType: string;
        };
        webhookPayload: (chargeId: string, eventType?: string, overrides?: any) => any;
    };
    TestAssertions: {
        expectSuccessfulPayment: (response: any, expectedAmount: number) => void;
        expectFailedPayment: (response: any, expectedError?: string) => void;
        expectValidationError: (response: any, expectedCode?: string) => void;
        expectUnauthorized: (response: any) => void;
        expectRateLimited: (response: any) => void;
    };
};
export default _default;
//# sourceMappingURL=testSetup.d.ts.map